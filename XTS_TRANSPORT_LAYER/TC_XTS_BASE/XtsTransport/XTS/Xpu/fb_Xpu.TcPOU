<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="fb_Xpu" Id="{29927d4c-8c05-4a6c-8e46-7b249798754c}" SpecialFunc="None">
    <Declaration><![CDATA[//---------------------------------------------------------------------------------------------------------------
//
//  HAUD 2023.12.14
//
//  - XTS_TRANSPORT_LAYER
//
//  fb_Xpu
//  - connect XTS_Utility.lib to TcCom
//  - cyclic plausibility checks
//  - cyclic ModuleInfoData
//
//  - connection to TcCom Server for local FB instances
//
//
//  CTRL / STATE --> see proprerties
//  structs for use of function block via mapping
//  cyclic check for new command
//
//  VAR INPUT / OUTPUT --> see properties
//
//---------------------------------------------------------------------------------------------------------------
// This SOFTWARE is provided as an Exemple by THE PROVIDER "as is" and "with all faults." THE PROVIDER makes no 
// representations or warranties of any kind concerning the safety, suitability, lack of viruses, inaccuracies, 
// typographical errors, or other harmful components of this SOFTWARE. There are inherent dangers in the use of 
// any software, and you are solely responsible for determining whether this SOFTWARE is compatible with your 
// equipment and other software installed on your equipment. You are also solely responsible for the protection 
// of your equipment and backup of your data, and THE PROVIDER will not be liable for any damages you may suffer 
// in connection with using, modifying, or distributing this SOFTWARE.
//---------------------------------------------------------------------------------------------------------------
FUNCTION_BLOCK fb_Xpu //IMPLEMENTS I_Xpu
VAR
  _eCheck                     : E_XPU_CHECK;
  _eInit                      : E_XPU_INIT;       // MUST equal INIT_DONE for anything to work

  //-------------------------------------------------------------------------------------------------
  // XTS Environment; ProcessingUnit, Part, Track, Mover
  //  - instances are initialized by getting OTCIDs
  //-------------------------------------------------------------------------------------------------
  _nXpu                       : UINT := 1;  // input property in case of multiple XPU in project
  _nGroup                     : UINT;       // input property in case of multiple Xpu in project

  _nTrack                     : UINT := 1;  // this example is intended for one track only

  {attribute 'displaymode':='hex'}
  _CaGroupOID                 : OTCID; // input property frome cyclic CA group interface, MUST be set in order to do successful INIT

  // checked and evaluated in XpuCheckCycle()
  _bAllPositionsValid,
  _bMoverIdDetectionValid,
  _bMoverIdDetectionError     : BOOL;

  _nDetectedMoverCount,
  _nExpectedMoverCount        : UINT;

  _XpuOperationMode           : OperationMode;
  _MoverIdDetectionMode       : MoverIdDetectionMode;

  // XTS_Utility connection to TcCOM Object
  _fbEnvironment              : Tc3_XTS_Utility.FB_TcIoXtsEnvironment;

  // local instances of members of Environment
  // local members are connected to TcCOM by XpuInit()
  _fbProcessingUnit           : Tc3_XTS_Utility.FB_TcIoXtsProcessingUnit;

  _fbXpuPart                  : Tc3_XTS_Utility.FB_TcIoXtsXpuPart;
  _fbXpuTrack                 : Tc3_XTS_Utility.FB_TcIoXtsXpuTrack;

  _fbMc2CaGroup               : Tc3_XTS_Utility.FB_Mc2CaGroup;

  _fbPartModules              : ARRAY[1..MAX_MODULE]  OF Tc3_XTS_Utility.FB_TcIoXtsPartModule;
  _fbMoverXpu                 : ARRAY[1..MAX_MOVER]   OF Tc3_XTS_Utility.FB_TcIoXtsXpuMover;

  _fbParameterSet             : ARRAY[1..MAX_PARAMETER_SET] OF Tc3_XTS_Utility.FB_TcIoXtsParameterSet;

  // TcCOM ObjectId (who am I talking to?)
  {attribute 'displaymode':='hex'}
  _Xpu_OTCID                  : OTCID;
  {attribute 'displaymode':='hex'}
  _Group_OTCID                : ARRAY[1..MAX_GROUP]         OF OTCID; // OTCID read from XPU
  {attribute 'displaymode':='hex'}
  _Part_OTCID                 : ARRAY[1..MAX_PART]          OF OTCID;
  {attribute 'displaymode':='hex'}
  _Track_OTCID                : ARRAY[1..MAX_TRACK]         OF OTCID;
  {attribute 'displaymode':='hex'}
  _Mov_OTCID                  : ARRAY[1..MAX_MOVER]         OF OTCID;
  {attribute 'displaymode':='hex'}
  _Module_OTCID               : ARRAY[1..MAX_MODULE]        OF OTCID;
  {attribute 'displaymode':='hex'}
  _ParameterSet_OTCID         : ARRAY[1..MAX_PARAMETER_SET] OF OTCID;

  // COE Data access
  _ModuleInfoData             : REFERENCE TO ARRAY[1..MAX_MODULE] OF Tc3_XTS_Utility.ST_InfoDataView;
  _bModulePower               : ARRAY[1..MAX_MODULE] OF BOOL;

  // double check RailLength, XpuInit() will get stuck in error if not configured correctly
  _RailLengthXpu              : LREAL;
  _RailLengthGroup            : LREAL;

  _nLengthXpu,
  _nLengthGroup               : UINT;

  _nParameterSetCount,
  _nInfoServerCount,
  _nIfoStationCount,
  _nPartCount,
  _nTrackCount,
  _nTaskCount,
  _nMoverCount,
  _nModuleCount               : UINT;

  _ix                         : UINT;

  {attribute 'hide'}
  _XpuInfo                    : ST_XPU_INFO;

  _stMsg                      : ST_Message;
  _eMessageLevel              : E_MessageType;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="methods" Id="{7002455c-68ef-4f90-9114-fc4379a0dc56}" />
    <Folder Name="properties" Id="{058be475-f1f7-4e34-80ee-9ada99ed31e4}" />
    <Property Name="AllModulesDcLink" Id="{63a4da64-eb03-49d2-ac97-88d49922cbf9}" FolderPath="properties\">
      <Declaration><![CDATA[// get DcLink information from motor modules
PROPERTY AllModulesDcLink : bool]]></Declaration>
      <Get Name="Get" Id="{122cc8bd-83c7-48a3-b7f4-8e6a42b462b1}">
        <Declaration><![CDATA[VAR
  _bTmp     : BOOL;
  _nModule  : UINT;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF NOT (_eInit = E_XPU_INIT.INIT_DONE) THEN RETURN; END_IF

FOR _nModule := 1 TO _nModuleCount
DO
  IF NOT _bModulePower[_nModule] // information comes from cyclic call in Cycle(): ModuleInfoData()
  THEN
    _bTmp  := FALSE;
    EXIT;
  ELSE
    _bTmp  := TRUE;
  END_IF
END_FOR

AllModulesDcLink := _bTmp;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="CaGroupOID" Id="{c235a5d3-b915-4bab-8fa1-a76f33f22f71}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY CaGroupOID : OTCID]]></Declaration>
      <Set Name="Set" Id="{bde45a3d-bf69-427c-95cf-80aa511d8d35}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[// Group OTCID must come from the CA Group mapping in NC.Objects
_CaGroupOID := CaGroupOID;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Cycle" Id="{0cd9456d-8e29-4edb-92ec-ed69e420870a}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD Cycle : E_PROGRESS
VAR_INPUT
  Enable      : BOOL; // enable to do cyclic checks on Environment and its members
END_VAR
VAR_IN_OUT
  _eChk       : E_XPU_CHECK;
END_VAR
VAR_INST

  _eJobResult,
  _eResult      : E_PROGRESS;
  _eState       : E_PROGRESS := E_PROGRESS.PROGRESS_INIT;

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Enable
THEN
  ModuleInfoData(FALSE);

  _eResult  :=
  _eState   := E_PROGRESS.PROGRESS_INIT; 
  _eChk     := E_XPU_CHECK.INIT_CHECK;
END_IF 
//-----------------------------------------------------------------------------
// cyclic data fetch from Environment, ProcessingUnit, Part, ...
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_INIT:
    IF Enable
    THEN
      _eState := _eResult         := E_PROGRESS.PROGRESS_BUSY;
    END_IF

  //---------------------------------------------------------------------------
  E_PROGRESS.PROGRESS_BUSY:       // get data from Xpu, ProcessingUnit, Part, XpuCaGroup
    _eState                       := E_PROGRESS.PROGRESS_STARTUP;

    _bAllPositionsValid           := _fbProcessingUnit.GetAreAllPositionsValid();
    _nDetectedMoverCount          := TO_UINT(_fbProcessingUnit.GetDetectedMoverCount());
    _nExpectedMoverCount          := TO_UINT(_fbProcessingUnit.GetExpectedMoverCount());
  
    _XpuOperationMode             := _fbProcessingUnit.GetOperationMode();
    _MoverIdDetectionMode         := _fbProcessingUnit.GetMoverIdDetectionMode();
  
    _RailLengthXpu                := _fbXpuPart.GetLength();
    _RailLengthGroup              := _fbMc2CaGroup.GetRailLength();
    _nLengthXpu                   := TO_UINT(_RailLengthXpu);
    _nLengthGroup                 := TO_UINT(_RailLengthGroup);
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  //---------------------------------------------------------------------------
  E_PROGRESS.PROGRESS_STARTUP:    // check data for errors
    IF NOT (_bAllPositionsValid)
    THEN
      _eChk                       := E_XPU_CHECK.PROCESSING_UNIT_POSITIONS_VALID;
      _eState := _eResult         := E_PROGRESS.PROGRESS_ERROR;

      _stMsg.eType                := E_MessageType.eMessageError;
      _stMsg.eSubdevice           := e_Subdevice.Xpu_fbProcessingUnit;
      _stMsg.iErrorNumber         := 0;
      _stMsg.sText                := concat(TO_STRING(E_XPU_CHECK.PROCESSING_UNIT_POSITIONS_VALID), ': ');
      _stMsg.sText                := concat(_stMsg.sText, TO_STRING(_eResult));
      f_MessageSet(_stMsg);

    ELSIF NOT (_nLengthXpu > 0)
    THEN
      _eChk                       := E_XPU_CHECK.XPU_RAIL_LENGTH;
      _eState := _eResult         := E_PROGRESS.PROGRESS_ERROR;

      _stMsg.eType                := E_MessageType.eMessageError;
      _stMsg.eSubdevice           := e_Subdevice.Xpu_fbProcessingUnit;
      _stMsg.iErrorNumber         := 0;
      _stMsg.sText                := concat(TO_STRING(E_XPU_CHECK.XPU_RAIL_LENGTH), ': ');
      _stMsg.sText                := concat(_stMsg.sText, TO_STRING(_eResult));
      f_MessageSet(_stMsg);

    ELSIF NOT (_nLengthGroup > 0)
    THEN
      _eChk                       := E_XPU_CHECK.GROUP_RAIL_LENGTH;
      _eState := _eResult         := E_PROGRESS.PROGRESS_ERROR;
     
      _stMsg.eType                := E_MessageType.eMessageError;
      _stMsg.eSubdevice           := e_Subdevice.Xpu_fbProcessingUnit;
      _stMsg.iErrorNumber         := 0;
      _stMsg.sText                := concat(TO_STRING(E_XPU_CHECK.GROUP_RAIL_LENGTH), ': ');
      _stMsg.sText                := concat(_stMsg.sText, TO_STRING(_eResult));
      f_MessageSet(_stMsg);

    ELSIF NOT (_nDetectedMoverCount = _nExpectedMoverCount)
    THEN
      _bMoverIdDetectionValid     := FALSE;
      _eChk                       := E_XPU_CHECK.MOVER_COUNT_NOT_EQUAL;
      _eState := _eResult         := E_PROGRESS.PROGRESS_ERROR;

      _stMsg.eType                := E_MessageType.eMessageError;
      _stMsg.eSubdevice           := e_Subdevice.Xpu_fbProcessingUnit;
      _stMsg.iErrorNumber         := 0;
      _stMsg.sText                := concat(TO_STRING(E_XPU_CHECK.MOVER_COUNT_NOT_EQUAL), ': ');
      _stMsg.sText                := concat(_stMsg.sText, TO_STRING(_eResult));
      f_MessageSet(_stMsg);
  
    ELSIF NOT (_nLengthXpu = _nLengthGroup)
    THEN
      _eChk                       := E_XPU_CHECK.RAIL_LENGTH_COMPARE;
      _eState := _eResult         := E_PROGRESS.PROGRESS_ERROR;
 
      _stMsg.eType                := E_MessageType.eMessageError;
      _stMsg.eSubdevice           := e_Subdevice.Xpu_fbProcessingUnit;
      _stMsg.iErrorNumber         := 0;
      _stMsg.sText                := concat(TO_STRING(E_XPU_CHECK.RAIL_LENGTH_COMPARE), ': ');
      _stMsg.sText                := concat(_stMsg.sText, TO_STRING(_eResult));
      f_MessageSet(_stMsg);

    ELSE
      _eResult                    := E_PROGRESS.PROGRESS_WORKING;

      IF NOT (__ISVALIDREF(_ModuleInfoData))
      THEN
        _eState                   := E_PROGRESS.PROGRESS_BUSY;

        _stMsg.eType                := E_MessageType.eMessageError;
        _stMsg.eSubdevice           := e_Subdevice.Xpu_fbPartModules;
        _stMsg.iErrorNumber         := 0;
        _stMsg.sText                := concat(TO_STRING(_eState), ': ');
        _stMsg.sText                := concat(_stMsg.sText, 'NOT VALID _ModuleInfoData ref');
      ELSE
        _eJobResult               := ModuleInfoData(TRUE);
  
        IF (_eJobResult = E_PROGRESS.PROGRESS_DONE)
        THEN
          _eState                 := E_PROGRESS.PROGRESS_BUSY;
        END_IF  
      END_IF
    END_IF
END_CASE

Cycle                             := _eResult;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetEnvironment" Id="{e36d2f89-f1bb-4435-b746-82140970c779}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD GetEnvironment : I_TcIoXtsEnvironment
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT (_eInit = E_XPU_INIT.INIT_DONE) THEN RETURN; END_IF

GetEnvironment := _fbEnvironment;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetParameterSet" Id="{b11c19fe-f950-4259-be08-3a97444870b7}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD GetParameterSet : I_TcIoXtsParameterSet
VAR_INPUT
  Index     : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT (_eInit = E_XPU_INIT.INIT_DONE) THEN RETURN; END_IF

IF NOT (Index > 0) OR
   NOT (Index < MAX_PARAMETER_SET+1)
THEN
  RETURN;
ELSE
  GetParameterSet   := _fbParameterSet[Index];
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetProcessingUnit" Id="{bba8950f-e56a-413e-a7a5-de4639f91257}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD GetProcessingUnit : Tc3_XTS_Utility.I_TcIoXtsProcessingUnit
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT (_eInit = E_XPU_INIT.INIT_DONE) THEN RETURN; END_IF

GetProcessingUnit := _fbProcessingUnit;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="IdDetectionModeToString" Id="{75190746-bbe1-4610-9e1b-d55c6ddd8caa}" FolderPath="methods\">
      <Declaration><![CDATA[// mothers' little helper for display in visu
METHOD IdDetectionModeToString : string(20)
VAR
  _DetectionMode    : MoverIdDetectionMode; // Mover ID detection procedure
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// just a little helper for visu display
IF NOT (_eInit = E_XPU_INIT.INIT_DONE) THEN IdDetectionModeToString := 'INIT required'; RETURN; END_IF

_DetectionMode := _fbProcessingUnit.GetMoverIdDetectionMode();

CASE _DetectionMode
OF
  MoverIdDetectionMode.Standard:
    IdDetectionModeToString       := 'Standard';

  MoverIdDetectionMode.Mover1:
    IdDetectionModeToString       := 'Mover 1';

  MoverIdDetectionMode.MultipleMover1:
    IdDetectionModeToString       := 'Multiple Mover 1';

ELSE
    IdDetectionModeToString       := 'UNKNOWN Mode';
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Property Name="MessageLevel" Id="{e5a52537-96ac-497b-86d6-6bb3da569156}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY MessageLevel : e_messagetype]]></Declaration>
      <Set Name="Set" Id="{002d588b-2617-4ce1-a6cf-3782848d1e14}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_eMessageLevel := MessageLevel;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="ModuleInfoData" Id="{893248ce-a46b-4a9e-87fd-73eaf7ded261}" FolderPath="methods\">
      <Declaration><![CDATA[// mothers' little helper for display in visu
METHOD PRIVATE ModuleInfoData : E_PROGRESS
VAR_INPUT
  Enable        : BOOL; // enable to read ST_InfoDataView for diag/display
END_VAR
VAR_INST
  _idt,
  _nModule : UINT;
  _eReturn,
  _eState       : E_PROGRESS;
  _aPcbTemp     : ARRAY[1..4] OF REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//---------------------------------------------------------------------------------------------
// just a little helper for visu display
// collects module data for local data
//---------------------------------------------------------------------------------------------
IF NOT (_eInit = E_XPU_INIT.INIT_DONE)      // if Xpu init is not done, just leave
THEN 
  RETURN; 
END_IF
//---------------------------------------------------------------------------------------------
IF NOT Enable                               // clear states on request
THEN
  _eReturn                                  := 
  _eState                                   := E_PROGRESS.PROGRESS_INIT; 
END_IF 
//---------------------------------------------------------------------------------------------
IF NOT (__ISVALIDREF(_ModuleInfoData))      // datafield not connected, error and leave
THEN
  ModuleInfoData                            := E_PROGRESS.PROGRESS_ERROR;
  RETURN;
END_IF
//---------------------------------------------------------------------------------------------
CASE _eState                                // get InfoData from motor modules
OF
  //-------------------------------------------------------------------------------------------
  E_PROGRESS.PROGRESS_INIT:
    IF Enable
    THEN
      _eState                                             := E_PROGRESS.PROGRESS_BUSY;
      _nModule                                            := 1;
    END_IF
END_CASE
CASE _eState
OF
  //-------------------------------------------------------------------------------------------
  E_PROGRESS.PROGRESS_BUSY:
    _eState                                               := E_PROGRESS.PROGRESS_PREPARE;

    _ModuleInfoData[_nModule].fAuxiliaryVoltage_5V        := _fbPartModules[_nModule].GetAuxiliaryVoltage5V();
    _ModuleInfoData[_nModule].fAuxiliaryVoltage_10V       := _fbPartModules[_nModule].GetAuxiliaryVoltage10V();
    _ModuleInfoData[_nModule].fAuxiliaryVoltage_24V       := _fbPartModules[_nModule].GetAuxiliaryVoltage24V();

    _ModuleInfoData[_nModule].fDcLinkVoltage              := _fbPartModules[_nModule].GetDCLinkVoltage();

    IF (_ModuleInfoData[_nModule].fDcLinkVoltage > 48.0*0.85) AND
       (_ModuleInfoData[_nModule].fDcLinkVoltage < 48.0*1.15)
    THEN
      _bModulePower[_nModule]                             := TRUE;
    ELSE
      _bModulePower[_nModule]                             := SEL((_XpuOperationMode = OperationMode.Simulation), FALSE, TRUE);
    END_IF

    _ModuleInfoData[_nModule].nCurrentScaling             := TO_INT(_fbPartModules[_nModule].GetCurrentScaling());

    _ModuleInfoData[_nModule].nDeviceInfo                 := _fbPartModules[_nModule].GetDeviceInfo();

    IF (_XpuOperationMode = OperationMode.Normal)
    THEN
      _ModuleInfoData[_nModule].fAverageTemp              := 0.0;
  
      _aPcbTemp                                           := _fbPartModules[_nModule].GetPCBTemperatures();
  
      _ModuleInfoData[_nModule].fPcbTemp_0                := _aPcbTemp[1];
      _ModuleInfoData[_nModule].fPcbTemp_1                := _aPcbTemp[2];
      _ModuleInfoData[_nModule].fPcbTemp_2                := _aPcbTemp[3];
      _ModuleInfoData[_nModule].fPcbTemp_3                := _aPcbTemp[4];

      FOR _idt := 1 TO 4
      DO
        _ModuleInfoData[_nModule].fAverageTemp            := _ModuleInfoData[_nModule].fAverageTemp + _aPcbTemp[_idt];
      END_FOR
      _ModuleInfoData[_nModule].fAverageTemp              := _ModuleInfoData[_nModule].fAverageTemp / 4;
    END_IF

    _ModuleInfoData[_nModule].fOverallCurrent             := _fbPartModules[_nModule].GetOverallCurrent();

    _ModuleInfoData[_nModule].fMaxDCLinkVoltageLast500ms  := _fbPartModules[_nModule].GetMaxDCLinkVoltageLast500ms();
    _ModuleInfoData[_nModule].fMaxOverallCurrentLast500ms := _fbPartModules[_nModule].GetMaxOverallCurrentLast500ms();
END_CASE
CASE _eState 
OF
  //-------------------------------------------------------------------------------------------
  E_PROGRESS.PROGRESS_PREPARE:
    IF (_nModule > _nModuleCount-1)
    THEN
      _eState                                             := E_PROGRESS.PROGRESS_WORKING;
    ELSE
      _nModule                                            := _nModule + 1;
      _eReturn                                            :=
      _eState                                             := E_PROGRESS.PROGRESS_BUSY;
    END_IF

  //-------------------------------------------------------------------------------------------
  E_PROGRESS.PROGRESS_WORKING:
    _eReturn                                              := E_PROGRESS.PROGRESS_DONE;
    _eState                                               := E_PROGRESS.PROGRESS_INIT;
END_CASE

ModuleInfoData                                            := _eReturn;


]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoverPositionAssignementToString" Id="{683f44e1-d7f0-4729-b2df-aab06d21628f}" FolderPath="methods\">
      <Declaration><![CDATA[// mothers' little helper for display in visu
METHOD MoverPositionAssignementToString : string(20)
VAR
  _PositionAssignement    : MoverPositionAssignment; // XPU movver assignement procedure
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// just a little helper for visu display
IF NOT (_eInit = E_XPU_INIT.INIT_DONE) THEN MoverPositionAssignementToString := 'INIT required'; RETURN; END_IF

_PositionAssignement      := _fbProcessingUnit.GetMoverPositionAssignment();

CASE _PositionAssignement
OF
  MoverPositionAssignment.Standard:
    MoverPositionAssignementToString    := 'Standard';

  MoverPositionAssignment.StartAtFirstMover:
    MoverPositionAssignementToString    := 'Start At First Mover';
ELSE
    MoverPositionAssignementToString    := 'UNKNOWN Assgnement';
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OpModeToString" Id="{44655477-0d65-41e3-b539-4a8b4bf24b7a}" FolderPath="methods\">
      <Declaration><![CDATA[// mothers' little helper for display in visu
METHOD OpModeToString : String(20)
VAR
  _OpMode     : OperationMode; // XPU operation mode
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// just a little helper for visu display
IF NOT (_eInit = E_XPU_INIT.INIT_DONE) THEN OpModeToString := 'INIT required'; RETURN; END_IF

_OpMode   := _fbProcessingUnit.GetOperationMode();

CASE _OpMode
OF
  OperationMode.Normal:
    OpModeToString      := 'Normal';

  OperationMode.Simulation:
    OpModeToString      := 'Simulation';

ELSE
    OpModeToString      := 'UNKNOWN OP MODE';
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Property Name="RailLength" Id="{aa43c5f4-f0a8-4ba1-8f46-46284a4f5cb0}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY RailLength : lreal]]></Declaration>
      <Get Name="Get" Id="{21a80123-3090-4be1-952f-9471d7d9d872}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF (_eInit = E_XPU_INIT.INIT_DONE)
THEN
  RailLength := _fbXpuPart.GetLength();
ELSE
  RailLength := 0.0;
END_IF
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="XpuInfo" Id="{3737f151-ac55-4b84-a7d8-d3c6e77c1251}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY XpuInfo : st_xpu_info]]></Declaration>
      <Get Name="Get" Id="{c6e0d9e7-f812-455a-a7a4-0b52e0db59e7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF NOT (_eInit = E_XPU_INIT.INIT_DONE) THEN RETURN; END_IF

_XpuInfo.AllPositionsValid        := _bAllPositionsValid;

_XpuInfo.IdDetectionError         := _bMoverIdDetectionError;
_XpuInfo.IdDetectionValid         := _bMoverIdDetectionValid;

_XpuInfo.IdDetectionActive        := _fbProcessingUnit.GetIsMoverIdDetectionActive();

_XpuInfo.OperationMode            := TO_UINT(_fbProcessingUnit.GetOperationMode());

_XpuInfo.IdDetectionMode          := TO_UINT(_fbProcessingUnit.GetMoverIdDetectionMode());
_XpuInfo.MoverPositionAssignement := TO_UINT(_fbProcessingUnit.GetMoverPositionAssignment());

_XpuInfo.nDetectedAxisCount       := _nDetectedMoverCount;
_XpuInfo.nExpectedAxisCount       := _nExpectedMoverCount;

_XpuInfo.nParameterSetCount       := _nParameterSetCount;

XpuInfo := _XpuInfo;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="XpuInit" Id="{a409fcf1-e268-4feb-9e3f-57c07c189dfc}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD PROTECTED XpuInit  : E_XPU_INIT      // connect to TcCOM
VAR_INPUT
  Execute       : BOOL;           // must be executed for connecting to TcCOM Environment of Xpu
END_VAR
VAR_IN_OUT
  _eReslt       : E_PROGRESS;     // send info about progress to caller
  _eChk         : E_XPU_CHECK;
END_VAR
VAR_INST
  _eState         : E_PROGRESS;   // progress state
  _nState         : E_XPU_INIT;   // initialization state
  _eDataGetCount  : E_PROGRESS;   // cycle counter to catch exceeding wait time for data from ProcessingUnit

  _nParaSetIdx    : UINT;

  _nMoverIdx,
  _nModuleIdx     : UINT;

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// clear progress on request
IF NOT Execute 
THEN 
  _eState                           := E_PROGRESS.PROGRESS_INIT;
  _eDataGetCount                    := 0;
 
  XpuInit                           :=
  _nState                           := E_XPU_INIT.INIT_START; 
  RETURN; 
END_IF

// progress state
CASE _eState
OF
  E_PROGRESS.PROGRESS_INIT:         // clear start
    IF Execute
    THEN
      _eState                       := E_PROGRESS.PROGRESS_BUSY;
      _eChk                         := E_XPU_CHECK.INIT_CHECK;    // clear cyclic check state

      // always initialize environment function blocks to get defined start of progress
      _fbEnvironment.Init(FALSE);
      _fbEnvironment.GetXpuOids(FALSE);
      _fbEnvironment.GetInfoServerOids(FALSE);

      // clear initialization states
      _nState                       := E_XPU_INIT.INIT_START;

      // clear check bits
      _bAllPositionsValid           :=
      _bMoverIdDetectionValid       :=
      _bMoverIdDetectionError       := FALSE;

      // clear check values
      _nLengthXpu                   :=
      _nLengthGroup                 :=
      _nDetectedMoverCount          :=
      _nExpectedMoverCount          := 0;

      // clear work values
      _nParameterSetCount           :=
      _nInfoServerCount             :=
      _nIfoStationCount             :=
      _nPartCount                   :=
      _nTrackCount                  :=
      _nTaskCount                   :=
      _nMoverCount                  :=
      _nModuleCount                 :=
      _nMoverIdx                    :=
      _nModuleIdx                   := 0;

      IF (_eMessageLevel = E_MessageType.eMessageVerbose)
      THEN
        _stMsg.eType                := E_MessageType.eMessageVerbose;
        _stMsg.eSubdevice           := e_Subdevice.Xpu_fbEnvironment;
        _stMsg.iErrorNumber         := 0;
        _stMsg.sText                := concat(TO_STRING(_eState), ': ');
        _stMsg.sText                := concat(_stMsg.sText, TO_STRING(_eChk));
        f_MessageSet(_stMsg);
      END_IF
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_BUSY:         // begin with initializing environment
    CASE _nState
    OF
    INIT_START:                     // call initialization of environment
      _fbEnvironment.Init(TRUE);

      IF (_fbEnvironment.bError)
      THEN
        _eChk                       := E_XPU_CHECK.INIT_CHECK_ERROR;

        _stMsg.eType                := E_MessageType.eMessageError;
        _stMsg.eSubdevice           := e_Subdevice.Xpu_fbEnvironment;
        _stMsg.iErrorNumber         := 666;
        _stMsg.sText                := concat(TO_STRING(_eState), ': ');
        _stMsg.sText                := concat(_stMsg.sText, TO_STRING(_eChk));
        f_MessageSet(_stMsg);

        _eState                     := E_PROGRESS.PROGRESS_ERROR;

      // get information about success in Property (P_<function>)
      ELSIF _fbEnvironment.P_IsInitialized
      THEN
        // now environment is initialized
       
        //---------------------------------------------------------------------
        // use of local function block instances
        // get information about Object IDs to local datafields
        //---------------------------------------------------------------------
        //  - everything else in this state machine is for use within fb_Xpu
        //  - the following states shall illustrate how TcCOM Objects are connected through XTS_Utility lib
        //  - local instances of members of Environment are connected from here onward
        //
        IF _fbEnvironment.GetXpuOids(TRUE) // get object IDs for all processing units
        THEN
          _fbEnvironment.Init(FALSE);// clear environment init
          _nState                   := INIT_ENVIRONMENT_OID;

          IF (_eMessageLevel = E_MessageType.eMessageVerbose)
          THEN
            _stMsg.eType            := E_MessageType.eMessageVerbose;
            _stMsg.eSubdevice       := e_Subdevice.Xpu_fbEnvironment;
            _stMsg.iErrorNumber     := 0;
            _stMsg.sText            := concat(TO_STRING(_eState), ': ');
            _stMsg.sText            := concat(_stMsg.sText, TO_STRING(_nState));
            f_MessageSet(_stMsg);
          END_IF
        END_IF
      END_IF

    INIT_ENVIRONMENT_OID:           // get processing unit object ID for THIS instance
      _Xpu_OTCID                    := _fbEnvironment.P_XpuOids[_nXpu];   // fb_Xpu.XpuInstance --> _nXpu

      // clear all local object IDs
      memset(ADR(_Part_OTCID)         , 0, SIZEOF(_Part_OTCID));
      memset(ADR(_Track_OTCID)        , 0, SIZEOF(_Track_OTCID));
      memset(ADR(_Mov_OTCID)          , 0, SIZEOF(_Mov_OTCID));
      memset(ADR(_Module_OTCID)       , 0, SIZEOF(_Module_OTCID));
      memset(ADR(_ParameterSet_OTCID) , 0, SIZEOF(_ParameterSet_OTCID));

      // clear function blocks
      _fbEnvironment.GetXpuOids     (FALSE);
      _fbEnvironment.GetCaGroupCount(FALSE);
      _fbEnvironment.GetInfoServerCount(FALSE);
      _fbEnvironment.GetParameterSetCount(FALSE);

      _nState                       := INIT_INFO_SERVER_ITF;              // check environment for info servers

    INIT_INFO_SERVER_ITF:           // HAUD 2024 03 14: TODO - implement procedure for getting Info server data to local datafields
      IF _fbEnvironment.GetInfoServerCount(TRUE)
      THEN
        // how many of you are there?
        _nInfoServerCount           := _fbEnvironment.P_InfoServerCount;

        IF (_nInfoServerCount > 0)
        THEN
          // go do something with the data
          //
          //  TODO - get station coordinates
          _eState                   := E_PROGRESS.PROGRESS_PREPARE; // TODO - implement InfoServer R/W
          _nState                   := INIT_CA_GROUP_OID;           // TODO - implement initialization states for info server procedure

          IF (_eMessageLevel = E_MessageType.eMessageVerbose)
          THEN
            _stMsg.eType            := E_MessageType.eMessageVerbose;
            _stMsg.eSubdevice       := e_Subdevice.Xpu_fbEnvironment;
            _stMsg.iErrorNumber     := 0;
            _stMsg.sText            := concat(TO_STRING(_eState), ': ');
            _stMsg.sText            := concat(_stMsg.sText, TO_STRING(_nState));
            f_MessageSet(_stMsg);
          END_IF

        ELSE
          // no info server present
          _eState                   := E_PROGRESS.PROGRESS_PREPARE;
          _nState                   := INIT_CA_GROUP_OID; // go check CA group

          IF (_eMessageLevel = E_MessageType.eMessageVerbose)
          THEN
            _stMsg.eType            := E_MessageType.eMessageVerbose;
            _stMsg.eSubdevice       := e_Subdevice.Xpu_fbEnvironment;
            _stMsg.iErrorNumber     := 0;
            _stMsg.sText            := concat(TO_STRING(_eState), ': ');
            _stMsg.sText            := concat(_stMsg.sText, TO_STRING(_nState));
            f_MessageSet(_stMsg);
          END_IF
        END_IF
      END_IF
    END_CASE
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_PREPARE:      // CA group initialization
    CASE _nState
    OF
    INIT_CA_GROUP_OID:              // get object IDs of all CA groups in environment
      IF _fbEnvironment.GetCaGroupOids(TRUE)
      THEN
        _Group_OTCID                := _fbEnvironment.P_CaGroupOids;  // copy all Ids to local
        _nState                     := INIT_CA_GROUP_GET_OID;

        IF (_eMessageLevel = E_MessageType.eMessageVerbose)
        THEN
          _stMsg.eType              := E_MessageType.eMessageVerbose;
          _stMsg.eSubdevice         := e_Subdevice.Xpu_fbEnvironment;
          _stMsg.iErrorNumber       := 0;
          _stMsg.sText              := concat(TO_STRING(_eState), ': ');
          _stMsg.sText              := concat(_stMsg.sText, TO_STRING(_nState));
          f_MessageSet(_stMsg);
        END_IF
      END_IF

    INIT_CA_GROUP_GET_OID:          // look for any CA group
      _fbEnvironment.GetCaGroupOids(FALSE);
      IF NOT (_Group_OTCID[1] <> 0)
      THEN
        // no group is configured in project --> error, go add/link CA Group in NC objects
        _eChk                       := E_XPU_CHECK.GROUP_NOT_CONFIGURED;
        _eState                     := E_PROGRESS.PROGRESS_ERROR;

        _stMsg.eType                := E_MessageType.eMessageError;
        _stMsg.eSubdevice           := e_Subdevice.Xpu_fbEnvironment;
        _stMsg.iErrorNumber         := 0;
        _stMsg.sText                := concat(TO_STRING(_eState), ': ');
        _stMsg.sText                := concat(_stMsg.sText, TO_STRING(_nState));
        f_MessageSet(_stMsg);
      ELSE
        _nState                     := INIT_CA_GROUP_CHECK_OID; // get matching CA group

        IF (_eMessageLevel = E_MessageType.eMessageVerbose)
        THEN
          _stMsg.eType              := E_MessageType.eMessageVerbose;
          _stMsg.eSubdevice         := e_Subdevice.Xpu_fbEnvironment;
          _stMsg.iErrorNumber       := 0;
          _stMsg.sText              := concat(TO_STRING(_eState), ': ');
          _stMsg.sText              := concat(_stMsg.sText, TO_STRING(_nState));
          f_MessageSet(_stMsg);
        END_IF
      END_IF

    INIT_CA_GROUP_CHECK_OID:        // ID must be found, there is one chance
      _eChk                         := E_XPU_CHECK.GROUP_OID_MISMATCH;
      _eState                       := E_PROGRESS.PROGRESS_ERROR;

      FOR _ix := 1 TO MAX_GROUP
      DO
        IF (_fbEnvironment.P_CaGroupOids[_ix] <> 0)
        THEN
          // check whether the input from cyclic interface can be found in XPU data
          IF (_fbEnvironment.P_CaGroupOids[_ix] = _CaGroupOID)  // _CaGroupOID must be linked from NC Objects into PLC (GROUP_REF)
          THEN

            _eState                 := E_PROGRESS.PROGRESS_PREPARE; // stay here
            _eChk                   := E_XPU_CHECK.INIT_CHECK;

            _nGroup                 := _ix;

            _fbEnvironment.GetCaGroupOids(FALSE);
            _nState                 := INIT_CA_GROUP_COM; // only continue if match was found
 
            IF (_eMessageLevel = E_MessageType.eMessageVerbose)
            THEN
              _stMsg.eType          := E_MessageType.eMessageVerbose;
              _stMsg.eSubdevice     := e_Subdevice.Xpu_fbEnvironment;
              _stMsg.iErrorNumber   := _nGroup;
              _stMsg.sText          := concat(TO_STRING(_eState), ': ');
              _stMsg.sText          := concat(_stMsg.sText, TO_STRING(_nState));
              f_MessageSet(_stMsg);
            END_IF
            EXIT;
          END_IF
        END_IF
      END_FOR

      IF (_eState = E_PROGRESS.PROGRESS_ERROR)
      THEN
        _stMsg.eType                := E_MessageType.eMessageError;
        _stMsg.eSubdevice           := e_Subdevice.Xpu_fbEnvironment;
        _stMsg.iErrorNumber         := _nGroup;
        _stMsg.sText                := concat(TO_STRING(_eState), ': ');
        _stMsg.sText                := concat(_stMsg.sText, TO_STRING(_nState));
        f_MessageSet(_stMsg);
      END_IF


    INIT_CA_GROUP_COM:              // connect to CaGroup function block in environment
      IF (_fbMc2CaGroup.GetComObject(_fbEnvironment.P_CaGroupOids[_nGroup]))
      THEN
        _fbEnvironment.GetParameterSetCount(FALSE);

        _nState                     := INIT_PARAMETERSET_COUNT;

        IF (_eMessageLevel = E_MessageType.eMessageVerbose)
        THEN
          _stMsg.eType              := E_MessageType.eMessageVerbose;
          _stMsg.eSubdevice         := e_Subdevice.Xpu_fbEnvironment;
          _stMsg.iErrorNumber       := _nGroup;
          _stMsg.sText              := concat(TO_STRING(_eState), ': ');
          _stMsg.sText              := concat(_stMsg.sText, TO_STRING(_nState));
          f_MessageSet(_stMsg);
        END_IF
      END_IF

    INIT_PARAMETERSET_COUNT:
      IF _fbEnvironment.GetParameterSetCount(TRUE)
      THEN
        _fbEnvironment.GetParameterSetOids(FALSE);
        _nParaSetIdx                :=
        _nParameterSetCount         := _fbEnvironment.P_ParameterSetCount;
        _nState                     := INIT_PARAMETERSET_OID; 

        IF (_eMessageLevel = E_MessageType.eMessageVerbose)
        THEN
          _stMsg.eType              := E_MessageType.eMessageVerbose;
          _stMsg.eSubdevice         := e_Subdevice.Xpu_fbEnvironment;
          _stMsg.iErrorNumber       := _nParameterSetCount;
          _stMsg.sText              := concat(TO_STRING(_eState), ': ');
          _stMsg.sText              := concat(_stMsg.sText, TO_STRING(_nState));
          f_MessageSet(_stMsg);
        END_IF
      END_IF

    INIT_PARAMETERSET_OID:
      IF (_nParameterSetCount = 0)
      THEN
        _eState                     := E_PROGRESS.PROGRESS_STARTUP;
        _nState                     := INIT_PROCESSING_UNIT_COM;

      ELSIF _fbEnvironment.GetParameterSetOids(TRUE)
      THEN
        _fbEnvironment.GetParameterSetCount(FALSE);
        _ParameterSet_OTCID         := _fbEnvironment.P_ParameterSetOids;
        _nState                     := INIT_PARAMETERSET_COM;
      END_IF

    INIT_PARAMETERSET_COM:
      IF (_nParaSetIdx > 0)
      THEN
        IF _fbParameterSet[_nParaSetIdx].GetComObject(_ParameterSet_OTCID[_nParaSetIdx])
        THEN
          _nState                   := INIT_PARAMETERSET_COM_NEXT;

          IF (_eMessageLevel = E_MessageType.eMessageVerbose)
          THEN
            _stMsg.eType            := E_MessageType.eMessageVerbose;
            _stMsg.eSubdevice       := e_Subdevice.Xpu_fbParameterSet;
            _stMsg.iErrorNumber     := _ParameterSet_OTCID[_nParaSetIdx];
            _stMsg.sText            := concat(TO_STRING(_eState), ': ');
            _stMsg.sText            := concat(_stMsg.sText, TO_STRING(_nState));
            f_MessageSet(_stMsg);
          END_IF
        END_IF
      ELSE
        _fbEnvironment.GetParameterSetOids(FALSE);
        _eState                     := E_PROGRESS.PROGRESS_STARTUP;
        _nState                     := INIT_PROCESSING_UNIT_COM;
      END_IF
        

    INIT_PARAMETERSET_COM_NEXT:
      _nParaSetIdx                  := _nParaSetIdx - 1;
      _nState                       := INIT_PARAMETERSET_COM; 
    END_CASE
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_STARTUP:      // ProcessingUnit initialization
  CASE _nState
  OF
  INIT_PROCESSING_UNIT_COM:         // connect local function block with TcCom object
    IF (_fbProcessingUnit.GetComObject(_Xpu_OTCID))
    THEN
      // local function block can now be used to get information
      // get operation mode first
      _XpuOperationMode             := _fbProcessingUnit.GetOperationMode();
      _nState                       := INIT_PROCESSING_UNIT_PART_COUNT;

      IF (_eMessageLevel = E_MessageType.eMessageVerbose)
      THEN
        _stMsg.eType                := E_MessageType.eMessageVerbose;
        _stMsg.eSubdevice           := e_Subdevice.Xpu_fbProcessingUnit;
        _stMsg.iErrorNumber         := _nGroup;
        _stMsg.sText                := concat(TO_STRING(_eState), ': ');
        _stMsg.sText                := concat(_stMsg.sText, TO_STRING(_nState));
        f_MessageSet(_stMsg);
      END_IF
    END_IF

  INIT_PROCESSING_UNIT_PART_COUNT:  // get parts in ProcessingUnit
    _nPartCount                     := TO_UINT(_fbProcessingUnit.GetPartCount());

    IF (_nPartCount > 0)            // one is enough
    THEN
      _nState                       := INIT_PROCESSING_UNIT_PART_OID;

      IF (_eMessageLevel = E_MessageType.eMessageVerbose)
      THEN
        _stMsg.eType                := E_MessageType.eMessageVerbose;
        _stMsg.eSubdevice           := e_Subdevice.Xpu_fbProcessingUnit;
        _stMsg.iErrorNumber         := _nGroup;
        _stMsg.sText                := concat(TO_STRING(_eState), ': ');
        _stMsg.sText                := concat(_stMsg.sText, TO_STRING(_nState));
        f_MessageSet(_stMsg);
      END_IF
    END_IF

  INIT_PROCESSING_UNIT_PART_OID:    // get object IDs of all parts in ProcessingUNit
    IF _fbProcessingUnit.GetPartOids()
    THEN
      _Part_OTCID                   := _fbProcessingUnit.P_PartOids;  // copy IDs to local
      _nState                       := INIT_PROCESSING_UNIT_TRACK_COUNT;

      IF (_eMessageLevel = E_MessageType.eMessageVerbose)
      THEN
        _stMsg.eType                := E_MessageType.eMessageVerbose;
        _stMsg.eSubdevice           := e_Subdevice.Xpu_fbProcessingUnit;
        _stMsg.iErrorNumber         := _nGroup;
        _stMsg.sText                := concat(TO_STRING(_eState), ': ');
        _stMsg.sText                := concat(_stMsg.sText, TO_STRING(_nState));
        f_MessageSet(_stMsg);
      END_IF
    END_IF
  END_CASE
  CASE _nState
  OF
  INIT_PROCESSING_UNIT_TRACK_COUNT: // how many tracks does this ProcessingUnit have?
    _nTrackCount                    := TO_UINT(_fbProcessingUnit.GetTrackCount());
  
    IF (_nTrackCount > 0)           // one is enough
    THEN
      _nState                       := INIT_PROCESSING_UNIT_TRACK_OID;

      IF (_eMessageLevel = E_MessageType.eMessageVerbose)
      THEN
        _stMsg.eType                := E_MessageType.eMessageVerbose;
        _stMsg.eSubdevice           := e_Subdevice.Xpu_fbProcessingUnit;
        _stMsg.iErrorNumber         := _nTrackCount;
        _stMsg.sText                := concat(TO_STRING(_eState), ': ');
        _stMsg.sText                := concat(_stMsg.sText, TO_STRING(_nState));
        f_MessageSet(_stMsg);
      END_IF
    END_IF

  INIT_PROCESSING_UNIT_TRACK_OID:   // get object IDs of all tracks in ProcessingUnit
    IF _fbProcessingUnit.GetTrackOids()
    THEN
      _Track_OTCID                  := _fbProcessingUnit.P_TrackOids; // copy IDs to local
      _nState                       := INIT_PROCESSING_UNIT_MOVER_COUNT;

      IF (_eMessageLevel = E_MessageType.eMessageVerbose)
      THEN
        _stMsg.eType                := E_MessageType.eMessageVerbose;
        _stMsg.eSubdevice           := e_Subdevice.Xpu_fbProcessingUnit;
        _stMsg.iErrorNumber         := 0;
        _stMsg.sText                := concat(TO_STRING(_eState), ': ');
        _stMsg.sText                := concat(_stMsg.sText, TO_STRING(_nState));
        f_MessageSet(_stMsg);
      END_IF
    END_IF
  END_CASE
  CASE _nState
  OF
  INIT_PROCESSING_UNIT_MOVER_COUNT: // how many of you are there?
    _nMoverCount                    := TO_UINT(_fbProcessingUnit.GetMoverCount());
  
    IF (_nMoverCount > 0)           // one is enough
    THEN
      _nState                       := INIT_PROCESSING_UNIT_MOVER_OID;

      IF (_eMessageLevel = E_MessageType.eMessageVerbose)
      THEN
        _stMsg.eType                := E_MessageType.eMessageVerbose;
        _stMsg.eSubdevice           := e_Subdevice.Xpu_fbProcessingUnit;
        _stMsg.iErrorNumber         := _nMoverCount;
        _stMsg.sText                := concat(TO_STRING(_eState), ': ');
        _stMsg.sText                := concat(_stMsg.sText, TO_STRING(_nState));
        f_MessageSet(_stMsg);
      END_IF
    END_IF

  INIT_PROCESSING_UNIT_MOVER_OID:   // get object IDs of all mover in ProcessingUnit
    IF _fbProcessingUnit.GetMoverOids()
    THEN
      _Mov_OTCID                    := _fbProcessingUnit.P_MoverOids; // copy IDs to local
      _nState                       := INIT_PROCESSING_UNIT_TASK_COUNT;
      _eChk                         := E_XPU_CHECK.MOVER_COUNT;

      IF (_eMessageLevel = E_MessageType.eMessageVerbose)
      THEN
        _stMsg.eType                := E_MessageType.eMessageVerbose;
        _stMsg.eSubdevice           := e_Subdevice.Xpu_fbProcessingUnit;
        _stMsg.iErrorNumber         := 0;
        _stMsg.sText                := concat(TO_STRING(_eState), ': ');
        _stMsg.sText                := concat(_stMsg.sText, TO_STRING(_nState));
        f_MessageSet(_stMsg);
      END_IF
    END_IF
  END_CASE
  CASE _nState
  OF
  INIT_PROCESSING_UNIT_TASK_COUNT:  // how many?
    _nTaskCount                     := TO_UINT(_fbProcessingUnit.GetTaskCount());
  
    IF (_nTaskCount > 0)
    THEN
      _nState                       := INIT_PROCESSING_UNIT_TASK_OID;

      IF (_eMessageLevel = E_MessageType.eMessageVerbose)
      THEN
        _stMsg.eType                := E_MessageType.eMessageVerbose;
        _stMsg.eSubdevice           := e_Subdevice.Xpu_fbProcessingUnit;
        _stMsg.iErrorNumber         := _nTaskCount;
        _stMsg.sText                := concat(TO_STRING(_eState), ': ');
        _stMsg.sText                := concat(_stMsg.sText, TO_STRING(_nState));
        f_MessageSet(_stMsg);
      END_IF
    END_IF    

  INIT_PROCESSING_UNIT_TASK_OID:    // get their names!
    IF _fbProcessingUnit.GetTaskOids()
    THEN
      _eState                       := E_PROGRESS.PROGRESS_CHECK;

      IF (_eMessageLevel = E_MessageType.eMessageVerbose)
      THEN
        _stMsg.eType                := E_MessageType.eMessageVerbose;
        _stMsg.eSubdevice           := e_Subdevice.Xpu_fbXpuTrack;
        _stMsg.iErrorNumber         := _nTrack;
        _stMsg.sText                := concat(TO_STRING(_eState), ': ');
        _stMsg.sText                := concat(_stMsg.sText, TO_STRING(_nState));
        f_MessageSet(_stMsg);
      END_IF
    END_IF
  END_CASE
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_CHECK:        // reserve
    _eState                         := E_PROGRESS.PROGRESS_OCCUPIED;
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_OCCUPIED:     // reserve
    _eState                         := E_PROGRESS.PROGRESS_WORKING;
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_WORKING:      // reserve
    _eState                         := E_PROGRESS.PROGRESS_STILL_WORKING;
    _nState                         := INIT_TRACK_COM;
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_STILL_WORKING:// connect local instances of track, part, modules and mover
    CASE _nState
    OF
    INIT_TRACK_COM:                 // get TcCom Object for my track (_nTrack is fixed to 1 in this example; multi track is not intended)
      IF _fbXpuTrack.GetComObject(_Track_OTCID[_nTrack])
      THEN
        _nState                     := INIT_PART_COM;

        IF (_eMessageLevel = E_MessageType.eMessageVerbose)
        THEN
          _stMsg.eType              := E_MessageType.eMessageVerbose;
          _stMsg.eSubdevice         := e_Subdevice.Xpu_fbXpuTrack;
          _stMsg.iErrorNumber       := _nTrack;
          _stMsg.sText              := concat(TO_STRING(_eState), ': ');
          _stMsg.sText              := concat(_stMsg.sText, TO_STRING(_nState));
          f_MessageSet(_stMsg);
        END_IF
      END_IF
    //-----------------------------------------------------------------------------------------------
    //-----------------------------------------------------------------------------------------------
    INIT_PART_COM:                  // get TcCom object for my part (also fixed to 1 part per ProcessingUnit; multi part is not intended)
      IF _fbXpuPart.GetComObject(_Part_OTCID[1])
      THEN
        _nState                     := INIT_PART_MODULE_COUNT;

        IF (_eMessageLevel = E_MessageType.eMessageVerbose)
        THEN
          _stMsg.eType              := E_MessageType.eMessageVerbose;
          _stMsg.eSubdevice         := e_Subdevice.Xpu_fbXpuPart;
          _stMsg.iErrorNumber       := 1;
          _stMsg.sText              := concat(TO_STRING(_eState), ': ');
          _stMsg.sText              := concat(_stMsg.sText, TO_STRING(_nState));
          f_MessageSet(_stMsg);
        END_IF
      END_IF
    //-----------------------------------------------------------------------------------------------
    //-----------------------------------------------------------------------------------------------
    INIT_PART_MODULE_COUNT:         // get count of motor modules
      _nModuleCount                 := TO_UINT(_fbXpuPart.GetModuleCount());
    
      IF (_nModuleCount > 0)        // one is enough
      THEN
        _nState                     := INIT_PART_MODULE_OID;

        IF (_eMessageLevel = E_MessageType.eMessageVerbose)
        THEN
          _stMsg.eType              := E_MessageType.eMessageVerbose;
          _stMsg.eSubdevice         := e_Subdevice.Xpu_fbXpuPart;
          _stMsg.iErrorNumber       := _nModuleCount;
          _stMsg.sText              := concat(TO_STRING(_eState), ': ');
          _stMsg.sText              := concat(_stMsg.sText, TO_STRING(_nState));
          f_MessageSet(_stMsg);
        END_IF
      END_IF
    //-----------------------------------------------------------------------------------------------
    //-----------------------------------------------------------------------------------------------
    INIT_PART_MODULE_OID:           // get object IDs of all motor modules in part
      IF _fbXpuPart.GetModuleOids()
      THEN
        _Module_OTCID               := _fbXpuPart.P_ModuleOids; // copy IDs to local
    
        _nState                     := INIT_PART_MODULE_COM;    // go, connect module IDs
        _nModuleIdx               := 1;                       // start at first module

        IF (_eMessageLevel = E_MessageType.eMessageVerbose)
        THEN
          _stMsg.eType              := E_MessageType.eMessageVerbose;
          _stMsg.eSubdevice         := e_Subdevice.Xpu_fbPartModules;
          _stMsg.iErrorNumber       := _nModuleIdx;
          _stMsg.sText              := concat(TO_STRING(_eState), ': ');
          _stMsg.sText              := concat(_stMsg.sText, TO_STRING(_nState));
          f_MessageSet(_stMsg);
        END_IF
      END_IF
    //-----------------------------------------------------------------------------------------------
    //-----------------------------------------------------------------------------------------------
    INIT_PART_MODULE_COM:           // connect to TcCom object
      IF _fbPartModules[_nModuleIdx].GetComObject(_Module_OTCID[_nModuleIdx])
      THEN
        _nState                     := INIT_PART_MODULE_COM_NEXT;
      END_IF
    //-----------------------------------------------------------------------------------------------
    INIT_PART_MODULE_COM_NEXT:
      IF (_nModuleIdx > _nModuleCount-1)
      THEN
        // all data from modules collected, continue to mover data
        _nState                     := INIT_MOVER_COM;          // go, connect mover IDs 
        _nMoverIdx               :=  1;                      // start at first mover

        IF (_eMessageLevel = E_MessageType.eMessageVerbose)
        THEN
          _stMsg.eType              := E_MessageType.eMessageVerbose;
          _stMsg.eSubdevice         := e_Subdevice.Xpu_fbMoverXpu;
          _stMsg.iErrorNumber       := _nMoverIdx;
          _stMsg.sText              := concat(TO_STRING(_eState), ': ');
          _stMsg.sText              := concat(_stMsg.sText, TO_STRING(_nState));
          f_MessageSet(_stMsg);
        END_IF
      ELSE
        // still data to fetch, increment search index, go back to fetching data
        _nState                     := INIT_PART_MODULE_COM;    // go back for next
        _nModuleIdx               := _nModuleIdx + 1;       // next

        IF (_eMessageLevel = E_MessageType.eMessageVerbose)
        THEN
          _stMsg.eType              := E_MessageType.eMessageVerbose;
          _stMsg.eSubdevice         := e_Subdevice.Xpu_fbPartModules;
          _stMsg.iErrorNumber       := _nModuleIdx;
          _stMsg.sText              := concat(TO_STRING(_eState), ': ');
          _stMsg.sText              := concat(_stMsg.sText, TO_STRING(_nState));
          f_MessageSet(_stMsg);
        END_IF
      END_IF
    //-----------------------------------------------------------------------------------------------
    //-----------------------------------------------------------------------------------------------
    INIT_MOVER_COM:                 // connect to TcCom object
      IF _fbMoverXpu[_nMoverIdx].GetComObject(_Mov_OTCID[_nMoverIdx])
      THEN
        _nState                     := INIT_MOVER_COM_NEXT;
      END_IF
    //-----------------------------------------------------------------------------------------------
    INIT_MOVER_COM_NEXT:
      IF (_nMoverIdx > _nMoverCount-1)
      THEN
        // all done
        _nState                     := INIT_DATA_GET;           // get important data from ProcessingUnit etc...

        IF (_eMessageLevel = E_MessageType.eMessageVerbose)
        THEN
          _stMsg.eType              := E_MessageType.eMessageVerbose;
          _stMsg.eSubdevice         := e_Subdevice.Xpu_fbProcessingUnit;
          _stMsg.iErrorNumber       := 0;
          _stMsg.sText              := concat(TO_STRING(_eState), ': ');
          _stMsg.sText              := concat(_stMsg.sText, TO_STRING(_nState));
          f_MessageSet(_stMsg);
        END_IF
      ELSE
        // more data to fetch, increment search index and go back
        _nState                     := INIT_MOVER_COM;          // go back for next
        _nMoverIdx               := _nMoverIdx + 1;       // next

        IF (_eMessageLevel = E_MessageType.eMessageVerbose)
        THEN
          _stMsg.eType              := E_MessageType.eMessageVerbose;
          _stMsg.eSubdevice         := e_Subdevice.Xpu_fbMoverXpu;
          _stMsg.iErrorNumber       := _nMoverIdx;
          _stMsg.sText              := concat(TO_STRING(_eState), ': ');
          _stMsg.sText              := concat(_stMsg.sText, TO_STRING(_nState));
          f_MessageSet(_stMsg);
        END_IF
      END_IF
    //-----------------------------------------------------------------------------------------------
    //-----------------------------------------------------------------------------------------------
    INIT_DATA_GET:                  // get data, add more if your application requires it
      // start counter
      _eDataGetCount                := _eDataGetCount + 1;
      IF (_eDataGetCount MOD E_PROGRESS.PROGRESS_ERROR = 0)
      THEN
        _eState                     := E_PROGRESS.PROGRESS_ERROR;
        _eCheck                     := E_XPU_CHECK.PROCESSING_UNIT_GET_DATA_EXCEED;

        _stMsg.eType                := E_MessageType.eMessageError;
        _stMsg.eSubdevice           := e_Subdevice.Xpu_fbProcessingUnit;
        _stMsg.iErrorNumber         := _nMoverIdx;
        _stMsg.sText                := concat(TO_STRING(_nState), ': ');
        _stMsg.sText                := concat(_stMsg.sText, TO_STRING(_eCheck));
        f_MessageSet(_stMsg);
      END_IF
      // wait for plausible data from members
      IF (_bAllPositionsValid) AND
         (_nLengthXpu > 0)
      THEN
        _nState                     := INIT_DATA_CHECK;
        _eChk                       := E_XPU_CHECK.PROCESSING_UNIT_POSITIONS_VALID;
        IF (_eMessageLevel > E_MessageType.eMessageError)
        THEN
          _stMsg.eType              := E_MessageType.eMessageInfo;
          _stMsg.eSubdevice         := e_Subdevice.Xpu_fbProcessingUnit;
          _stMsg.iErrorNumber       := 0;
          _stMsg.sText              := concat(TO_STRING(_nState), ': ');
          _stMsg.sText              := concat(_stMsg.sText, TO_STRING(E_XPU_CHECK.PROCESSING_UNIT_POSITIONS_VALID));
          f_MessageSet(_stMsg);
        END_IF
      END_IF

      _bAllPositionsValid           := _fbProcessingUnit.GetAreAllPositionsValid();
      _nDetectedMoverCount          := TO_UINT(_fbProcessingUnit.GetDetectedMoverCount());
      _nExpectedMoverCount          := TO_UINT(_fbProcessingUnit.GetExpectedMoverCount());

      _XpuOperationMode             := _fbProcessingUnit.GetOperationMode();
      _MoverIdDetectionMode         := _fbProcessingUnit.GetMoverIdDetectionMode();

      _RailLengthXpu                := _fbXpuPart.GetLength();
      _RailLengthGroup              := _fbMc2CaGroup.GetRailLength();
      _nLengthXpu                   := TO_UINT(_RailLengthXpu);
      _nLengthGroup                 := TO_UINT(_RailLengthGroup);

    //-----------------------------------------------------------------------------------------------
    INIT_DATA_CHECK:                // plausibility checks
      IF NOT (_nDetectedMoverCount = _nExpectedMoverCount)
      THEN
        _eChk                       := E_XPU_CHECK.MOVER_COUNT_NOT_EQUAL; // the thing that must not be
        _eState                     := E_PROGRESS.PROGRESS_ERROR;

        _stMsg.eType                := E_MessageType.eMessageError;
        _stMsg.eSubdevice           := e_Subdevice.Xpu_fbProcessingUnit;
        _stMsg.iErrorNumber         := _nMoverIdx;
        _stMsg.sText                := concat(TO_STRING(_nState), ': ');
        _stMsg.sText                := concat(_stMsg.sText, TO_STRING(E_XPU_CHECK.MOVER_COUNT_NOT_EQUAL));
        f_MessageSet(_stMsg);

      ELSIF NOT (_nLengthXpu = _nLengthGroup)
      THEN
        _eChk                       := E_XPU_CHECK.RAIL_LENGTH_COMPARE;   // yet another thing that must not be
        _eState                     := E_PROGRESS.PROGRESS_ERROR;

        _stMsg.eType                := E_MessageType.eMessageError;
        _stMsg.eSubdevice           := e_Subdevice.Xpu_fbProcessingUnit;
        _stMsg.iErrorNumber         := _nMoverIdx;
        _stMsg.sText                := concat(TO_STRING(_nState), ': ');
        _stMsg.sText                := concat(_stMsg.sText, TO_STRING(E_XPU_CHECK.RAIL_LENGTH_COMPARE));
        f_MessageSet(_stMsg);
      ELSE
        _nState                     := INIT_DONE;                         // write success
      END_IF
    //-----------------------------------------------------------------------------------------------
    INIT_DONE:
      _eState                       := E_PROGRESS.PROGRESS_DONE;          // method is done
      IF (_eMessageLevel > E_MessageType.eMessageError)
      THEN
        _stMsg.eType                := E_MessageType.eMessageInfo;
        _stMsg.eSubdevice           := e_Subdevice.Xpu_fbProcessingUnit;
        _stMsg.iErrorNumber         := 0;
        _stMsg.sText                := concat(TO_STRING(_nState), ': ');
        _stMsg.sText                := concat(_stMsg.sText, TO_STRING(_eState));
        f_MessageSet(_stMsg);
      END_IF
    END_CASE
END_CASE

_eReslt                             := _eState;
XpuInit                             := _nState;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="XpuInstance" Id="{08dc0102-1faf-4d4c-b748-d2d8fd7d8de9}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY XpuInstance : uint]]></Declaration>
      <Set Name="Set" Id="{c890a96f-496a-47e4-975d-16705e8709f3}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[//
// Who am I?
// Environment may have more than one ProcessingUnit,
// information required for connecting to the correct instance of ProcessingUnit
_nXpu := XpuInstance;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="XpuModuleInfoData" Id="{b5f0e166-96f9-4ee9-a02e-874a8d131456}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY XpuModuleInfoData : REFERENCE TO ARRAY[1..MAX_MODULE] OF Tc3_XTS_Utility.ST_InfoDataView]]></Declaration>
      <Set Name="Set" Id="{4fb9c7dc-f971-4e2f-a37f-d3c844f79422}">
        <Declaration><![CDATA[
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[
_ModuleInfoData REF= XpuModuleInfoData;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="XpuOtcid" Id="{cbe96801-fe14-4003-8378-097c4e8826b3}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY XpuOtcid : OTCID]]></Declaration>
      <Get Name="Get" Id="{3b69688e-e9fb-4717-ba5d-2eb1622e86e9}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[XpuOtcid := _Xpu_OTCID;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="fb_Xpu">
      <LineId Id="53" Count="0" />
    </LineIds>
    <LineIds Name="fb_Xpu.AllModulesDcLink.Get">
      <LineId Id="20" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="21" Count="1" />
      <LineId Id="2" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
    </LineIds>
    <LineIds Name="fb_Xpu.CaGroupOID.Set">
      <LineId Id="8" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Xpu.Cycle">
      <LineId Id="62" Count="1" />
      <LineId Id="124" Count="1" />
      <LineId Id="70" Count="0" />
      <LineId Id="64" Count="2" />
      <LineId Id="13" Count="1" />
      <LineId Id="7" Count="1" />
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="67" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="108" Count="1" />
      <LineId Id="23" Count="10" />
      <LineId Id="71" Count="0" />
      <LineId Id="175" Count="1" />
      <LineId Id="173" Count="1" />
      <LineId Id="177" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="168" Count="1" />
      <LineId Id="171" Count="1" />
      <LineId Id="220" Count="6" />
      <LineId Id="167" Count="0" />
      <LineId Id="156" Count="3" />
      <LineId Id="227" Count="6" />
      <LineId Id="160" Count="4" />
      <LineId Id="155" Count="0" />
      <LineId Id="235" Count="5" />
      <LineId Id="234" Count="0" />
      <LineId Id="85" Count="1" />
      <LineId Id="166" Count="0" />
      <LineId Id="87" Count="1" />
      <LineId Id="242" Count="6" />
      <LineId Id="89" Count="5" />
      <LineId Id="249" Count="6" />
      <LineId Id="95" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="196" Count="0" />
      <LineId Id="257" Count="5" />
      <LineId Id="195" Count="0" />
      <LineId Id="199" Count="5" />
      <LineId Id="197" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Xpu.GetEnvironment">
      <LineId Id="10" Count="1" />
      <LineId Id="5" Count="1" />
    </LineIds>
    <LineIds Name="fb_Xpu.GetParameterSet">
      <LineId Id="13" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="3" />
      <LineId Id="12" Count="0" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="fb_Xpu.GetProcessingUnit">
      <LineId Id="7" Count="1" />
      <LineId Id="5" Count="1" />
    </LineIds>
    <LineIds Name="fb_Xpu.IdDetectionModeToString">
      <LineId Id="24" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="22" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="fb_Xpu.MessageLevel.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="fb_Xpu.ModuleInfoData">
      <LineId Id="391" Count="0" />
      <LineId Id="371" Count="0" />
      <LineId Id="370" Count="0" />
      <LineId Id="392" Count="0" />
      <LineId Id="268" Count="0" />
      <LineId Id="387" Count="2" />
      <LineId Id="269" Count="2" />
      <LineId Id="358" Count="0" />
      <LineId Id="272" Count="2" />
      <LineId Id="384" Count="2" />
      <LineId Id="390" Count="0" />
      <LineId Id="275" Count="45" />
      <LineId Id="354" Count="0" />
      <LineId Id="321" Count="20" />
      <LineId Id="357" Count="0" />
      <LineId Id="342" Count="5" />
      <LineId Id="356" Count="0" />
      <LineId Id="349" Count="4" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Xpu.MoverPositionAssignementToString">
      <LineId Id="21" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="fb_Xpu.OpModeToString">
      <LineId Id="22" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="fb_Xpu.RailLength.Get">
      <LineId Id="5" Count="1" />
      <LineId Id="2" Count="0" />
      <LineId Id="7" Count="3" />
    </LineIds>
    <LineIds Name="fb_Xpu.XpuInfo.Get">
      <LineId Id="6" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="10" Count="1" />
      <LineId Id="22" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="26" Count="1" />
      <LineId Id="7" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Xpu.XpuInit">
      <LineId Id="2582" Count="309" />
      <LineId Id="3388" Count="4" />
      <LineId Id="2892" Count="476" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Xpu.XpuInstance.Set">
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Xpu.XpuModuleInfoData.Set">
      <LineId Id="7" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="fb_Xpu.XpuOtcid.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>