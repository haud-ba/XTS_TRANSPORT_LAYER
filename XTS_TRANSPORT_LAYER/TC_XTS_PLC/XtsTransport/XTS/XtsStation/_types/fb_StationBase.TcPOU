<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.13">
  <POU Name="fb_StationBase" Id="{0b8dff22-a149-4a45-afd0-c2215976fd93}" SpecialFunc="None">
    <Declaration><![CDATA[//---------------------------------------------------------------------------------------------------------------
//
//  HAUD 2025.08.20
//
//  - XTS_TRANSPORT_LAYER
//
//  fb_StationBase
//  - abstract base class for XtsStation and XtsStationGearIn to extend
//
//---------------------------------------------------------------------------------------------------------------
// This SOFTWARE is provided as an Exemple by THE PROVIDER "as is" and "with all faults." THE PROVIDER makes no 
// representations or warranties of any kind concerning the safety, suitability, lack of viruses, inaccuracies, 
// typographical errors, or other harmful components of this SOFTWARE. There are inherent dangers in the use of 
// any software, and you are solely responsible for determining whether this SOFTWARE is compatible with your 
// equipment and other software installed on your equipment. You are also solely responsible for the protection 
// of your equipment and backup of your data, and THE PROVIDER will not be liable for any damages you may suffer 
// in connection with using, modifying, or distributing this SOFTWARE.
//---------------------------------------------------------------------------------------------------------------
FUNCTION_BLOCK ABSTRACT fb_StationBase  IMPLEMENTS I_XtsTransport_Station
VAR
  _nStationId                 : UINT;         // why is Gamora?
  _sState                     : STRING(255);  // additional output for Check()
  _eInitList                  : E_PROGRESS;   // linked list initialization progress

  _eFatalError                : E_STATION_STATE;

  // pointer to all stations
  _stCtrl                     : REFERENCE TO ARRAY[1..MAX_STATION]  OF ST_STATION_CTRL;
  _stState                    : REFERENCE TO ARRAY[1..MAX_STATION]  OF ST_STATION_STATE;

  // local copy of command
  _eCmd,
  _eCmdOld                    : E_STATION_CTRL;

  _ItfStation                 : REFERENCE TO ARRAY[1..MAX_STATION]  OF I_Station_LinkedList;  // access to all stations lists
  _ItfMover                   : REFERENCE TO ARRAY[1..MAX_MOVER]    OF I_XtsTransport_Mover;  // access to mover methods

  // station related data
  _rMoverOffset               : REFERENCE TO ARRAY[1..MAX_STATION]  OF T_NEST_OFFSET;         // static offsets for station
  _stParameter                : REFERENCE TO ARRAY[1..MAX_STATION]  OF ST_STATION_PARAMETER;  // station parameter (where, how fast, how many stops)

  // mover axis ref for info
  _Mover                      : REFERENCE TO ARRAY[1..MAX_MOVER]    OF AXIS_REF;              // read from AXIS_REF

  // linked list result struct
  _stListEnter,
  _stListTarget,
  _stListDelete               : ST_STATION_LIST_RESULT;   // struct with result and ticket data

  _stMoverDataSend,
  _stMoverData                : ST_STATION_MOVER_DATA;    // mover ticket data

  _stInfeed,
  _stOutfeed                  : ST_MOVE_DATA;             // position and dynamic constraints of movement

  // work vars
  _Result                     : E_PROGRESS;
  _eStateProgress             : E_PROGRESS;

  _nNest,
  _nMoverDetected,
  _ix                         : UINT;

  _rModActPosFetch            : LREAL;
  _bMatchMessageLevel         : BOOL := TRUE;   // TRUE --> Mover in Station commands have equal message level as station

  _stMsg                      : ST_Message;
  _eMessageLevel              : E_MessageType;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="methods" Id="{70829820-e56f-4eb2-b22e-8724574916a3}" />
    <Folder Name="properties" Id="{a4e8a5c0-089d-4736-a684-5b0f4b556517}" />
    <Method Name="BitDel" Id="{0be77e49-7392-4c3c-a864-49cf6caf7308}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD PROTECTED BitDel : WORD
VAR_INPUT
  inVal   : WORD;
  bitNo   : DINT;
END_VAR
VAR
  wConst : WORD := 1;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ( inVal AND SHL( wConst, TO_SINT(bitNo) MOD 16 ) ) > 0 THEN
  BitDel := inVal XOR (SHL( wConst,TO_SINT(bitNo) MOD 16 ));
ELSE
  BitDel := inVal;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="BitGet" Id="{d8ce1ab4-8924-4075-8c23-01c3fb056560}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD PROTECTED BitGet : BOOL
VAR_INPUT
  inVal   : WORD;
  bitNo   : DINT;
END_VAR
VAR
  wConst : WORD := 1;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ( inVal AND SHL( wConst,TO_SINT(bitNo) MOD 16 ) ) > 0
THEN
  BitGet := TRUE;
ELSE
  BitGet := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="BitSet" Id="{93ad0b2a-1657-4728-8c02-324c1b2a5b28}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD PROTECTED BitSet : WORD
VAR_INPUT
  inVal   : WORD;
  bitNo   : DINT;
END_VAR
VAR
  wConst  : WORD := 1;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[BitSet := inVal OR SHL( wConst,TO_SINT(bitNo) MOD 16 );]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check" Id="{e1ef4bef-70bf-4332-81e2-483f8385e36d}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD PROTECTED Check : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT (_nStationId > 0) OR
       (_nStationId > MAX_STATION)
THEN
  _sState                     := 'invalid nStationId';
  RETURN;
END_IF

IF NOT __ISVALIDREF(_stCtrl)
THEN
  _sState                     := '_stCtrl: missing pointer';
  RETURN;
END_IF

IF NOT __ISVALIDREF(_stState)
THEN
  _sState                     := '_stState: missing pointer';
  RETURN;
END_IF

IF NOT __ISVALIDREF(_ItfStation)
THEN
  _sState                     := '_ItfStation: missing interface';
  RETURN;
END_IF

IF NOT __ISVALIDREF(_ItfMover)
THEN
  _sState                     := '_ItfMover: missing interface';
  RETURN;
END_IF

IF NOT __ISVALIDREF(_rMoverOffset)
THEN
  _sState                     := '_rMoverOffset: missing pointer';
  RETURN;
END_IF

IF NOT __ISVALIDREF(_stParameter)
THEN
  _sState                     := '_stParameter: missing pointer';
  RETURN;
END_IF

IF NOT __ISVALIDREF(_Mover)
THEN
  _sState                     := '_Mover: missing pointer';
  RETURN;
END_IF


_sState                       := 'CHECK_DONE';
Check                         := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Ctrl" Id="{9c1d9a11-da8a-4ba2-8182-211097542342}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY Ctrl : reference to ARRAY[1..MAX_STATION] OF ST_STATION_CTRL]]></Declaration>
      <Set Name="Set" Id="{a26c4996-5a5d-42c0-896e-271173b65645}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_stCtrl ref= Ctrl;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Cycle" Id="{79caa820-ee26-4207-a9dd-9effc321454e}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD Cycle
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{a797a9db-4c0e-424f-8156-620d128fdf6c}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD Init : e_progress
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// check pointer and interface
IF NOT Check() THEN Init := e_progress.PROGRESS_ERROR; RETURN; END_IF

_stState[_nStationId].nMask       := 0;
_stState[_nStationId].nMoverId    := 0;

_eFatalError                      := E_STATION_STATE.STATION_ERROR_NULL;

_stState[_nStationId].eState      := E_STATION_STATE.STATION_INIT;
_sState                           := TO_STRING(_stState[_nStationId].eState);

IF _ItfStation[_nStationId].InitList()
THEN
  IF (_eMessageLevel = E_MessageType.eMessageVerbose)
  THEN
    _stMsg.eType                  := E_MessageType.eMessageVerbose;
    _stMsg.eSubdevice             := Stationstate;
    _stMsg.iErrorNumber           := 0;
    _stMsg.sText                  := concat('_ItfStation.InitList', ': ');
    _stMsg.sText                  := concat(_stMsg.sText, TO_STRING(E_PROGRESS.PROGRESS_DONE));
    //f_MessageSet(_stMsg);
  END_IF

  Init                            := E_PROGRESS.PROGRESS_DONE;

ELSE
    _stMsg.eType                  := E_MessageType.eMessageError;
    _stMsg.eSubdevice             := Stationstate;
    _stMsg.iErrorNumber           := 0;
    _stMsg.sText                  := concat('_ItfStation.InitList', ': ');
    _stMsg.sText                  := concat(_stMsg.sText, TO_STRING(E_PROGRESS.PROGRESS_ERROR));
    f_MessageSet(_stMsg);

  Init                            := e_progress.PROGRESS_ERROR;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Property Name="ItfMover" Id="{71937b15-91ca-4496-bdc4-b61532cb5c65}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY ItfMover : reference to ARRAY[1..MAX_MOVER] OF I_XtsTransport_Mover]]></Declaration>
      <Set Name="Set" Id="{45f74677-7c1c-4f34-bbf4-37f8ad9a6065}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_ItfMover ref= ItfMover;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="ItfStations" Id="{f5e91a53-1425-4cbb-bc1f-49b9b9b76cc7}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY ItfStations : reference to ARRAY[1..MAX_STATION] OF I_Station_LinkedList]]></Declaration>
      <Set Name="Set" Id="{2ec3c429-b30b-47c3-b5d8-ba92b6a18168}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_ItfStation ref= ItfStations;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="LogState" Id="{b099bac2-7924-43f7-b859-60dcfdd23a11}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD LogState
VAR_INPUT
  eType       : E_MessageType;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_stMsg.eType                := eType;
_stMsg.eSubdevice           := Stationstate;
_stMsg.iErrorNumber         := _stState[_nStationId].nMoverId;
_stMsg.sText                := TO_STRING(_stState[_nStationId].eState);
f_MessageSet(_stMsg);
]]></ST>
      </Implementation>
    </Method>
    <Property Name="MessageLevel" Id="{19cf9e40-f4f2-4a59-b342-a999c05b9027}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY MessageLevel : e_messagetype]]></Declaration>
      <Set Name="Set" Id="{06a23d40-fab1-4a04-8d5f-bd8a56548582}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_eMessageLevel := MessageLevel;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="MoveIn" Id="{c0f47d1b-64fd-4c72-a6ef-0fbc75011c35}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD MoveIn // prepares movement to PostStop[_nNest] in station
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// build WorkPos from parameter, static station data and information on mover
_stInfeed.rPos            := _stParameter[_nStationId].rPosWait
                          +  _stParameter[_nStationId].rPosStop[_nNest]
                          +  _stMoverData.rOffset
                          +  _rMoverOffset[_nStationId][_stMoverData.nMoverId][_nNest];

_stInfeed.rVelo           := _stParameter[_nStationId].rVelo;
_stInfeed.rAcc            := _stParameter[_nStationId].rAccDec;
_stInfeed.rJerk           := _stParameter[_nStationId].rJerk;
_stInfeed.rGap            := _stParameter[_nStationId].rGap;
_stInfeed.rDistance       := _stParameter[_nStationId].rReleaseDistance;
_stInfeed.rDelta          := TargetWindow;

// init method
_ItfMover[_stState[_nStationId].nMoverId].MoveToPosCa(FALSE, _stInfeed);

// clear substate
_eStateProgress           := E_PROGRESS.PROGRESS_INIT;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveOut" Id="{cc449cf5-a2c5-42b1-8e22-522047389dd2}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD MoveOut // prepares mover data for sending to target station]]></Declaration>
      <Implementation>
        <ST><![CDATA[// build data for sending mover to target station

// who am I sending?
_stMoverDataSend.nMoverId         := _stState[_nStationId].nMoverId;

// get optional information about nests to work
_stMoverDataSend.nMask            := _stCtrl[_nStationId].nMask;

// get optional offset
_stMoverDataSend.rOffset          := _stCtrl[_nStationId].rOffset;

// get target station
_stMoverDataSend.nTargetStation   := _stCtrl[_nStationId].nTargetStation;

// get position of target
_stOutfeed.rPos                   := _stParameter[_stMoverDataSend.nTargetStation].rPosWait;

IF (_stOutfeed.rPos - _Mover[_stMoverDataSend.nMoverId].NcToPlc.ModuloActPos < 0)
THEN
  // only forward, never back
  _stOutfeed.rPos             := _stOutfeed.rPos 
                              +  _ItfMover[_stMoverDataSend.nMoverId].RailLength;
END_IF

_stOutfeed.rVelo              := _stParameter[_nStationId].rVelo;
_stOutfeed.rAcc               := _stParameter[_nStationId].rAccDec;
_stOutfeed.rJerk              := _stParameter[_nStationId].rJerk;
_stOutfeed.rGap               := _stParameter[_nStationId].rGap;
_stOutfeed.rDistance          := _stParameter[_nStationId].rReleaseDistance;

// init method for sending
_ItfMover[_stMoverDataSend.nMoverId].SendToModuloPosCa(FALSE, _stOutfeed);
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Mover" Id="{e82910a4-d871-4e5e-b77c-c01f33e3b55d}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY Mover : reference TO ARRAY[1..MAX_MOVER] OF AXIS_REF;]]></Declaration>
      <Set Name="Set" Id="{44ec8ec6-bdc8-49bb-b3f3-a1d3bd8ab268}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Mover ref= Mover;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MoverOffset" Id="{4a4324a4-0c99-4891-9585-78144eecb105}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY MoverOffset : reference TO ARRAY[1..MAX_STATION]  OF T_NEST_OFFSET]]></Declaration>
      <Set Name="Set" Id="{afb8fc34-701f-4fcb-bc3a-f0cae488d17a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_rMoverOffset ref= MoverOffset;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="State" Id="{ea1d69aa-9e7b-43c0-803d-987ed4934b15}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY State : reference to ARRAY[1..MAX_STATION] OF ST_STATION_STATE]]></Declaration>
      <Set Name="Set" Id="{7e8ecc2e-d8ce-493a-a8c4-0138cc2cb66a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_stState ref= State;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="StationId" Id="{f440e647-2b56-47f6-9e54-30e69375a6c1}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY StationId : uint]]></Declaration>
      <Get Name="Get" Id="{7f95c3ff-d25a-49a2-83f5-6a8f8da9f016}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[StationId := _nStationId;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{0746dd45-9ceb-4162-a875-ac226e6b452a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_nStationId := StationId;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="StationParameter" Id="{07bf2b08-2b73-4810-bdf6-9da9a74a1847}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY StationParameter : reference TO ARRAY[1..MAX_STATION]  OF ST_STATION_PARAMETER]]></Declaration>
      <Set Name="Set" Id="{cd69203e-8d66-4e00-bdb1-edbcf15b620c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_stParameter ref= StationParameter;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="TargetWindow" Id="{392ae526-9be1-4234-afa2-c2662dd1fbbd}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY TargetWindow : lreal]]></Declaration>
      <Get Name="Get" Id="{79f50164-d3cd-4bf2-a579-3ab0b195682d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TargetWindow := SEL((_stInfeed.rDelta < 0.05), _stInfeed.rDelta, 0.1);
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{69dea1a4-0e95-43a8-b90d-b04f5beda7b5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_stInfeed.rDelta := SEL((TargetWindow < 0.05), TargetWindow, 0.1);
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="fb_StationBase">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="fb_StationBase.BitDel">
      <LineId Id="1" Count="5" />
    </LineIds>
    <LineIds Name="fb_StationBase.BitGet">
      <LineId Id="1" Count="5" />
    </LineIds>
    <LineIds Name="fb_StationBase.BitSet">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="fb_StationBase.Check">
      <LineId Id="1" Count="51" />
    </LineIds>
    <LineIds Name="fb_StationBase.Ctrl.Set">
      <LineId Id="1" Count="1" />
    </LineIds>
    <LineIds Name="fb_StationBase.Cycle">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="fb_StationBase.Init">
      <LineId Id="1" Count="35" />
    </LineIds>
    <LineIds Name="fb_StationBase.ItfMover.Set">
      <LineId Id="1" Count="1" />
    </LineIds>
    <LineIds Name="fb_StationBase.ItfStations.Set">
      <LineId Id="1" Count="1" />
    </LineIds>
    <LineIds Name="fb_StationBase.LogState">
      <LineId Id="1" Count="5" />
    </LineIds>
    <LineIds Name="fb_StationBase.MessageLevel.Set">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="fb_StationBase.MoveIn">
      <LineId Id="1" Count="18" />
    </LineIds>
    <LineIds Name="fb_StationBase.MoveOut">
      <LineId Id="1" Count="32" />
    </LineIds>
    <LineIds Name="fb_StationBase.Mover.Set">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="fb_StationBase.MoverOffset.Set">
      <LineId Id="1" Count="1" />
    </LineIds>
    <LineIds Name="fb_StationBase.State.Set">
      <LineId Id="1" Count="1" />
    </LineIds>
    <LineIds Name="fb_StationBase.StationId.Get">
      <LineId Id="1" Count="1" />
    </LineIds>
    <LineIds Name="fb_StationBase.StationId.Set">
      <LineId Id="1" Count="1" />
    </LineIds>
    <LineIds Name="fb_StationBase.StationParameter.Set">
      <LineId Id="1" Count="1" />
    </LineIds>
    <LineIds Name="fb_StationBase.TargetWindow.Get">
      <LineId Id="1" Count="1" />
    </LineIds>
    <LineIds Name="fb_StationBase.TargetWindow.Set">
      <LineId Id="1" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>