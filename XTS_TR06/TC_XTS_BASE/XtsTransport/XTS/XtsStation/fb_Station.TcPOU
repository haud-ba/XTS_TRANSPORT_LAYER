<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="fb_Station" Id="{6a0a6a2b-7760-4443-be11-40a67a6801c3}" SpecialFunc="None">
    <Declaration><![CDATA[//---------------------------------------------------------------------------------------------------------------
//
//  HAUD 2023.03.07
//
//  TR06
//  - XTS_TRAINING
//  - example project for setting up transport layer
//
//
//  fb_Station
//  - handshake with extern control for mover transport through station
//
//---------------------------------------------------------------------------------------------------------------
// This SOFTWARE is provided as an Exemple by THE PROVIDER "as is" and "with all faults." THE PROVIDER makes no 
// representations or warranties of any kind concerning the safety, suitability, lack of viruses, inaccuracies, 
// typographical errors, or other harmful components of this SOFTWARE. There are inherent dangers in the use of 
// any software, and you are solely responsible for determining whether this SOFTWARE is compatible with your 
// equipment and other software installed on your equipment. You are also solely responsible for the protection 
// of your equipment and backup of your data, and THE PROVIDER will not be liable for any damages you may suffer 
// in connection with using, modifying, or distributing this SOFTWARE.
//---------------------------------------------------------------------------------------------------------------
FUNCTION_BLOCK fb_Station IMPLEMENTS I_XtsTransport_Station
VAR
  _nStationId                 : UINT;         // why is Gamora?

  _sState                     : STRING(255);  // additional output for Check()

  // pointer to all stations
  _stCtrl                     : POINTER TO ARRAY[1..MAX_STATION]  OF ST_STATION_CTRL;
  _stState                    : POINTER TO ARRAY[1..MAX_STATION]  OF ST_STATION_STATE;

  // local copy of me
  _stStationCtrl              : ST_STATION_CTRL;
  _stStationState             : ST_STATION_STATE;

  _ItfStation                 : POINTER TO ARRAY[1..MAX_STATION]  OF I_Station_LinkedList;  // access to all stations lists
  _ItfMover                   : POINTER TO ARRAY[1..MAX_MOVER]    OF I_XtsTransport_Mover;  // access to mover methods

  // station related data
  _rMoverOffset               : POINTER TO ARRAY[1..MAX_STATION]  OF T_NEST_OFFSET;         // static offsets for station

  _stParameter                : POINTER TO ARRAY[1..MAX_STATION]  OF ST_STATION_PARAMETER;  // station parameter (where, how fast, how many stops)

  _Mover                      : POINTER TO ARRAY[1..MAX_MOVER]    OF AXIS_REF;              // read from AXIS_REF

  // linked list result struct
  _stListEnter,
  _stListTarget,
  _stListDelete               : ST_STATION_LIST_RESULT;   // struct with result and ticket data

  _stMoverDataSend,
  _stMoverData                : ST_STATION_MOVER_DATA;    // mover ticket data

  _stMoveData                 : ST_MOVE_DATA;             // position and dynamic constraints of movement

  // work vars
  _bInitList                  : BOOL;

  _Result                     : E_PROGRESS;

  _eState                     : E_PROGRESS;

  _nNest,
  _nMoverDetected,
  _nMoverInStation,
  _nTargetStation,
  _ix                         : UINT;

  _rWork                      : LREAL;
  _rModActPosFetch            : LREAL;

  _eFatalError                : E_STATION_STATE;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="methods" Id="{ce408873-d67b-4e84-aa34-fd09aafb4812}" />
    <Folder Name="private" Id="{479c85c2-0b13-40e4-a114-57671c8eb461}" />
    <Folder Name="properties" Id="{1f3172cc-37c1-4ea3-b853-223c95c975ef}" />
    <Method Name="Check" Id="{4b557f41-a9d0-445b-87f4-484ea064a02b}">
      <Declaration><![CDATA[METHOD PRIVATE Check : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT (_nStationId > 0) OR
       (_nStationId > MAX_STATION)
THEN
  _sState                     := 'invalid nStationId';
  RETURN;
END_IF

IF NOT (_stCtrl  <> 0)
THEN
  _sState                     := '_stCtrl: missing pointer';
  RETURN;
END_IF

IF NOT (_stState <> 0)
THEN
  _sState                     := '_stState: missing pointer';
  RETURN;
END_IF

IF NOT (_ItfStation <> 0)
THEN
  _sState                     := '_ItfStation: missing interface';
  RETURN;
END_IF

IF NOT (_ItfMover <> 0)
THEN
  _sState                     := '_ItfMover: missing interface';
  RETURN;
END_IF

IF NOT (_rMoverOffset  <> 0)
THEN
  _sState                     := '_rMoverOffset: missing pointer';
  RETURN;
END_IF

IF NOT (_stParameter  <> 0)
THEN
  _sState                     := '_stParameter: missing pointer';
  RETURN;
END_IF

IF NOT (_Mover  <> 0)
THEN
  _sState                     := '_Mover: missing pointer';
  RETURN;
END_IF


_sState                       := 'CHECK_DONE';
Check                         := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Ctrl" Id="{c7c7a006-9961-4a51-a682-221fbb0e325a}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY Ctrl : pointer to ARRAY[1..MAX_STATION] OF ST_STATION_CTRL]]></Declaration>
      <Set Name="Set" Id="{ae2c9079-b5c1-483d-9ce6-0ec6d2b84e7d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_stCtrl := Ctrl;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Cycle" Id="{7ea7a6f9-8509-4d41-9999-ae04f3572e36}">
      <Declaration><![CDATA[METHOD Cycle
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// check pointer and interface
IF NOT Check() THEN RETURN; END_IF

// direct from interface
CASE _stCtrl^[_nStationId].eCmd
OF
  E_STATION_CTRL.STATION_INIT:      // commanded init from cyclic interface
    Init();
    RETURN;


  E_STATION_CTRL.STATION_DISABLE:   // commanded disable from cyclic interface
    CASE _stStationState.eState
    OF
      E_STATION_STATE.STATION_INIT,
      E_STATION_STATE.STATION_DISABLE:
        // disable station when no mover is handled
        _stStationState.eState        := E_STATION_STATE.STATION_DISABLE;
    END_CASE
END_CASE

//-----------------------------------------------------------------------------
// copy ctrl to local
//-----------------------------------------------------------------------------
_stStationCtrl                        := _stCtrl^[_nStationId];
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _stStationState.eState
OF
  E_STATION_STATE.STATION_NO_INIT:    // startup state in first PLC cycle, init linked list required
    IF NOT _bInitList
    THEN
      _bInitList                      := _ItfStation^[_nStationId].InitList();
    END_IF
    _stStationState.eState            := E_STATION_STATE.STATION_INIT;

  E_STATION_STATE.STATION_INIT:       // switch state as reserve for anything you might add here
    _stStationState.nMoverId          := 0;
    _stStationState.eState            := E_STATION_STATE.STATION_DISABLE;
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _stStationState.eState
OF
  E_STATION_STATE.STATION_DISABLE:    // end state after first PLC cycle startup; wait state after commanded disable
    IF (_stStationCtrl.eCmd = E_STATION_CTRL.STATION_ENABLE)
    THEN
      _stStationState.eState          := E_STATION_STATE.STATION_ENABLE;
    END_IF


  E_STATION_STATE.STATION_ENABLE:     // double check commanded enable and clear work vars
    IF (_stStationCtrl.eCmd = E_STATION_CTRL.STATION_ENABLE)
    THEN
      memset(ADR(_stListEnter),    0, SIZEOF(_stListEnter));

      _eState                         := E_PROGRESS.PROGRESS_INIT;  // work var for nested case
      _stStationState.eState          := E_STATION_STATE.STATION_DETECT_MOVER;
    END_IF


  E_STATION_STATE.STATION_DETECT_MOVER:// wait state for mover detection
    CASE _eState
    OF
      E_PROGRESS.PROGRESS_INIT:
        IF (_stStationCtrl.eCmd = E_STATION_CTRL.STATION_DISABLE) // check for commanded disable
        THEN
          _stStationState.eState      := E_STATION_STATE.STATION_DISABLE; // go back and wait, no matter the queue

        ELSIF (_ItfStation^[_nStationId].Count > 0)
        THEN
          // someone entered something in my list
          _stListEnter                := _ItfStation^[_nStationId].GetHead();
          _eState                     := E_PROGRESS.PROGRESS_BUSY;
        END_IF
    END_CASE
    CASE _eState
    OF
      E_PROGRESS.PROGRESS_BUSY:
        IF (_stListEnter.wState = 0)  // GetHead() without error
        THEN
          // list is giving head as result
          _stMoverData                := _stListEnter.stData; // copy ticket from list result
          _eState                     := E_PROGRESS.PROGRESS_PREPARE;
        ELSE
          // the thing that must not be: GetHead() with error
          _stStationState.eState      := E_STATION_STATE.STATION_ERROR_LIST_GET_HEAD_FAULT;
        END_IF
    END_CASE
    CASE _eState
    OF
      E_PROGRESS.PROGRESS_PREPARE:    // check ticket (list entry)
        // check target assignement
        IF NOT (_stMoverData.nTargetStation = _nStationId)
        THEN
          // for whom the mover calls
          // wrong address, right mover?
          _stStationState.eState      := E_STATION_STATE.STATION_ERROR_LIST_STATION_ID_WRONG;
        ELSE
          // it's a me
          _nMoverDetected             := _stMoverData.nMoverId;

          IF (_nMoverDetected < 1) OR
             (_nMoverDetected > MAX_MOVER)
          THEN
            // out of range the mover must not be
            _stStationState.eState    := E_STATION_STATE.STATION_ERROR_LIST_MOVER_ID_INVALID;
          ELSE
            memset(ADR(_stListDelete),   0, SIZEOF(_stListDelete)); // clear work var
            _eState                   := E_PROGRESS.PROGRESS_INIT;

            // prepare station state for new mover
            _stStationState.nMoverId  := TO_USINT(_nMoverDetected); // who has arrived
            _stStationState.nMask     := _stMoverData.nMask;        // how many stops have to be made
            _stStationState.eState    := E_STATION_STATE.STATION_MOVER_ENTER; // go ask for permission to enter
          END_IF
        END_IF
    END_CASE
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _stStationState.eState
OF
  E_STATION_STATE.STATION_MOVER_ENTER:  // requesting permission for mover to enter station
    CASE _eState
    OF
      E_PROGRESS.PROGRESS_INIT:
        IF (_stStationCtrl.eCmd = E_STATION_CTRL.STATION_DISABLE)
        THEN
          _stStationState.eState      := E_STATION_STATE.STATION_DISABLE;
        ELSE
          IF (_stStationCtrl.eCmd = E_STATION_CTRL.STATION_MOVER_ENTER)   // mover may enter station now
          THEN
            _nNest                    := 1; // default nest
            _eState                   := E_PROGRESS.PROGRESS_BUSY;

            FOR _ix := 1 TO _stParameter^[_nStationId].nConfiguredStopCount
            DO
              IF GetBitWord(_stMoverData.nMask, _ix-1)
              THEN
                _nNest                := _ix;
                EXIT;
              END_IF
            END_FOR

          ELSIF (_stStationCtrl.eCmd = E_STATION_CTRL.STATION_MOVER_SEND) // control decided otherwise, mover shall be sent away
          THEN
            _stStationState.eState    := E_STATION_STATE.STATION_MOVER_OUT;
          END_IF
        END_IF
    END_CASE
    CASE _eState
    OF
      E_PROGRESS.PROGRESS_BUSY:
        MoveData();

        // check if infeed movement has to cross modulo turn
        _rModActPosFetch            := _Mover^[_stMoverData.nMoverId].NcToPlc.ModuloActPos;

        IF (_rModActPosFetch > _stMoveData.rPos + _stParameter^[_nStationId].rReleaseDistance)
        THEN
          _stMoveData.rPos          := _stMoveData.rPos + TO_REAL(_ItfMover^[_stMoverData.nMoverId].RailLength);
        END_IF

        _stStationState.eState      := E_STATION_STATE.STATION_MOVER_IN_TARGET;
    END_CASE
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _stStationState.eState
OF
  E_STATION_STATE.STATION_MOVER_IN_TARGET:
    _Result := _ItfMover^[_stMoverData.nMoverId].MoveToPosCa(TRUE, _stMoveData);

    IF (_Result = E_PROGRESS.PROGRESS_DONE)
    THEN
      // mother! has arrived
      _ItfMover^[_stMoverData.nMoverId].MoveToPosCa(FALSE, _stMoveData);

      _stStationState.eState          := E_STATION_STATE.STATION_PROCESS_START;
    ELSE
      IF (_Result = E_PROGRESS.PROGRESS_ERROR)
      THEN
        _ItfMover^[_stMoverData.nMoverId].MoveToPosCa(FALSE, _stMoveData);
        _stStationState.eState        := E_STATION_STATE.STATION_ERROR_INFEED_ERROR;
      END_IF 
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _stStationState.eState
OF
  E_STATION_STATE.STATION_PROCESS_START:
    IF (_stStationCtrl.eCmd = E_STATION_CTRL.STATION_PROCESS_START) OR  // double handshake, your choice
       (_stStationCtrl.eCmd = E_STATION_CTRL.STATION_PROCESS_DONE)      // single handshake, your choice
    THEN
      // clear bit in mask when started/done
      _stStationState.nMask           := TO_USINT(DelBitWord(TO_WORD(_stStationState.nMask), _nNest-1));
      _stStationState.eState          := E_STATION_STATE.STATION_PROCESS_DONE;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _stStationState.eState
OF
  E_STATION_STATE.STATION_PROCESS_DONE:
    IF (_stStationCtrl.eCmd = E_STATION_CTRL.STATION_PROCESS_DONE)
    THEN
      _stStationState.eState          := E_STATION_STATE.STATION_CHECK;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _stStationState.eState
OF
  E_STATION_STATE.STATION_CHECK:
    IF (_stStationState.nMask = 0)
    THEN
      // mover has to leave
      _stStationState.eState          := E_STATION_STATE.STATION_MOVER_OUT;

    ELSE
      // more work to do
      _stStationState.eState          := E_STATION_STATE.STATION_CHECK_NEST;

      FOR _ix := 1 TO _stParameter^[_nStationId].nConfiguredStopCount
      DO
        IF GetBitWord(_stStationState.nMask, _ix-1)
        THEN
          _nNest                      := _ix;
          EXIT;
        END_IF
      END_FOR
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _stStationState.eState
OF
  E_STATION_STATE.STATION_CHECK_NEST:
    MoveData();
    _stStationState.eState            := E_STATION_STATE.STATION_MOVER_IN_TARGET;
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _stStationState.eState
OF
  E_STATION_STATE.STATION_MOVER_OUT:
    IF (_stStationCtrl.eCmd = E_STATION_CTRL.STATION_MOVER_OUT)
    THEN
      IF (_stStationCtrl.nTargetStation < 1) OR  
         (_stStationCtrl.nTargetStation > MAX_STATION)
      THEN
        _stStationState.eState        := STATION_ERROR_OUTFEED_TARGET_INVALID;
      ELSE
        _stListDelete                 := _ItfStation^[_nStationId].RemoveHeadValue();

        IF (_stListDelete.wState <> 0)
        THEN
          _stStationState.eState      := E_STATION_STATE.STATION_ERROR_LIST_REMOVE_HEAD_FAULT;
        ELSE
          memset(ADR(_stListTarget),   0, SIZEOF(_stListTarget));

          MoverOut();
          _stStationState.eState      := E_STATION_STATE.STATION_MOVER_RELEASE;
        END_IF
      END_IF
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _stStationState.eState
OF
  E_STATION_STATE.STATION_MOVER_RELEASE:
    _Result                           := _ItfMover^[_stMoverDataSend.nMoverId].SendToModuloPosCa(TRUE, _stMoveData);

    IF (_Result = E_PROGRESS.PROGRESS_DONE)
    THEN
      // add entry in target station list
      _stListTarget                   := _ItfStation^[_stMoverDataSend.nTargetStation].AddTailValue(_stMoverDataSend);

      IF (_stListTarget.wState <> 0)
      THEN
        _stStationState.eState        := STATION_ERROR_LIST_ADD_TAIL_FAULT;
      ELSE
        MoverOut();
        _stStationState.eState        := E_STATION_STATE.STATION_MOVER_GONE;
      END_IF
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _stStationState.eState
OF
  E_STATION_STATE.STATION_MOVER_GONE:
    _ItfMover^[_stMoverDataSend.nMoverId].SendToModuloPosCa(FALSE, 
                                                      _stMoveData);

    memset(ADR(_stMoverData),  0, SIZEOF(_stMoverData));

    _stStationState.nMask             := 0;
    _stStationState.nMoverId          := 0;

    IF (_stStationCtrl.eCmd = E_STATION_CTRL.STATION_MOVER_GONE)
    THEN
      _stStationState.eState          := E_STATION_STATE.STATION_INIT;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
_sState                               := TO_STRING(_stStationState.eState);
//-----------------------------------------------------------------------------
// Errors
//-----------------------------------------------------------------------------
CASE _stStationState.eState
OF
  E_STATION_STATE.STATION_ERROR_LIST_STATION_ID_WRONG:
    IF (_stStationCtrl.eCmd = E_STATION_CTRL.STATION_MOVER_OUT)
    THEN
      _nMoverDetected                 := _stMoverData.nMoverId;

      IF (_nMoverDetected < 1) OR
         (_nMoverDetected > MAX_MOVER)
      THEN
        // this MUST NOT happen
        _stStationState.eState        := E_STATION_STATE.STATION_ERROR_LIST_MOVER_ID_INVALID;
      ELSE
        // not for station; send mover out
        _stStationState.eState          := E_STATION_STATE.STATION_MOVER_OUT;
      END_IF

    ELSIF (_stStationCtrl.eCmd = E_STATION_CTRL.STATION_MOVER_ENTER)
    THEN
      // override wrong TargetStationId in List; start infeed of mover

      _nMoverDetected                 := _stMoverData.nMoverId;

      IF (_nMoverDetected < 1) OR
         (_nMoverDetected > MAX_MOVER)
      THEN
        // this MUST NOT happen
        _stStationState.eState        := E_STATION_STATE.STATION_ERROR_LIST_MOVER_ID_INVALID;
      ELSE
        _eState                       := E_PROGRESS.PROGRESS_INIT;
        _stStationState.nMoverId      := TO_USINT(_nMoverDetected);
        _stStationState.nMask         := _stMoverData.nMask;
        _stStationState.eState        := E_STATION_STATE.STATION_MOVER_ENTER;
      END_IF

    END_IF

  E_STATION_STATE.STATION_ERROR_OUTFEED_TARGET_INVALID:
    // wait here until valid target is detected
    IF NOT (_stStationCtrl.nTargetStation < 1) AND  
       NOT (_stStationCtrl.nTargetStation > MAX_STATION)
    THEN
      _stStationState.eState          := E_STATION_STATE.STATION_MOVER_OUT;
    END_IF


  E_STATION_STATE.STATION_ERROR_LIST_GET_HEAD_FAULT,
  E_STATION_STATE.STATION_ERROR_LIST_REMOVE_HEAD_FAULT,
  E_STATION_STATE.STATION_ERROR_LIST_ADD_TAIL_FAULT,
  E_STATION_STATE.STATION_ERROR_LIST_MOVER_ID_INVALID,
  E_STATION_STATE.STATION_ERROR_INFEED_ERROR:
    // yes, but why?
    // cannot be fixed by ctrl
    _eFatalError                      := _stStationState.eState;
    _stStationState.eState            := E_STATION_STATE.STATION_ERROR_FATAL;

  E_STATION_STATE.STATION_ERROR_FATAL:
    // write to string for debugging
    _sState                           := concat(TO_STRING(_stStationState.eState), ': ');
    _sState                           := concat(_sState, TO_STRING(_eFatalError));
END_CASE


_stStationState.nQueue                := TO_USINT(_ItfStation^[_nStationId].Count);
_stState^[_nStationId]                := _stStationState;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="DelBitWord" Id="{1fcb93df-4d80-4b1c-bad6-325007b39b6e}">
      <Declaration><![CDATA[METHOD PUBLIC DelBitWord : WORD
VAR_INPUT
  inVal   : WORD;
  bitNo   : DINT;
END_VAR
VAR
  wConst : WORD := 1;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ( inVal AND SHL( wConst,bitNo MOD 16 ) ) > 0 THEN
  DelBitWord := inVal XOR (SHL( wConst,bitNo MOD 16 ));
ELSE
  DelBitWord := inVal;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetBitWord" Id="{3e49b02a-330b-4ba9-b486-d6577a561798}">
      <Declaration><![CDATA[METHOD PUBLIC GetBitWord : BOOL
VAR_INPUT
  inVal   : WORD;
  bitNo   : DINT;
END_VAR
VAR
  wConst : WORD := 1;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ( inVal AND SHL( wConst,DINT_TO_SINT(bitNo) MOD 16 ) ) > 0
THEN
  GetBitWord := TRUE;
ELSE
  GetBitWord := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{7504aeb6-1bc5-43b8-9afb-f879fd258e13}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD Init : e_progress
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// check pointer and interface
IF NOT Check() THEN Init := e_progress.PROGRESS_ERROR; RETURN; END_IF



// clear all station data
_bInitList                        := _ItfStation^[_nStationId].InitList();

// clear all states and list entries on request
memset(ADR(_stStationCtrl),  0, SIZEOF(_stStationCtrl));
memset(ADR(_stStationState), 0, SIZEOF(_stStationState));

_stStationState.nMask             := 0;
_stStationState.nMoverId          := 0;

_eFatalError                      := 0;

_stStationState.eState            := E_STATION_STATE.STATION_INIT;
_stState^[_nStationId]            := _stStationState;
_sState                           := TO_STRING(_stStationState.eState);

Init                              := e_progress.PROGRESS_DONE;

]]></ST>
      </Implementation>
    </Method>
    <Property Name="ItfMover" Id="{7bb6a22a-6b51-4f72-b870-521d89f00f33}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY ItfMover : pointer to ARRAY[1..MAX_MOVER] OF I_XtsTransport_Mover]]></Declaration>
      <Set Name="Set" Id="{0b4b65cd-b390-48a7-93c4-92b75e304139}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_ItfMover := ItfMover;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="ItfStations" Id="{517c066b-12bc-4649-ad28-04f745e3e87b}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY ItfStations : pointer to ARRAY[1..MAX_STATION] OF I_Station_LinkedList]]></Declaration>
      <Set Name="Set" Id="{1b66718b-bfc2-427a-b5bd-16809a307b8f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_ItfStation := ItfStations;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="MoveData" Id="{a5a3f59a-6fee-4e82-931e-bcc1715aa98a}" FolderPath="private\">
      <Declaration><![CDATA[METHOD PRIVATE MoveData
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// build WorkPos from parameter, static station data and information on mover
_stMoveData.rPos            := TO_REAL(_stParameter^[_nStationId].rPosWait
                             + _stParameter^[_nStationId].rPosStop[_nNest]
                             + _stMoverData.rOffset
                             + _rMoverOffset^[_nStationId][_stMoverData.nMoverId][_nNest]);

_stMoveData.rVelo           := _stParameter^[_nStationId].rVelo;
_stMoveData.rAcc            := _stParameter^[_nStationId].rAccDec;
_stMoveData.rJerk           := _stParameter^[_nStationId].rJerk;
_stMoveData.rGap            := _stParameter^[_nStationId].rGap;

// init method and state
_ItfMover^[_stMoverData.nMoverId].MoveToPosCa(FALSE, _stMoveData);
_eState                     := E_PROGRESS.PROGRESS_INIT;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Mover" Id="{71ad3ce4-cbc7-4639-ac92-82115d956e55}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY Mover : POINTER TO ARRAY[1..MAX_MOVER] OF AXIS_REF;]]></Declaration>
      <Set Name="Set" Id="{f88c8007-8cc1-4951-a2f7-89cddb774ec8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Mover := Mover;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MoverOffset" Id="{b741cb64-939b-4b6a-aa5c-c2510bec8ffb}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY MoverOffset : POINTER TO ARRAY[1..MAX_STATION]  OF T_NEST_OFFSET]]></Declaration>
      <Set Name="Set" Id="{22dc33d0-9fef-4026-b28a-3a80ddee0d52}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_rMoverOffset := MoverOffset;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="MoverOut" Id="{c53911f4-501b-436e-be79-a75f576784da}" FolderPath="private\">
      <Declaration><![CDATA[METHOD PRIVATE MoverOut
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// build data for sending mover to target station

// who am I sending?
_stMoverDataSend.nMoverId       := _stStationState.nMoverId;

// get optional information about nests to work
_stMoverDataSend.nMask          := _stStationCtrl.nMask;

// get optional offset
_stMoverDataSend.rOffset        := _stStationCtrl.rOffset;

// get target station
_stMoverDataSend.nTargetStation := _stStationCtrl.nTargetStation;

FOR _ix := 1 TO _stParameter^[_stMoverDataSend.nTargetStation].nConfiguredStopCount
DO
  IF GetBitWord(_stMoverDataSend.nMask, _ix-1)
  THEN
    _nNest                      := _ix;
    EXIT;
  END_IF
END_FOR

// get position of target
_stMoveData.rPos                := TO_REAL(_stParameter^[_stMoverDataSend.nTargetStation].rPosWait);

IF (_stMoveData.rPos - TO_REAL(_Mover^[_stMoverDataSend.nMoverId].NcToPlc.ModuloActPos) < 0)
THEN
  // only forward, never back
  _stMoveData.rPos              := TO_REAL(_stMoveData.rPos 
                                 + _ItfMover^[_stMoverDataSend.nMoverId].RailLength);
END_IF

// init method for sending
_ItfMover^[_stMoverDataSend.nMoverId].SendToModuloPosCa(FALSE, 
                                                  _stMoveData);

]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetBitWord" Id="{3f525fda-eedc-431f-9650-e9f04579f12e}">
      <Declaration><![CDATA[METHOD PUBLIC SetBitWord : WORD
VAR_INPUT
  inVal   : WORD;
  bitNo   : DINT;
END_VAR
VAR
  wConst  : WORD := 1;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SetBitWord := inVal OR SHL( wConst,bitNo MOD 16 );]]></ST>
      </Implementation>
    </Method>
    <Property Name="State" Id="{915c6493-f92b-4f69-aea4-8517cb57405e}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY State : pointer to ARRAY[1..MAX_STATION] OF ST_STATION_STATE]]></Declaration>
      <Set Name="Set" Id="{71d65301-3f8c-45b3-b6ba-502ba104c321}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_stState := State;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="StationId" Id="{2913fa7a-3349-4140-924c-e764850d6b65}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY StationId : uint]]></Declaration>
      <Get Name="Get" Id="{82ac0669-5259-4d6e-84b4-c00fa7dfbed8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[StationId := _nStationId;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{2b36c5d1-50f0-4e81-8e9b-79e222ffdbd0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_nStationId := StationId;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="StationParameter" Id="{4966de79-fe25-4ef3-b797-e0298595abf0}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY StationParameter : POINTER TO ARRAY[1..MAX_STATION]  OF ST_STATION_PARAMETER]]></Declaration>
      <Set Name="Set" Id="{fabea73f-f7c8-4007-9566-b6f06460640c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_stParameter := StationParameter;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="fb_Station">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="fb_Station.Check">
      <LineId Id="103" Count="50" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Station.Ctrl.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Station.Cycle">
      <LineId Id="817" Count="6" />
      <LineId Id="1270" Count="0" />
      <LineId Id="838" Count="5" />
      <LineId Id="845" Count="18" />
      <LineId Id="865" Count="20" />
      <LineId Id="1226" Count="1" />
      <LineId Id="886" Count="51" />
      <LineId Id="1220" Count="0" />
      <LineId Id="938" Count="0" />
      <LineId Id="1272" Count="0" />
      <LineId Id="1271" Count="0" />
      <LineId Id="939" Count="31" />
      <LineId Id="1263" Count="0" />
      <LineId Id="1262" Count="0" />
      <LineId Id="1264" Count="1" />
      <LineId Id="971" Count="8" />
      <LineId Id="981" Count="36" />
      <LineId Id="1273" Count="0" />
      <LineId Id="1018" Count="0" />
      <LineId Id="1021" Count="9" />
      <LineId Id="1035" Count="3" />
      <LineId Id="1040" Count="44" />
      <LineId Id="1199" Count="0" />
      <LineId Id="1204" Count="0" />
      <LineId Id="1203" Count="0" />
      <LineId Id="1205" Count="0" />
      <LineId Id="1208" Count="0" />
      <LineId Id="1207" Count="0" />
      <LineId Id="1222" Count="1" />
      <LineId Id="1085" Count="1" />
      <LineId Id="1206" Count="0" />
      <LineId Id="1087" Count="7" />
      <LineId Id="1267" Count="1" />
      <LineId Id="1095" Count="0" />
      <LineId Id="1098" Count="2" />
      <LineId Id="1219" Count="0" />
      <LineId Id="1212" Count="6" />
      <LineId Id="1102" Count="6" />
      <LineId Id="1111" Count="0" />
      <LineId Id="1113" Count="5" />
      <LineId Id="1237" Count="0" />
      <LineId Id="1119" Count="3" />
      <LineId Id="1124" Count="54" />
      <LineId Id="1225" Count="0" />
      <LineId Id="1179" Count="5" />
      <LineId Id="1250" Count="0" />
      <LineId Id="1249" Count="0" />
      <LineId Id="1248" Count="0" />
      <LineId Id="1247" Count="0" />
      <LineId Id="1251" Count="0" />
      <LineId Id="1185" Count="4" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Station.DelBitWord">
      <LineId Id="13" Count="4" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Station.GetBitWord">
      <LineId Id="13" Count="4" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Station.Init">
      <LineId Id="24" Count="1" />
      <LineId Id="22" Count="1" />
      <LineId Id="20" Count="1" />
      <LineId Id="6" Count="13" />
      <LineId Id="26" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Station.ItfMover.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Station.ItfStations.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Station.MoveData">
      <LineId Id="21" Count="0" />
      <LineId Id="6" Count="3" />
      <LineId Id="27" Count="0" />
      <LineId Id="11" Count="3" />
      <LineId Id="22" Count="0" />
      <LineId Id="15" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="fb_Station.Mover.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="fb_Station.MoverOffset.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Station.MoverOut">
      <LineId Id="41" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="6" Count="4" />
      <LineId Id="19" Count="1" />
      <LineId Id="46" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="53" Count="7" />
      <LineId Id="47" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="28" Count="1" />
      <LineId Id="43" Count="0" />
      <LineId Id="30" Count="2" />
      <LineId Id="50" Count="0" />
      <LineId Id="33" Count="1" />
      <LineId Id="36" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Station.SetBitWord">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Station.State.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Station.StationId.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Station.StationId.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Station.StationParameter.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>