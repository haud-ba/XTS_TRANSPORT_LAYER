<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="fb_Mover_withOutInterface" Id="{70d122b6-dee2-4471-b4d0-231d4690d633}" SpecialFunc="None">
    <Declaration><![CDATA[//---------------------------------------------------------------------------------------------------------------
//
//  HAUD 2023.12.19
//
//  - XTS_TRAINING
//  - example project for setting up transport layer
//
//
//  fb_Mover
//  - all positioning input is modulo value
//  - wrap MC function blocks
//
//
//---------------------------------------------------------------------------------------------------------------
// This SOFTWARE is provided as an Exemple by THE PROVIDER "as is" and "with all faults." THE PROVIDER makes no 
// representations or warranties of any kind concerning the safety, suitability, lack of viruses, inaccuracies, 
// typographical errors, or other harmful components of this SOFTWARE. There are inherent dangers in the use of 
// any software, and you are solely responsible for determining whether this SOFTWARE is compatible with your 
// equipment and other software installed on your equipment. You are also solely responsible for the protection 
// of your equipment and backup of your data, and THE PROVIDER will not be liable for any damages you may suffer 
// in connection with using, modifying, or distributing this SOFTWARE.
//---------------------------------------------------------------------------------------------------------------
FUNCTION_BLOCK fb_Mover_withOutInterface IMPLEMENTS I_StationMover
VAR
  _sState           : STRING;

  _Master,
  _Mover            : REFERENCE TO AXIS_REF;
  _rLastPosition    : REFERENCE TO LREAL;
  _rLastGap         : REFERENCE TO LREAL;

  _RailLength       : LREAL;

  // mover compact axis information
  _stInfo           : REFERENCE TO ST_MOVER_INFO; // ActPos, Enable, ...

  _bError           : BOOL;   // used in Cycle()
  _nErrorIdMover,             // used in Cycle()
  _nErrorIdPower    : UDINT;  // used in Cycle()

  //---------------------------------------------------------------------------
  // MC2 and CA function blocks
  //---------------------------------------------------------------------------
  _wMoverState      : DWORD;

  _fbMoveAbsCa      : Tc3_McCollisionAvoidance.MC_MoveAbsoluteCA;
  _fbGearInPosCa    : Tc3_McCollisionAvoidance.MC_GearInPosCA;

  _fbHalt           : Tc2_MC2.MC_Halt;
  _fbReset          : Tc2_MC2.MC_Reset;

  _fbGearIn         : Tc2_MC2.MC_GearIn;
  _fbGearOut        : Tc2_MC2.MC_GearOut;

  _fbPower          : Tc2_MC2.MC_Power;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="methods" Id="{994186cc-6c14-4eb8-8c24-156c4896ea40}" />
    <Folder Name="properties" Id="{e8154d67-fa0c-41f5-a5a5-45013688dabb}" />
    <Method Name="Check" Id="{6dd97fb8-b594-493d-84ee-277b319ffb28}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD PROTECTED Check : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// check The thing that should not be

IF NOT __ISVALIDREF(_Mover)
THEN
  _sState                     := 'Mover: missing pointer';
  RETURN;
END_IF

IF NOT __ISVALIDREF(_rLastPosition)
THEN
  _sState                     := '_rLastPosition: missing pointer';
  RETURN;
END_IF

IF NOT __ISVALIDREF(_rLastGap)
THEN
  _sState                     := '_rLastGap: missing pointer';
  RETURN;
END_IF

IF NOT __ISVALIDREF(_stInfo)
THEN
  _sState                     := '_stInfo: missing pointer';
  RETURN;
END_IF

_sState                       := 'CHECK_DONE';
Check                         := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Cycle" Id="{1e67ceba-2600-47c5-ac16-c416856ec2f0}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD Cycle : E_PROGRESS
VAR_INST
  _eState             : E_PROGRESS;

  _rtrigMoverError,
  _rtrigPowerError    : Tc2_Standard.R_TRIG;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Check() THEN Cycle := E_PROGRESS.PROGRESS_ERROR; RETURN; END_IF

//-----------------------------------------------------------------------------------------------
// cyclic NC mapping
//-----------------------------------------------------------------------------------------------
_Mover();
//-----------------------------------------------------------------------------------------------


//-----------------------------------------------------------------------------------------------
// cyclic MC_Power
//-----------------------------------------------------------------------------------------------
_fbPower(
        Axis              := _Mover, 
        Enable_Positive   := TRUE, 
        Enable_Negative   := TRUE, 
        BufferMode        := MC_BufferMode.MC_Aborting);

_rtrigMoverError(CLK := _Mover.Status.Error); 

IF _rtrigMoverError.Q
THEN
  _bError                 := TRUE;  // deleted by Reset()
  // catch error
  _nErrorIdMover          := _Mover.Status.ErrorID;
  _stInfo.nErrorId        := _nErrorIdMover;
END_IF

_rtrigPowerError(CLK := _fbPower.Error); 

IF _rtrigPowerError.Q
THEN
  _bError                 := TRUE;  // deleted by Reset()
  // catch error
  _nErrorIdPower          := _fbPower.ErrorID;
END_IF
//-----------------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------------
// cyclic state
//-----------------------------------------------------------------------------------------------
IF NOT _Mover.Status.ControlLoopClosed
THEN
  _eState                       := E_PROGRESS.PROGRESS_INIT;
ELSE
  _eState                       := E_PROGRESS.PROGRESS_WORKING;
END_IF
 
IF _bError
THEN
  _eState                       := E_PROGRESS.PROGRESS_ERROR;
END_IF
//-----------------------------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// cyclic Mover info data
// get collision avoiding information from cyclic interface
//-----------------------------------------------------------------------------------------------
memcpy(ADR(_wMoverState), ADR(_Mover.NcToPlc.StateDWord2), SIZEOF(_wMoverState));

_stInfo.bMoverEnabled           := _Mover.Status.ControlLoopClosed;
_stInfo.bMoverError             := _bError;
_stInfo.bMoverCoupled           := _Mover.Status.Coupled;
_stInfo.bMoverStandstill        := _Mover.Status.NotMoving;
_stInfo.bMoverAvoidingCollision := _wMoverState.0;

_stInfo.rModuloActPos           := TO_REAL(_Mover.NcToPlc.ModuloActPos);
_stInfo.rAbsActPos              := TO_REAL(_Mover.NcToPlc.ActPos);

_stInfo.rModuloTargetPos        := TO_REAL(Tc2_Math.LMOD(_rLastPosition, RailLength));
_stInfo.rAbsTargetPos           := TO_REAL(_rLastPosition);
//-----------------------------------------------------------------------------

Cycle                           := _eState;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Disable" Id="{8dcae5af-479a-4243-8887-52760195f712}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD Disable : E_PROGRESS
VAR_INPUT
  Execute             : BOOL;
END_VAR
VAR_INST
  _nErrorId           : UDINT;
  _eState             : E_PROGRESS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Execute THEN _eState  := E_PROGRESS.PROGRESS_INIT; END_IF 
IF NOT Check() THEN Disable  := E_PROGRESS.PROGRESS_ERROR; RETURN; END_IF


CASE _eState
OF
  E_PROGRESS.PROGRESS_INIT:
    IF Execute
    THEN
      _nErrorId               := 0;
      _eState                 := E_PROGRESS.PROGRESS_BUSY;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_BUSY:
    _eState                   := E_PROGRESS.PROGRESS_PREPARE;
    _fbPower.Enable           := FALSE;
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_PREPARE:
    IF (_fbPower.Error)
    THEN
      _eState                 := E_PROGRESS.PROGRESS_ERROR;
      _nErrorId               := _fbPower.ErrorId;

    ELSIF NOT (_Mover.Status.ControlLoopClosed)
    THEN
      _eState                 := E_PROGRESS.PROGRESS_DONE;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------

Disable                       := _eState;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Enable" Id="{767bc05f-07d2-499c-bcca-5e7f1873899c}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD Enable : E_PROGRESS
VAR_INPUT
  Execute             : BOOL;
END_VAR
VAR_INST
  _nErrorId           : UDINT;
  _eState             : E_PROGRESS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Execute THEN _eState  := E_PROGRESS.PROGRESS_INIT; END_IF 
IF NOT Check() THEN Enable   := E_PROGRESS.PROGRESS_ERROR; RETURN; END_IF


CASE _eState
OF
  E_PROGRESS.PROGRESS_INIT:
    IF Execute
    THEN
      _nErrorId               := 0;
      _eState                 := E_PROGRESS.PROGRESS_BUSY;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_BUSY:
    _eState                   := E_PROGRESS.PROGRESS_PREPARE;
    _fbPower.Enable           := TRUE;
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_PREPARE:
    IF (_fbPower.Error)
    THEN
      _eState                 := E_PROGRESS.PROGRESS_ERROR;
      _nErrorId               := _fbPower.ErrorId;

    ELSIF (_Mover.Status.ControlLoopClosed)
    THEN
      _eState                 := E_PROGRESS.PROGRESS_DONE;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------

Enable                   := _eState;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GearIn" Id="{750c5513-2ee8-4b46-9545-d62f78b1b1c0}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD GearIn : E_PROGRESS;
VAR_INPUT
  Execute             : BOOL;
  stGearData          : ST_GEAR_DATA;
  stMoveData          : ST_MOVE_DATA;
END_VAR
VAR_INST
  _nErrorId           : UDINT;
  _eState             : E_PROGRESS;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Execute THEN _eState  := E_PROGRESS.PROGRESS_INIT; END_IF 
IF NOT Check() THEN GearIn   := E_PROGRESS.PROGRESS_ERROR; RETURN; END_IF


CASE _eState
OF
  E_PROGRESS.PROGRESS_INIT:
    IF Execute
    THEN
      _nErrorId               := 0;
      _eState                 := E_PROGRESS.PROGRESS_BUSY;

      IF NOT __ISVALIDREF(_Master)
      THEN
        _nErrorId             := 666;
        _eState               := E_PROGRESS.PROGRESS_ERROR;
      END_IF
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_BUSY:
    _eState                   := E_PROGRESS.PROGRESS_PREPARE;
    _fbPower.Override         := stMoveData.rOverride;

    _fbGearIn(
            Master            := _Master, 
            Slave             := _Mover,
            Execute           := FALSE,
            RatioNumerator    := stGearData.rGearNumerator,
            RatioDenominator  := stGearData.iGearDenumerator, 
            Acceleration      := stMoveData.rAcc, 
            Deceleration      := stMoveData.rAcc, 
            Jerk              := stMoveData.rJerk, 
            BufferMode        := Tc2_MC2.MC_BufferMode.MC_Aborting);
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_PREPARE:
    _fbGearIn(
            Master            := _Master, 
            Slave             := _Mover,
            Execute           := TRUE);

    IF _fbGearIn.Error
    THEN
      _eState                 := E_PROGRESS.PROGRESS_ERROR;
    ELSIF _fbGearIn.InGear
    THEN
      _eState                 := E_PROGRESS.PROGRESS_DONE;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_DONE:
    _fbGearIn(
            Master            := _Master, 
            Slave             := _Mover,
            Execute           := FALSE);
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------

GearIn                        := _eState;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GearInPosCa" Id="{89b85383-26c4-4373-b898-dfc6142b4e89}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD GearInPosCa : E_PROGRESS
VAR_INPUT
  Execute             : BOOL;
  stMoveData          : ST_MOVE_DATA;
  stGearData          : ST_GEAR_DATA;  
END_VAR
VAR_INST
  _nErrorId           : UDINT;
  _rPos               : LREAL;
  _eState             : E_PROGRESS;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Execute THEN _eState       := E_PROGRESS.PROGRESS_INIT; END_IF 
IF NOT Check() THEN GearInPosCa   := E_PROGRESS.PROGRESS_ERROR; RETURN; END_IF


CASE _eState
OF
  E_PROGRESS.PROGRESS_INIT:
    IF Execute
    THEN
      _nErrorId               := 0;
      _eState                 := E_PROGRESS.PROGRESS_BUSY;

      IF NOT __ISVALIDREF(_Master)
      THEN
        _nErrorId             := 666;
        _eState               := E_PROGRESS.PROGRESS_ERROR;

      ELSIF (_Mover.NcToPlc.ModuloActPos > stGearData.rModuloSyncPosSlave + stMoveData.rDelta)
      THEN
        _nErrorId             := 667;
        _eState               := E_PROGRESS.PROGRESS_ERROR;
      END_IF
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_BUSY:
    _eState                   := E_PROGRESS.PROGRESS_PREPARE;

    _fbPower.Override         := stMoveData.rOverride;

    _fbGearInPosCa(
        Master                := _Master, 
        Slave                 := _Mover, 
        Execute               := FALSE, 
        ContinuousUpdate      := TRUE, 
        RatioNumerator        := stGearData.rGearNumerator, 
        RatioDenumerator      := stGearData.iGearDenumerator, 

        MasterSyncPosition    := _Master.NcToPlc.ActPos 
                               + stGearData.rDeltaToMasterPos,                            // absolute position

        SlaveSyncPosition     := ABS(_Mover.NcToPlc.ModuloActTurns)*RailLength
                               + stGearData.rModuloSyncPosSlave,                          // absolute position

        SyncStrategy          := Tc3_Mc3Definitions.MC_SYNC_STRATEGY.mcSyncStrategySlow,  // minimal movement with this strategy 
        SyncMode              := Tc3_Mc3Definitions.MC_SYNC_MODE.mcSyncModeNonModulo,     // all positions as absolute value
        MasterStartDistance   := stGearData.rMasterStartDistance,                         // if <> 0 --> master has to move before this fb does anything
        Velocity              := stMoveData.rVelo, 
        Acceleration          := stMoveData.rAcc, 
        Deceleration          := stMoveData.rAcc, 
        Jerk                  := stMoveData.rJerk, 
        Gap                   := stMoveData.rGap, 
        BufferMode            := Tc3_Mc3Definitions.MC_BUFFER_MODE.mcAborting);
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_PREPARE:
    _fbGearInPosCa(
        Master                := _Master, 
        Slave                 := _Mover, 
        Execute               := TRUE, 
        ContinuousUpdate      := TRUE);

    IF _fbGearInPosCa.Error
    THEN
      _nErrorId               := _fbGearInPosCa.ErrorId;
      _eState                 := E_PROGRESS.PROGRESS_ERROR;

    ELSIF _fbGearInPosCa.CommandAborted
    THEN
      _eState                 := E_PROGRESS.PROGRESS_OCCUPIED;

    ELSIF _fbGearInPosCa.InSync
    THEN
      _eState                 := E_PROGRESS.PROGRESS_DONE;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_DONE:
    _fbGearInPosCa(
        Master                := _Master, 
        Slave                 := _Mover, 
        Execute               := FALSE, 
        ContinuousUpdate      := TRUE);
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------

GearInPosCa                   := _eState;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="GearOut" Id="{411919f5-4987-48bb-8e53-5e169947f507}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD GearOut : E_PROGRESS
VAR_INPUT
  Execute             : BOOL;
END_VAR
VAR_INST
  _nErrorId           : UDINT;
  _eState             : E_PROGRESS;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Execute THEN _eState  := E_PROGRESS.PROGRESS_INIT; END_IF 
IF NOT Check() THEN GearOut  := E_PROGRESS.PROGRESS_ERROR; RETURN; END_IF


CASE _eState
OF
  E_PROGRESS.PROGRESS_INIT:
    IF Execute
    THEN
      _nErrorId               := 0;
      _eState                 := E_PROGRESS.PROGRESS_BUSY;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_BUSY:
    _eState                   := E_PROGRESS.PROGRESS_PREPARE;
    _fbGearOut(
            Slave             := _Mover, 
            Execute           := FALSE);
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_PREPARE:
    _fbGearOut(
            Slave             := _Mover, 
            Execute           := TRUE);

    IF _fbGearOut.Error
    THEN
      _eState                 := E_PROGRESS.PROGRESS_ERROR;

    ELSIF (_Mover.NcToPlc.CoupleState = 0)
    THEN
      _eState                 := E_PROGRESS.PROGRESS_DONE;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_DONE:
    _fbGearOut(
            Slave             := _Mover, 
            Execute           := FALSE);
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------

GearOut                       := _eState;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetMoverInfo" Id="{bbb15385-1902-4578-9303-e7ab38803d0e}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD GetMoverInfo : ST_MOVER_INFO
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Check() THEN RETURN; END_IF

GetMoverInfo := _stInfo;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Halt" Id="{52f49b15-c575-44ca-8fbc-d254303a0305}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD Halt : E_PROGRESS
VAR_INPUT
  Execute             : BOOL;
  stMoveData          : ST_MOVE_DATA;
END_VAR
VAR_INST
  _nErrorId           : UDINT;
  _eState             : E_PROGRESS;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Execute THEN _eState   := E_PROGRESS.PROGRESS_INIT; END_IF 
IF NOT Check() THEN Halt      := E_PROGRESS.PROGRESS_ERROR; RETURN; END_IF


CASE _eState
OF
  E_PROGRESS.PROGRESS_INIT:
    IF Execute
    THEN
      _nErrorId               := 0;
      _eState                 := E_PROGRESS.PROGRESS_BUSY;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_BUSY:
    _eState                   := E_PROGRESS.PROGRESS_PREPARE;
    _fbHalt(
            Axis              := _Mover, 
            Execute           := FALSE, 
            Deceleration      := stMoveData.rAcc, 
            Jerk              := stMoveData.rJerk, 
            BufferMode        := Tc2_MC2.MC_BufferMode.MC_Aborting);
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_PREPARE:
    _fbHalt(Axis              := _Mover, 
            Execute           := TRUE, 
            Deceleration      := stMoveData.rAcc, 
            Jerk              := stMoveData.rJerk, 
            BufferMode        := Tc2_MC2.MC_BufferMode.MC_Aborting);

    IF _fbHalt.Error
    THEN
      _nErrorId               := _fbHalt.ErrorID;
      _eState                 := E_PROGRESS.PROGRESS_ERROR;

    ELSIF NOT _Mover.Status.Moving
    THEN
      _eState                 := E_PROGRESS.PROGRESS_DONE;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_DONE:
    _fbHalt(
            Axis              := _Mover, 
            Execute           := FALSE);
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------

Halt                          := _eState;

]]></ST>
      </Implementation>
    </Method>
    <Property Name="LastGap" Id="{099d07cf-7852-48b5-93bc-0ad852e4fee9}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY LastGap : REFERENCE to lreal]]></Declaration>
      <Set Name="Set" Id="{6965c20b-6bbb-4fa1-a09b-72d73ac4d9f5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_rLastGap REF= LastGap;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="LastPosition" Id="{5d99a57b-e70a-4724-9b6f-1cd26cd4c7c8}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY LastPosition : REFERENCE to LREAL]]></Declaration>
      <Set Name="Set" Id="{751da3bf-726d-49ab-931a-603ef26f3ff9}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_rLastPosition REF= LastPosition;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Master" Id="{3cab6809-035f-4c1b-9a6c-97c27cf964b6}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY Master : REFERENCE to AXIS_REF]]></Declaration>
      <Set Name="Set" Id="{7d2ca700-6d24-4682-95e3-34c8705a3cf3}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Master REF= Master;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Mover" Id="{61b19f47-284c-48c3-9aaf-17752db8d57a}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY Mover : REFERENCE to AXIS_REF]]></Declaration>
      <Set Name="Set" Id="{995dd3b9-c568-4475-8c00-1cede25487bf}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Mover REF= Mover;

]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="MoveToPosCa" Id="{fc254836-b444-49d1-a7d0-37160e8077c3}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD MoveToPosCa : E_PROGRESS
VAR_INPUT
  Execute             : BOOL;
  stMoveData          : ST_MOVE_DATA;
END_VAR
VAR_INST
  _nErrorId           : UDINT;
  _rPos               : LREAL;
  _eState             : E_PROGRESS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Execute THEN _eState  := E_PROGRESS.PROGRESS_INIT; END_IF 
IF NOT Check() THEN MoveToPosCa   := E_PROGRESS.PROGRESS_ERROR; RETURN; END_IF


CASE _eState
OF
  E_PROGRESS.PROGRESS_INIT:
    IF Execute
    THEN
      _nErrorId               := 0;
      _eState                 := E_PROGRESS.PROGRESS_BUSY;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_BUSY:
    _eState                   := E_PROGRESS.PROGRESS_PREPARE;
    _fbPower.Override         := stMoveData.rOverride;

    _rPos                     := ABS(_Mover.NcToPlc.ModuloActTurns)*RailLength + stMoveData.rPos;
    _rLastPosition            := _rPos;
    _rLastGap                 := stMoveData.rGap;

    _fbMoveAbsCa( 
            Axis              := _Mover, 
            Execute           := FALSE, 
            ContinuousUpdate  := TRUE, 
            Position          := _rPos,
            Velocity          := stMoveData.rVelo, 
            Acceleration      := stMoveData.rAcc, 
            Deceleration      := stMoveData.rAcc, 
            Jerk              := stMoveData.rJerk, 
            Gap               := stMoveData.rGap, 
            BufferMode        := Tc3_Mc3Definitions.MC_BUFFER_MODE.mcAborting);
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_PREPARE:
    _fbMoveAbsCa( 
            Axis              := _Mover, 
            Execute           := TRUE, 
            ContinuousUpdate  := TRUE, 
            Position          := _rPos,
            Velocity          := stMoveData.rVelo, 
            Acceleration      := stMoveData.rAcc, 
            Deceleration      := stMoveData.rAcc, 
            Jerk              := stMoveData.rJerk, 
            Gap               := stMoveData.rGap, 
            BufferMode        := Tc3_Mc3Definitions.MC_BUFFER_MODE.mcAborting);

    IF _fbMoveAbsCa.Error
    THEN
      _nErrorId               := _fbMoveAbsCa.ErrorId;
      _eState                 := E_PROGRESS.PROGRESS_ERROR;

    ELSIF _fbMoveAbsCa.Active
    THEN
      _eState                 := E_PROGRESS.PROGRESS_WORKING;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_WORKING:
    _fbMoveAbsCa(
          Axis              := _Mover);

    IF _fbMoveAbsCa.Error
    THEN
      _nErrorId             := _fbMoveAbsCa.ErrorId;
      _eState               := E_PROGRESS.PROGRESS_ERROR;

    ELSIF (_Mover.NcToPlc.ActPos > _fbMoveAbsCa.Position - stMoveData.rDelta) AND
          (_Mover.NcToPlc.ActPos < _fbMoveAbsCa.Position + stMoveData.rDelta)
    THEN
      IF NOT _Mover.Status.Moving
      THEN
        _eState               := E_PROGRESS.PROGRESS_DONE;
      END_IF
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_ERROR,
  E_PROGRESS.PROGRESS_DONE:
    _fbMoveAbsCa( 
            Axis              := _Mover, 
            Execute           := FALSE);
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------

MoveToPosCa                   := _eState;

]]></ST>
      </Implementation>
    </Method>
    <Property Name="RailLength" Id="{f2763606-0890-4ea7-ab5a-a07525b03ec5}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY RailLength : LREAL]]></Declaration>
      <Get Name="Get" Id="{108c63e9-bc1c-4681-b457-cdeb7bc36614}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[RailLength := _RailLength;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{79a61b91-207f-40cc-a455-2c485eeca70d}">
        <Declaration><![CDATA[
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_RailLength := RailLength;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Reset" Id="{e2258453-948a-4b86-a011-bcad57131baf}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD Reset : E_PROGRESS
VAR_INPUT
  Execute             : BOOL;
END_VAR
VAR_INST
  _nErrorId           : UDINT;
  _eState             : E_PROGRESS;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Execute THEN _eState  := E_PROGRESS.PROGRESS_INIT; END_IF 
IF NOT Check() THEN Reset    := E_PROGRESS.PROGRESS_ERROR; RETURN; END_IF


CASE _eState
OF
  E_PROGRESS.PROGRESS_INIT:
    IF Execute
    THEN
      _stInfo.nErrorId        :=
      _nErrorId               := 0;
      _eState                 := E_PROGRESS.PROGRESS_BUSY;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_BUSY:
    _eState                   := E_PROGRESS.PROGRESS_PREPARE;
    _fbReset(
            Axis              := _Mover, 
            Execute           := FALSE);
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_PREPARE:
    _fbReset(
            Axis              := _Mover, 
            Execute           := TRUE);

    IF _fbReset.Error
    THEN
      _nErrorId               := _fbReset.ErrorID;
      _eState                 := E_PROGRESS.PROGRESS_ERROR;

    ELSIF NOT _Mover.Status.Moving
    THEN
      _eState                 := E_PROGRESS.PROGRESS_DONE;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_DONE:
    _fbReset(
            Axis              := _Mover, 
            Execute           := FALSE);
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------

Reset                         := _eState;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="SendToPosCa" Id="{3f55db9c-bbee-4583-a823-09f097675a6e}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD SendToPosCa : E_PROGRESS
VAR_INPUT
  Execute             : BOOL;
  stMoveData          : ST_MOVE_DATA;
END_VAR
VAR_INST
  _nErrorId           : UDINT;
  _rPos               : LREAL;
  _rStart             : LREAL;
  _eState             : E_PROGRESS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Execute THEN _eState  := E_PROGRESS.PROGRESS_INIT; END_IF 
IF NOT Check() THEN SendToPosCa   := E_PROGRESS.PROGRESS_ERROR; RETURN; END_IF


CASE _eState
OF
  E_PROGRESS.PROGRESS_INIT:
    IF Execute
    THEN
      _nErrorId               := 0;
      _rStart                 := _Mover.NcToPlc.ActPos;

      _eState                 := E_PROGRESS.PROGRESS_BUSY;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_BUSY:
    _eState                   := E_PROGRESS.PROGRESS_PREPARE;
    _fbPower.Override         := stMoveData.rOverride;

    _rPos                     := ABS(_Mover.NcToPlc.ModuloActTurns)*RailLength + stMoveData.rPos;
    _rLastPosition            := _rPos;
    _rLastGap                 := stMoveData.rGap;

    _fbMoveAbsCa( 
            Axis              := _Mover, 
            Execute           := FALSE, 
            ContinuousUpdate  := TRUE, 
            Position          := _rPos,
            Velocity          := stMoveData.rVelo, 
            Acceleration      := stMoveData.rAcc, 
            Deceleration      := stMoveData.rAcc, 
            Jerk              := stMoveData.rJerk, 
            Gap               := stMoveData.rGap, 
            BufferMode        := Tc3_Mc3Definitions.MC_BUFFER_MODE.mcAborting);
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_PREPARE:
    _fbMoveAbsCa( 
            Axis              := _Mover, 
            Execute           := TRUE, 
            ContinuousUpdate  := TRUE, 
            Position          := _rPos,
            Velocity          := stMoveData.rVelo, 
            Acceleration      := stMoveData.rAcc, 
            Deceleration      := stMoveData.rAcc, 
            Jerk              := stMoveData.rJerk, 
            Gap               := stMoveData.rGap, 
            BufferMode        := Tc3_Mc3Definitions.MC_BUFFER_MODE.mcAborting);

    IF _fbMoveAbsCa.Error
    THEN
      _nErrorId               := _fbMoveAbsCa.ErrorId;
      _eState                 := E_PROGRESS.PROGRESS_ERROR;

    ELSIF _fbMoveAbsCa.Active
    THEN
      _eState                 := E_PROGRESS.PROGRESS_WORKING;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_WORKING:
    _fbMoveAbsCa(
            Axis              := _Mover);

    IF _fbMoveAbsCa.Error
    THEN
      _nErrorId               := _fbMoveAbsCa.ErrorId;
      _eState                 := E_PROGRESS.PROGRESS_ERROR;

    ELSIF (_Mover.NcToPlc.ActPos > _rStart + stMoveData.rDistance)
    THEN
      _eState                 := E_PROGRESS.PROGRESS_DONE;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_ERROR,
  E_PROGRESS.PROGRESS_DONE:
    _fbMoveAbsCa( 
            Axis              := _Mover, 
            Execute           := FALSE);
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------

SendToPosCa                   := _eState;

]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="fb_Mover_withOutInterface">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="fb_Mover_withOutInterface.Check">
      <LineId Id="80" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="13" Count="4" />
      <LineId Id="35" Count="0" />
      <LineId Id="52" Count="10" />
      <LineId Id="19" Count="0" />
      <LineId Id="21" Count="4" />
      <LineId Id="63" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Mover_withOutInterface.Cycle">
      <LineId Id="109" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="96" Count="2" />
      <LineId Id="13" Count="1" />
      <LineId Id="16" Count="1" />
      <LineId Id="19" Count="0" />
      <LineId Id="23" Count="7" />
      <LineId Id="111" Count="0" />
      <LineId Id="31" Count="1" />
      <LineId Id="46" Count="7" />
      <LineId Id="21" Count="0" />
      <LineId Id="101" Count="3" />
      <LineId Id="22" Count="0" />
      <LineId Id="58" Count="2" />
      <LineId Id="62" Count="1" />
      <LineId Id="65" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="66" Count="2" />
      <LineId Id="93" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="75" Count="11" />
      <LineId Id="20" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Mover_withOutInterface.Disable">
      <LineId Id="209" Count="9" />
      <LineId Id="220" Count="8" />
      <LineId Id="274" Count="0" />
      <LineId Id="232" Count="5" />
      <LineId Id="242" Count="4" />
      <LineId Id="251" Count="2" />
      <LineId Id="258" Count="5" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Mover_withOutInterface.Enable">
      <LineId Id="209" Count="9" />
      <LineId Id="220" Count="8" />
      <LineId Id="274" Count="0" />
      <LineId Id="232" Count="5" />
      <LineId Id="242" Count="4" />
      <LineId Id="251" Count="2" />
      <LineId Id="258" Count="5" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Mover_withOutInterface.GearIn">
      <LineId Id="250" Count="10" />
      <LineId Id="305" Count="0" />
      <LineId Id="307" Count="1" />
      <LineId Id="358" Count="0" />
      <LineId Id="309" Count="0" />
      <LineId Id="311" Count="0" />
      <LineId Id="261" Count="7" />
      <LineId Id="313" Count="11" />
      <LineId Id="270" Count="5" />
      <LineId Id="326" Count="3" />
      <LineId Id="331" Count="0" />
      <LineId Id="330" Count="0" />
      <LineId Id="332" Count="1" />
      <LineId Id="336" Count="2" />
      <LineId Id="334" Count="0" />
      <LineId Id="285" Count="2" />
      <LineId Id="339" Count="1" />
      <LineId Id="357" Count="0" />
      <LineId Id="342" Count="3" />
      <LineId Id="354" Count="2" />
      <LineId Id="288" Count="1" />
    </LineIds>
    <LineIds Name="fb_Mover_withOutInterface.GearInPosCa">
      <LineId Id="203" Count="10" />
      <LineId Id="251" Count="2" />
      <LineId Id="276" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="338" Count="0" />
      <LineId Id="334" Count="3" />
      <LineId Id="250" Count="0" />
      <LineId Id="214" Count="7" />
      <LineId Id="282" Count="0" />
      <LineId Id="256" Count="8" />
      <LineId Id="281" Count="0" />
      <LineId Id="265" Count="0" />
      <LineId Id="277" Count="1" />
      <LineId Id="266" Count="0" />
      <LineId Id="279" Count="1" />
      <LineId Id="267" Count="8" />
      <LineId Id="223" Count="5" />
      <LineId Id="284" Count="4" />
      <LineId Id="290" Count="0" />
      <LineId Id="289" Count="0" />
      <LineId Id="291" Count="2" />
      <LineId Id="295" Count="0" />
      <LineId Id="294" Count="0" />
      <LineId Id="296" Count="0" />
      <LineId Id="299" Count="0" />
      <LineId Id="332" Count="0" />
      <LineId Id="300" Count="0" />
      <LineId Id="302" Count="0" />
      <LineId Id="297" Count="0" />
      <LineId Id="303" Count="0" />
      <LineId Id="238" Count="2" />
      <LineId Id="304" Count="7" />
      <LineId Id="326" Count="2" />
      <LineId Id="241" Count="1" />
      <LineId Id="329" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Mover_withOutInterface.GearOut">
      <LineId Id="250" Count="18" />
      <LineId Id="361" Count="2" />
      <LineId Id="270" Count="5" />
      <LineId Id="365" Count="1" />
      <LineId Id="372" Count="0" />
      <LineId Id="331" Count="0" />
      <LineId Id="330" Count="0" />
      <LineId Id="332" Count="1" />
      <LineId Id="373" Count="0" />
      <LineId Id="336" Count="2" />
      <LineId Id="334" Count="0" />
      <LineId Id="285" Count="2" />
      <LineId Id="339" Count="1" />
      <LineId Id="357" Count="0" />
      <LineId Id="374" Count="2" />
      <LineId Id="354" Count="2" />
      <LineId Id="288" Count="1" />
    </LineIds>
    <LineIds Name="fb_Mover_withOutInterface.GetMoverInfo">
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Mover_withOutInterface.Halt">
      <LineId Id="131" Count="10" />
      <LineId Id="148" Count="7" />
      <LineId Id="201" Count="0" />
      <LineId Id="206" Count="0" />
      <LineId Id="202" Count="3" />
      <LineId Id="168" Count="5" />
      <LineId Id="208" Count="5" />
      <LineId Id="179" Count="1" />
      <LineId Id="225" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="182" Count="9" />
      <LineId Id="221" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="222" Count="0" />
      <LineId Id="196" Count="3" />
      <LineId Id="129" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Mover_withOutInterface.LastGap.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Mover_withOutInterface.LastPosition.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Mover_withOutInterface.Master.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Mover_withOutInterface.Mover.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Mover_withOutInterface.MoveToPosCa">
      <LineId Id="207" Count="10" />
      <LineId Id="224" Count="7" />
      <LineId Id="296" Count="2" />
      <LineId Id="323" Count="1" />
      <LineId Id="299" Count="11" />
      <LineId Id="244" Count="5" />
      <LineId Id="311" Count="10" />
      <LineId Id="254" Count="2" />
      <LineId Id="325" Count="0" />
      <LineId Id="257" Count="0" />
      <LineId Id="326" Count="0" />
      <LineId Id="258" Count="9" />
      <LineId Id="340" Count="1" />
      <LineId Id="364" Count="2" />
      <LineId Id="368" Count="0" />
      <LineId Id="367" Count="0" />
      <LineId Id="342" Count="3" />
      <LineId Id="360" Count="3" />
      <LineId Id="358" Count="0" />
      <LineId Id="272" Count="2" />
      <LineId Id="330" Count="1" />
      <LineId Id="369" Count="0" />
      <LineId Id="332" Count="6" />
      <LineId Id="275" Count="0" />
      <LineId Id="205" Count="0" />
      <LineId Id="371" Count="0" />
      <LineId Id="370" Count="0" />
    </LineIds>
    <LineIds Name="fb_Mover_withOutInterface.RailLength.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="fb_Mover_withOutInterface.RailLength.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="fb_Mover_withOutInterface.Reset">
      <LineId Id="129" Count="8" />
      <LineId Id="193" Count="0" />
      <LineId Id="138" Count="11" />
      <LineId Id="153" Count="7" />
      <LineId Id="191" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="190" Count="0" />
      <LineId Id="166" Count="5" />
      <LineId Id="192" Count="0" />
      <LineId Id="173" Count="16" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Mover_withOutInterface.SendToPosCa">
      <LineId Id="221" Count="9" />
      <LineId Id="323" Count="1" />
      <LineId Id="231" Count="67" />
      <LineId Id="300" Count="0" />
      <LineId Id="303" Count="0" />
      <LineId Id="305" Count="16" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>