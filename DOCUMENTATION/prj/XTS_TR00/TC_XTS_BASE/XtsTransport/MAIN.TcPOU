<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{f2e9720a-bda2-4399-8c7d-d9b6e11179c8}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	bInit 				: BOOL;
	            		
	nMover 				: UINT;
	nStation 			: UINT;
	
	fbSimpleCaMove		: FB_SimpleCaExample;
  
	i					: UINT;
	bTest				: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Init Station Parameter
	IF NOT bInit
	THEN
		// STATION 1
		GVL_XTS.StationParameter[1].PosWait               :=    350.0; // sending station is using this position to send mover to
		GVL_XTS.StationParameter[1].PosEnd                :=    599.0; // mover has to pass this position for Station to finish outfeed
		
		GVL_XTS.StationParameter[1].ConfiguredStopCount   :=      2;
		GVL_XTS.StationParameter[1].StopPosition[1]       :=    530.0;  // station infeed to stop position
		GVL_XTS.StationParameter[1].StopPosition[2]       :=    495.0;
		
		GVL_XTS.StationParameter[1].Gap                   :=     85.0;
		GVL_XTS.StationParameter[1].Velo                  :=   1500.0;
		GVL_XTS.StationParameter[1].AccDec                :=  15000.0;
		GVL_XTS.StationParameter[1].Jerk                  := 400000.0;
		
		
		// STATION 2
		GVL_XTS.StationParameter[2].PosWait               :=   1100.0;
		GVL_XTS.StationParameter[1].PosEnd                :=   1550.0;
		
		GVL_XTS.StationParameter[2].ConfiguredStopCount   :=      3;
		GVL_XTS.StationParameter[2].StopPosition[1]       :=   1250.0;
		GVL_XTS.StationParameter[2].StopPosition[2]       :=   1300.0;
		GVL_XTS.StationParameter[2].StopPosition[3]       :=   1350.0;
		
		GVL_XTS.StationParameter[2].Gap                   :=     85.0;
		GVL_XTS.StationParameter[2].Velo                  :=   1500.0;
		GVL_XTS.StationParameter[2].AccDec                :=  15000.0;
		GVL_XTS.StationParameter[2].Jerk                  := 400000.0;
		
		
		bInit := TRUE;
	END_IF


	// FB_XtsEnvironment
	//############################################################################	

 	CASE GVL_XTS.nInitTcIoXtsEnvironment OF
 		
	E_PROGRESS.PROGRESS_INVALID:		
		GVL_XTS.nInitTcIoXtsEnvironment := E_PROGRESS.PROGRESS_INIT;

	E_PROGRESS.PROGRESS_INIT:	// Set Properties
 		GVL_XTS.stXtsEnvironmentConfiguration.bEnableInitXpu := TRUE;	
 		GVL_XTS.stXtsEnvironmentConfiguration.bEnableInitInfoServer := TRUE;
 		GVL_XTS.stXtsEnvironmentConfiguration.bEnableInitCaGroup := FALSE;
 	
 		GVL_XTS.fbXtsEnvironment.P_XtsEnvironmentConfiguration := GVL_XTS.stXtsEnvironmentConfiguration;
 		
 		GVL_XTS.nInitTcIoXtsEnvironment := E_PROGRESS.PROGRESS_PREPARE;
 	
 	E_PROGRESS.PROGRESS_PREPARE:	// Init Environment	
 		IF GVL_XTS.fbXtsEnvironment.Init(TRUE) THEN
 			
 			GVL_XTS.nInitTcIoXtsEnvironment := E_PROGRESS.PROGRESS_CHECK;
 		
 		END_IF

 
 	E_PROGRESS.PROGRESS_CHECK:	//Check if init succeeded
			GVL_XTS.fbXtsEnvironment.Init(FALSE);
			
            //Check IsInitialized property
            IF GVL_XTS.fbXtsEnvironment.P_IsInitialized THEN
 
                  //Next Step 
                  GVL_XTS.nInitTcIoXtsEnvironment:= E_PROGRESS.PROGRESS_DONE;
           END_IF	

		   
	E_PROGRESS.PROGRESS_ERROR:	// Error Handler
			; 	   
		   
 	E_PROGRESS.PROGRESS_DONE: 	// Done 
 			;
 	END_CASE
 
 	IF NOT (GVL_XTS.nInitTcIoXtsEnvironment >= E_PROGRESS.PROGRESS_DONE) THEN
 		
 
 		// no processing, since not initialized
 		RETURN;
 		
 	END_IF
		
	//FB_VisuXtsDiag
	//############################################################################	
	GVL_XTS.fbXtsEnvironmentVisu.ipTcIoXtsEnvironment := GVL_XTS.fbXtsEnvironment;
	
	GVL_XTS.fbXtsEnvironmentVisu.Cycle();

	

	
	
	
	// 	CA-Group Class
	//############################################################################	
		// assignment
		GVL_XTS.CaGroup.AxisRef               REF= GVL_XTS.AxisRefMover;
		GVL_XTS.CaGroup.GroupRef              REF= GVL_XTS.CaGroupRef;
		
		// cyclic cal
		GVL_XTS.CaGroup.InfoCycle(TRUE); // read group status
	

	// Mover Class	
	//############################################################################	
		FOR nMover := 1 TO MAX_MOVER
		DO
			// assignment	
			GVL_XTS.Mover[nMover].Mover           REF= GVL_XTS.AxisRefMover[nMover];
			GVL_XTS.Mover[nMover].LastGap         REF= GVL_XTS.LastGap[nMover];
			GVL_XTS.Mover[nMover].LastPosition    REF= GVL_XTS.LastPosition[nMover];
			
			GVL_XTS.Mover[nMover].RailLength      := GVL_XTS.fbXtsEnvironment.XpuTcIo(1).TrackTcIo(1).GetLength();
			
			GVL_XTS.Mover[nMover].MoverInfo		REF= GVL_XTS.MoverInfo[nMover];
			
			// cyclic cal
			GVL_XTS.Mover[nMover].Cycle();  // call AXIS_REF()
			
			GVL_XTS.I_Mover[nMover]               := GVL_XTS.Mover[nMover]; // collect interface 
		END_FOR

	
	// Station Class
	//############################################################################	
		FOR nStation := 1 TO MAX_STATION
		DO
			// assignment
			GVL_XTS.Station[nStation].StationId   := nStation;
			
			GVL_XTS.I_Station[nStation]           := GVL_XTS.StationList[nStation]; // collect interface
			
			GVL_XTS.Station[nStation].ItfMover    := ADR(GVL_XTS.I_Mover);
			GVL_XTS.Station[nStation].ItfStations := ADR(GVL_XTS.I_Station);
			
			GVL_XTS.Station[nStation].Mover       := ADR(GVL_XTS.AxisRefMover);
			
			
			GVL_XTS.Station[nStation].StationParameter  := ADR(GVL_XTS.StationParameter);
			GVL_XTS.Station[nStation].MoverOffset       := ADR(GVL_XTS.MoverOffset);
			
			// cyclic cal
				// not necessary
				
		END_FOR
		
	
	// Simple Move example		
	//############################################################################	
		
	FOR i:= 1 TO Param.MAX_MOVER DO 
		fbSimpleCaMove.ipMover[i] := GVL_XTS.Mover[i]; 
	END_FOR
	fbSimpleCaMove.ipCaGroup := GVL_XTS.CaGroup;
	fbSimpleCaMove();


]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="216" Count="36" />
      <LineId Id="384" Count="0" />
      <LineId Id="253" Count="2" />
      <LineId Id="378" Count="0" />
      <LineId Id="386" Count="1" />
      <LineId Id="385" Count="0" />
      <LineId Id="257" Count="10" />
      <LineId Id="269" Count="13" />
      <LineId Id="388" Count="0" />
      <LineId Id="381" Count="0" />
      <LineId Id="380" Count="0" />
      <LineId Id="383" Count="0" />
      <LineId Id="382" Count="0" />
      <LineId Id="284" Count="23" />
      <LineId Id="389" Count="0" />
      <LineId Id="308" Count="8" />
      <LineId Id="390" Count="0" />
      <LineId Id="317" Count="18" />
      <LineId Id="391" Count="0" />
      <LineId Id="336" Count="21" />
      <LineId Id="392" Count="0" />
      <LineId Id="394" Count="0" />
      <LineId Id="393" Count="0" />
      <LineId Id="358" Count="6" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>