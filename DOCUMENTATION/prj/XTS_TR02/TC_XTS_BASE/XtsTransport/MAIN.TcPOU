<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{f2e9720a-bda2-4399-8c7d-d9b6e11179c8}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	bInit 				: BOOL := TRUE;
  eInit         : E_PROGRESS;

	            		
	nMover 				: UINT;

  eXpuState     : E_XPU_STATE;
  eXpuResult    : E_PROGRESS;
  eXpuCheck     : E_XPU_CHECK;

  sXpuState,
  sXpuResult,
  sXpuCheck,
  sXpuOpMode,
  sXpuMoverdetectionMode,
  sXpuMoverAssignement    : STRING;

  stXpuInfo     : ST_XPU_INFO;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
IF NOT bInit
THEN
  CASE eInit
  OF
    E_PROGRESS.PROGRESS_INVALID,
    E_PROGRESS.PROGRESS_DONE:
      eInit                           := E_PROGRESS.PROGRESS_BUSY;
      GVL_XTS.XpuCtrl.Cmd             := E_XPU_CTRL.XTS_CMD_NULL;

    E_PROGRESS.PROGRESS_BUSY:
      eInit                           := E_PROGRESS.PROGRESS_STARTUP;
      GVL_XTS.XpuCtrl.Cmd             := E_XPU_CTRL.XTS_CMD_INIT;

    E_PROGRESS.PROGRESS_STARTUP:
      IF (GVL_XTS.XpuState.State      = E_XPU_STATE.XTS_INIT + E_PROGRESS.PROGRESS_DONE)
      THEN
        eInit                         := E_PROGRESS.PROGRESS_PREPARE;
        GVL_XTS.XpuCtrl.Cmd           := E_XPU_CTRL.XTS_IDLE;
      END_IF

    E_PROGRESS.PROGRESS_PREPARE:
      bInit                           := TRUE;
      eInit                           := E_PROGRESS.PROGRESS_DONE;
  END_CASE
END_IF


// 	XPU environment
//############################################################################	
GVL_XTS.Xpu.XpuInstance               := 1;
GVL_XTS.Xpu.Ctrl                      REF= GVL_XTS.XpuCtrl;
GVL_XTS.Xpu.State                     REF= GVL_XTS.XpuState;
GVL_XTS.Xpu.CaGroupOID                := GVL_XTS.CaGroup.GroupInfo.CaGroupOID;

// cyclic call
GVL_XTS.Xpu();

	
// 	CA-Group Class
//############################################################################	
// assignment
GVL_XTS.CaGroup.AxisRef               REF= GVL_XTS.AxisRefMover;
GVL_XTS.CaGroup.GroupRef              REF= GVL_XTS.CaGroupRef;

// cyclic call
GVL_XTS.CaGroup.InfoCycle(TRUE); // read group status

// InfoData from group
GVL_XTS.CaGroupInfo                   := GVL_XTS.CaGroup.GroupInfo;

// Mover Class	
//############################################################################	
FOR nMover := 1 TO MAX_MOVER
DO
  // assignment	
  GVL_XTS.Mover[nMover].Mover           REF= GVL_XTS.AxisRefMover[nMover];  // hand over axis reference to Mover function block
  GVL_XTS.Mover[nMover].LastGap         REF= GVL_XTS.LastGap[nMover];       // hand over reference to last used gap value datafield
  GVL_XTS.Mover[nMover].LastPosition    REF= GVL_XTS.LastPosition[nMover];  // hand over reference to last position datafield
  
  GVL_XTS.Mover[nMover].RailLength      := GVL_XTS.Xpu.RailLength; // must be RailLength, automated access when XTS-Utility lib is added to project
  
  GVL_XTS.Mover[nMover].MoverInfo		    REF= GVL_XTS.MoverInfo[nMover];     // hand over refernence to mover info data (ActPos, SetPos, ...)

  // cyclic call
  GVL_XTS.Mover[nMover].Cycle();  // call AXIS_REF()
END_FOR

// Group state machine
GROUP();

// Mover state machine
MOVER();

// get enumerations from XPU for visu:
eXpuState                               := f_GetState(GVL_XTS.XpuState.State);
eXpuResult                              := f_GetProgress(GVL_XTS.XpuState.State);

eXpuCheck                               := GVL_XTS.XpuState.Check;

// display xpu state and result in visu
// get strings and info
sXpuState                               := TO_STRING(eXpuState);
sXpuResult                              := TO_STRING(eXpuResult);
sXpuCheck                               := TO_STRING(eXpuCheck);
stXpuInfo                               := GVL_XTS.Xpu.XpuInfo;

sXpuOpMode                              := GVL_XTS.Xpu.OpModeToString();
sXpuMoverdetectionMode                  := GVL_XTS.Xpu.IdDetectionModeToString();
sXpuMoverAssignement                    := GVL_XTS.Xpu.MoverPositionAssignementToString();
]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="434" Count="0" />
      <LineId Id="432" Count="0" />
      <LineId Id="435" Count="0" />
      <LineId Id="440" Count="0" />
      <LineId Id="442" Count="0" />
      <LineId Id="444" Count="1" />
      <LineId Id="450" Count="0" />
      <LineId Id="447" Count="0" />
      <LineId Id="449" Count="0" />
      <LineId Id="448" Count="0" />
      <LineId Id="454" Count="0" />
      <LineId Id="451" Count="0" />
      <LineId Id="453" Count="0" />
      <LineId Id="452" Count="0" />
      <LineId Id="455" Count="1" />
      <LineId Id="458" Count="0" />
      <LineId Id="457" Count="0" />
      <LineId Id="459" Count="0" />
      <LineId Id="461" Count="0" />
      <LineId Id="460" Count="0" />
      <LineId Id="462" Count="1" />
      <LineId Id="443" Count="0" />
      <LineId Id="439" Count="0" />
      <LineId Id="433" Count="0" />
      <LineId Id="421" Count="0" />
      <LineId Id="423" Count="1" />
      <LineId Id="428" Count="0" />
      <LineId Id="422" Count="0" />
      <LineId Id="425" Count="1" />
      <LineId Id="429" Count="0" />
      <LineId Id="427" Count="0" />
      <LineId Id="430" Count="1" />
      <LineId Id="306" Count="1" />
      <LineId Id="389" Count="0" />
      <LineId Id="308" Count="5" />
      <LineId Id="413" Count="0" />
      <LineId Id="314" Count="0" />
      <LineId Id="414" Count="0" />
      <LineId Id="315" Count="1" />
      <LineId Id="390" Count="0" />
      <LineId Id="317" Count="12" />
      <LineId Id="332" Count="0" />
      <LineId Id="399" Count="0" />
      <LineId Id="398" Count="0" />
      <LineId Id="400" Count="0" />
      <LineId Id="402" Count="0" />
      <LineId Id="401" Count="0" />
      <LineId Id="403" Count="0" />
      <LineId Id="500" Count="0" />
      <LineId Id="480" Count="0" />
      <LineId Id="501" Count="0" />
      <LineId Id="499" Count="0" />
      <LineId Id="531" Count="0" />
      <LineId Id="530" Count="0" />
      <LineId Id="505" Count="0" />
      <LineId Id="472" Count="0" />
      <LineId Id="481" Count="0" />
      <LineId Id="474" Count="0" />
      <LineId Id="478" Count="1" />
      <LineId Id="483" Count="0" />
      <LineId Id="507" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="489" Count="2" />
    </LineIds>
  </POU>
</TcPlcObject>