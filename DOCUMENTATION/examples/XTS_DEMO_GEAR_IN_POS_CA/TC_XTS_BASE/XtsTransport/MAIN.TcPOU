<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="MAIN" Id="{f2e9720a-bda2-4399-8c7d-d9b6e11179c8}" SpecialFunc="None">
    <Declaration><![CDATA[//---------------------------------------------------------------------------------------------------------------
//
//  HAUD 2024.10.02
//
//  - XTS_DEMO_GEAR_IN_POS_CA
//
//  - XTS_TRANSPORT_LAYER
//  - transport layer members:
//    - CaGroup
//      - access to Group functions
//
//    - Mover
//      - access to MC and CA motion functions
//
//    - Xpu (ProcessingUnit)
//      - access to TcCOM Objects in Environment
//
//    - Transport Control Unit
//      - coordinates members to get XTS in defined states
//
//  - global datafields for mrmbers in GVL_XTS namespace
//  - global interface datafields for use in members
//  - structures are assigned by reference for every member
//
//---------------------------------------------------------------------------------------------------------------
// HAUD 2024 05 29
//
//    XTS_TRANSPORT_LAYER project
//    
//    MIT License
//    
//    Copyright (c) 2024 HAUD
//    
//    Permission is hereby granted, free of charge, to any person obtaining a copy
//    of this software and associated documentation files (the "Software"), to deal
//    in the Software without restriction, including without limitation the rights
//    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//    copies of the Software, and to permit persons to whom the Software is
//    furnished to do so, subject to the following conditions:
//    
//    The above copyright notice and this permission notice shall be included in all
//    copies or substantial portions of the Software.
//    
//    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//    SOFTWARE.
//---------------------------------------------------------------------------------------------------------------
PROGRAM MAIN
VAR
	bInit 				: BOOL;
  eInit         : E_PROGRESS;

  nStation,
	nMover,
  nMoverSelected,
  nStationSelected,
  nStationParameter   : UINT;

  sStationText        : STRING(30);

  eTransportState     : E_XTS_TRANSPORT_STATE;
  eTransportResult    : E_PROGRESS;

  eXpuState           : E_XPU_STATE;
  eXpuResult          : E_PROGRESS;
  eXpuCheck           : E_XPU_CHECK;

  eMoverState         : E_MOVER_STATE;
  eMoverResult        : E_PROGRESS;

  sCaGroupState,
  sTransportState,
  sTransportCheck,
  sTransportResult,
  sXpuState,
  sXpuResult,
  sXpuCheck,
  sXpuOpMode,
  sXpuMoverdetectionMode,
  sXpuMoverAssignement,
  sMoverState,
  sMoverResult,
  sStationState,
  sStationStateMask,
  sStationCtrlMask        : STRING;

  bStationEnable,
  bStationEnter,
  bStationStart,
  bStationDone,
  bStationOut,
  bStationGone            : BOOL;

  tStationSelectedQueue   : ARRAY[1..MAX_LIST_NODES] OF ST_STATION_MOVER_DATA;

  tonWriteLog             : Tc2_Standard.TON;
  tWriteLog               : TIME := T#5S;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//############################################################################
// Local time; used for timestamps
//############################################################################
GVL_MSG.fbLocalTime(
                    sLocalTime                => GVL_MSG.sLocalTime, 
                    dtLocalTime               => GVL_MSG.dtLocalTime);
//############################################################################

//############################################################################
// 	example for init sequence
//############################################################################	
IF NOT bInit
THEN
  CASE eInit
  OF
    E_PROGRESS.PROGRESS_INVALID,
    E_PROGRESS.PROGRESS_DONE:         // clear command interface
      eInit                                   := E_PROGRESS.PROGRESS_BUSY;
      GVL_XTS.XpuCtrl.Cmd                     := E_XPU_CTRL.XTS_CMD_NULL;
      GVL_MSG.MessageLevelXpu                 := GVL_MSG.MessageLevel;
      GVL_XTS.CaGroup.MessageLevel            := GVL_MSG.MessageLevel;
      FOR nStation := 1 TO MAX_STATION
      DO
        GVL_MSG.MessageLevelStations[nStation]:= GVL_MSG.MessageLevel;
      END_FOR
      FOR nMover := 1 TO MAX_MOVER
      DO
        GVL_MSG.MessageLevelMovers[nMover]    := GVL_MSG.MessageLevel;
      END_FOR


    E_PROGRESS.PROGRESS_BUSY:         // init Xpu, ProcessingUnit, MotorModules
      eInit                                   := E_PROGRESS.PROGRESS_PREPARE;
      GVL_XTS.XpuCtrl.Cmd                     := E_XPU_CTRL.XTS_CMD_INIT;

    E_PROGRESS.PROGRESS_PREPARE:      // wait for init to be done
      IF (GVL_XTS.XpuState.State      = E_XPU_STATE.XTS_INIT + E_PROGRESS.PROGRESS_DONE)
      THEN
        eInit                                 := E_PROGRESS.PROGRESS_STARTUP;
        GVL_XTS.XpuCtrl.Cmd                   := E_XPU_CTRL.XTS_IDLE;
      END_IF

    E_PROGRESS.PROGRESS_STARTUP:      // assign mover interfaces
      eInit                                   := E_PROGRESS.PROGRESS_CHECK;
      FOR nMover := 1 TO MAX_MOVER
      DO
        GVL_XTS.MoverItf[nMover]              := GVL_XTS.Mover[nMover];
      END_FOR

    E_PROGRESS.PROGRESS_CHECK:        // assign CaGroup interface
      eInit                                   := E_PROGRESS.PROGRESS_OCCUPIED;
      GVL_XTS.CaGroupItf                      := GVL_XTS.CaGroup;

    E_PROGRESS.PROGRESS_OCCUPIED:     // StartStation for XtsTransportCtrl.Cmd := E_XTS_TRANSPORT_CTRL.CMD_TRANSPORT_START;
      eInit                                   := E_PROGRESS.PROGRESS_WORKING;
      // where to start?
      GVL_XTS.XtsTransport.StartStationIndex  := 0; // no stations in use in this example, therefore no StartStation

      // IF you use stations, initialize them here, before StationStart is initialized!

    E_PROGRESS.PROGRESS_WORKING:
      // Start Position parameters
      GVL_XTS.StationStart.rPosWait           :=     10.0; // this value may differ from the GVL_XTS.StationParameter[StartStationIndex], IF it differs, you MUST have room for positive movement to GVL_XTS.StationParameter[StartStationIndex].rWaitPos
      GVL_XTS.StationStart.rGap               :=    250.0; // may differ, or just copy from GVL_XTS.StationParameter[StartStationIndex]
      GVL_XTS.StationStart.rVelo              :=    750.0; // may differ, or just copy from GVL_XTS.StationParameter[StartStationIndex]
      GVL_XTS.StationStart.rAccDec            :=  12000.0; // may differ, or just copy from GVL_XTS.StationParameter[StartStationIndex]
      GVL_XTS.StationStart.rJerk              := 400000.0; // may differ, or just copy from GVL_XTS.StationParameter[StartStationIndex], the movements are more robust if you keep this value in a narrow range, since jumps lead to adjusting movements within the CA Group

      IF (GVL_XTS.XtsTransport.StartStationIndex > 0) AND
         (GVL_XTS.XtsTransport.StartStationIndex < MAX_STATION+1)
      THEN
        GVL_XTS.StationStart.nConfiguredStopCount := GVL_XTS.StationParameter[GVL_XTS.XtsTransport.StartStationIndex].nConfiguredStopCount;
      END_IF

      bInit                                           := TRUE;
      eInit                                           := E_PROGRESS.PROGRESS_DONE;
  END_CASE
END_IF

//############################################################################
// 	XTS Transport Unit
//############################################################################
//  - main control function block for transport layer
//  - requires access to member controls
//    - Xpu
//    - CaGroup
//    - Mover
//    - Station Control
//    - Station LinkedList Interface
//############################################################################
//
// cyclic call
GVL_XTS.XtsTransport();

// main control
GVL_XTS.XtsTransport.Ctrl               REF= GVL_XTS.XtsTransportCtrl;   // main control
GVL_XTS.XtsTransport.State              REF= GVL_XTS.XtsTransportState;  // main state
                                        
// member controls                      
GVL_XTS.XtsTransport.XpuCtrl            REF= GVL_XTS.XpuCtrl;
GVL_XTS.XtsTransport.XpuState           REF= GVL_XTS.XpuState;
GVL_XTS.XtsTransport.XpuInfo            REF= GVL_XTS.XpuInfo;
                                        
GVL_XTS.XtsTransport.GroupItf           :=   GVL_XTS.CaGroupItf;
GVL_XTS.XtsTransport.GroupInfo          REF= GVL_XTS.CaGroupInfo;
                                        
GVL_XTS.XtsTransport.MoverItf           REF= GVL_XTS.MoverItf;
GVL_XTS.XtsTransport.MoverInfo          REF= GVL_XTS.MoverInfo;
GVL_XTS.XtsTransport.MoverLastPosition  REF= GVL_XTS.LastPosition;
GVL_XTS.XtsTransport.MoverLastGap       REF= GVL_XTS.LastGap;
                                        
GVL_XTS.XtsTransport.StationStart       REF= GVL_XTS.StationStart;      // start position for E_XTS_TRANSPORT_CTRL.CMD_TRANSPORT_START
GVL_XTS.XtsTransport.StationCtrlItf     REF= GVL_XTS.StationCtrlItf;    // station interfaces are required for accessing station methods
GVL_XTS.XtsTransport.StationListsItf    REF= GVL_XTS.StationListItf;    // list interface is required for access to linked list methods
//############################################################################



//############################################################################
// 	XTS Stations
//############################################################################	
FOR nStation := 1 TO MAX_STATION
DO
  GVL_XTS.Station[nStation].StationId   := nStation;
  GVL_XTS.Station[nStation].MessageLevel:= GVL_MSG.MessageLevelStations[nStation];

  GVL_XTS.StationListItf[nStation]      := GVL_XTS.StationList[nStation];   // interfaces for list methods
  GVL_XTS.StationCtrlItf[nStation]      := GVL_XTS.Station[nStation];       // interfaces for station methods

  GVL_XTS.Station[nStation].Ctrl        REF= GVL_XTS.StationCtrl;           // station ctrl from extern
  GVL_XTS.Station[nStation].State       REF= GVL_XTS.StationState;          // station state to extern

  GVL_XTS.Station[nStation].ItfStations REF= GVL_XTS.StationListItf;        // give every station all list interfaces for writing mover tickets
  GVL_XTS.Station[nStation].ItfMover    REF= GVL_XTS.MoverItf;              // give every station all mover interfaces for movement in / out of station
  GVL_XTS.Station[nStation].Mover       REF= GVL_XTS.AxisRefMover;          // AXIS_REF to read infos from
  GVL_XTS.Station[nStation].MoverOffset REF= GVL_XTS.PositionOffset;        // static offsets for all stations, all movers, all stop positions


  GVL_XTS.Station[nStation].StationParameter  REF= GVL_XTS.StationParameter;// give every station all station parameters for sending to WaitPos of target station

  // cyclic call
  GVL_XTS.Station[nStation].Cycle();                                        // cycle for handshaking with extern

  // Queue data for each station
  GVL_XTS.StationQueue[nStation]        := GVL_XTS.StationListItf[nStation].Data;
END_FOR
//############################################################################



//############################################################################
// 	XPU environment
//############################################################################	
GVL_XTS.Xpu.XpuInstance               :=   1;
GVL_XTS.Xpu.MessageLevel              :=   GVL_MSG.MessageLevelXpu;

GVL_XTS.Xpu.Ctrl                      REF= GVL_XTS.XpuCtrl;
GVL_XTS.Xpu.State                     REF= GVL_XTS.XpuState;
GVL_XTS.Xpu.XpuModuleInfoData         REF= GVL_XTS.XpuModules;

GVL_XTS.Xpu.CaGroupOID                :=   GVL_XTS.CaGroup.GroupInfo.CaGroupOID;

// cyclic call
GVL_XTS.Xpu();
GVL_XTS.XpuInfo                       :=   GVL_XTS.Xpu.XpuInfo;
//############################################################################


//############################################################################	
// 	CA-Group Class
//############################################################################	
// assignment
GVL_XTS.CaGroup.AxisRef               REF= GVL_XTS.AxisRefMover;
// Interface to Mover methods
GVL_XTS.CaGroup.MoverItf              REF= GVL_XTS.MoverItf; 

GVL_XTS.CaGroup.GroupRef              REF= GVL_XTS.CaGroupRef;

// cyclic call
GVL_XTS.CaGroup.InfoCycle(TRUE); // read group status

// InfoData from group
GVL_XTS.CaGroupInfo                   :=   GVL_XTS.CaGroup.GroupInfo;

// Interface of CaGroup
GVL_XTS.CaGroupItf                    :=   GVL_XTS.CaGroup;
//############################################################################


//############################################################################
// Mover Class	
//############################################################################	
FOR nMover := 1 TO MAX_MOVER
DO
  GVL_XTS.Mover[nMover].MoverId       :=   nMover;
  GVL_XTS.Mover[nMover].RailLength    :=   GVL_XTS.Xpu.RailLength;  // mover needs RailLength, in order to calc absolute position from modulo input
  GVL_XTS.Mover[nMover].MessageLevel  :=   GVL_MSG.MessageLevelMovers[nMover];

  GVL_XTS.Mover[nMover].Ctrl          REF= GVL_XTS.MoverCtrl;       // mover control from extern
  GVL_XTS.Mover[nMover].State         REF= GVL_XTS.MoverState;      // mover state to extern

  GVL_XTS.Mover[nMover].MoveData      REF= GVL_XTS.MoveData;        // dyn constraints for extern to write
  GVL_XTS.Mover[nMover].GearData      REF= GVL_XTS.GearData;        // GearIn/GearInPosCa data fro extern to write

  // assignment	
  GVL_XTS.Mover[nMover].Mover         REF= GVL_XTS.AxisRefMover[nMover];  // axis reference to Mover function block
  GVL_XTS.Mover[nMover].LastGap       REF= GVL_XTS.LastGap[nMover];       // reference to last used gap value datafield
  GVL_XTS.Mover[nMover].LastPosition  REF= GVL_XTS.LastPosition[nMover];  // reference to last position datafield

  GVL_XTS.Mover[nMover].MoverInfo		  REF= GVL_XTS.MoverInfo[nMover];     // refernence to mover info data (ActPos, SetPos, ...)

  GVL_XTS.MoverItf[nMover]            :=   GVL_XTS.Mover[nMover];

  GVL_XTS.Mover[nMover].Master        REF= GVL_APPLICATION.MasterAxis;    // GearInPosCa conveyer axis is master in this example

  // cyclic call
  GVL_XTS.Mover[nMover].Cycle();  // call AXIS_REF()
  GVL_XTS.Mover[nMover]();        // call Ctrl/State
END_FOR


//############################################################################


//############################################################################
// /logging
//############################################################################
tonWriteLog(IN:= TRUE, PT := tWriteLog);

IF (tonWriteLog.Q)
THEN
  MessageData.bWriteFile      := TRUE;
  tonWriteLog(IN:= FALSE);
END_IF

//-----------------------------------------------------------------------------------------------------------------
// write message list to file
//-----------------------------------------------------------------------------------------------------------------
MessageData(pList			        := ADR(GVL_MSG.Messages),
			      pLocalTime        := ADR(GVL_MSG.dtLocalTime), 
			      bBusy=> );

// clear write trigger
IF MessageData.bWriteFile AND
   MessageData.bDone
THEN
  MessageData.bWriteFile      := FALSE;
END_IF
//############################################################################
// logging/
//############################################################################



//############################################################################
// Visualization data	
//############################################################################	
// get enumerations from XPU for visu:
eTransportState                       := f_GetState   (GVL_XTS.XtsTransportState.State);
eTransportResult                      := f_GetProgress(GVL_XTS.XtsTransportState.State);

eXpuState                             := f_GetState   (GVL_XTS.XpuState.State);
eXpuResult                            := f_GetProgress(GVL_XTS.XpuState.State);

eXpuCheck                             := GVL_XTS.XpuState.Check;

// display xpu state and result in visu
// get strings and info
sCaGroupState                         := TO_STRING(GVL_XTS.CaGroupInfo.CaGroupState);

sTransportState                       := TO_STRING(eTransportState);
sTransportCheck                       := TO_STRING(GVL_XTS.XtsTransportState.Check);
sTransportResult                      := TO_STRING(eTransportResult);

sXpuState                             := TO_STRING(eXpuState);
sXpuResult                            := TO_STRING(eXpuResult);
sXpuCheck                             := TO_STRING(eXpuCheck);

sXpuOpMode                            := GVL_XTS.Xpu.OpModeToString();
sXpuMoverdetectionMode                := GVL_XTS.Xpu.IdDetectionModeToString();
sXpuMoverAssignement                  := GVL_XTS.Xpu.MoverPositionAssignementToString();

nMoverSelected                        := SEL((nMoverSelected<1), nMoverSelected, 1);
nMoverSelected                        := SEL((nMoverSelected>MAX_MOVER), nMoverSelected, MAX_MOVER);

nStationSelected                      := SEL((nStationSelected<1), nStationSelected, 1);
nStationSelected                      := SEL((nStationSelected>MAX_STATION), nStationSelected, MAX_STATION);

bStationEnable                        := SEL((GVL_XTS.StationCtrl[nStationSelected].eCmd = E_STATION_CTRL.STATION_ENABLE),        FALSE, TRUE);
bStationEnter                         := SEL((GVL_XTS.StationCtrl[nStationSelected].eCmd = E_STATION_CTRL.STATION_MOVER_ENTER),   FALSE, TRUE);
bStationStart                         := SEL((GVL_XTS.StationCtrl[nStationSelected].eCmd = E_STATION_CTRL.STATION_PROCESS_START), FALSE, TRUE);
bStationDone                          := SEL((GVL_XTS.StationCtrl[nStationSelected].eCmd = E_STATION_CTRL.STATION_PROCESS_DONE),  FALSE, TRUE);
bStationOut                           := SEL((GVL_XTS.StationCtrl[nStationSelected].eCmd = E_STATION_CTRL.STATION_MOVER_OUT),     FALSE, TRUE);
bStationGone                          := SEL((GVL_XTS.StationCtrl[nStationSelected].eCmd = E_STATION_CTRL.STATION_MOVER_GONE),    FALSE, TRUE);

eMoverState                           := f_GetState   (GVL_XTS.MoverState[nMoverSelected].State);
eMoverResult                          := f_GetProgress(GVL_XTS.MoverState[nMoverSelected].State);

sMoverState                           := TO_STRING(eMoverState);
sMoverResult                          := TO_STRING(eMoverResult);

sStationState                         := TO_STRING(GVL_XTS.StationState[nStationSelected].eState);
sStationStateMask                     := Tc2_Utilities.BYTE_TO_BINSTR(GVL_XTS.StationState[nStationSelected].nMask, 8);
sStationCtrlMask                      := Tc2_Utilities.BYTE_TO_BINSTR(GVL_XTS.StationCtrl[nStationSelected].nMask, 8);

tStationSelectedQueue                 := GVL_XTS.StationQueue[nStationSelected];

]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="3371" Count="306" />
      <LineId Id="491" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>