<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="GEAR_IN_POS_CA" Id="{cb292edd-e465-4cd4-a271-a37c7bf7625e}" SpecialFunc="None">
    <Declaration><![CDATA[//---------------------------------------------------------------------------------------------------------------
//
//  HAUD 2024.10.02
//
//  - simple program for GearInPosCa of mover and conveyer belt (MasterAxis)
//    - mover is geared in
//    - sync distance is checked
//    - mover is sent to target position
//---------------------------------------------------------------------------------------------------------------
PROGRAM GEAR_IN_POS_CA
VAR_INPUT
  bReset                : BOOL;
  bEnable               : BOOL;
END_VAR
VAR_OUTPUT
  bError                : BOOL;
END_VAR
VAR
  nErrorId              : UDINT;

  // this example checks the sync distance of the conveyer 
  rStartPositionConveyer,
  rTargetPositionMover  : LREAL;

  rSyncDistance         : LREAL;
  rSyncDistanceConveyer : LREAL := 225.0;

  nState                : UINT;
  nMover                : UINT;
  rtrigReset            : Tc2_Standard.R_TRIG;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[rtrigReset(CLK:= bReset);
IF rtrigReset.Q
THEN
  nState                       := 0;
  FOR nMover := 1 TO MAX_MOVER
  DO
    GVL_XTS.MoverCtrl[nMover].Cmd      := E_MOVER_CTRL.MOVER_NULL;
  END_FOR
END_IF





CASE nState OF
  0:
    IF bEnable AND NOT bReset
    THEN
      bError                        := FALSE;
      nErrorId                      := 0;
      nMover                        := 1;
      nState                        := 10;
    END_IF

  10:
    nState                          := 11;
    GVL_APPLICATION.MasterReset(
                      Axis          := GVL_APPLICATION.MasterAxis, 
                      Execute       := FALSE, 
                      Done=> , 
                      Busy=> , 
                      Error=> , 
                      ErrorID=> );

  11:
    GVL_APPLICATION.MasterReset(
                      Axis          := GVL_APPLICATION.MasterAxis, 
                      Execute       := TRUE);

    IF (GVL_APPLICATION.MasterReset.Done)
    THEN
      nState                        := 12;
    END_IF

  12:
    nState                          := 13;
    GVL_APPLICATION.MasterReset(
                      Axis          := GVL_APPLICATION.MasterAxis, 
                      Execute       := FALSE);

  13:
    GVL_APPLICATION.MasterPower(
                Axis                := GVL_APPLICATION.MasterAxis, 
                Enable              := TRUE, 
                Enable_Positive     := TRUE, 
                Enable_Negative     := TRUE, 
                Override            := GVL_APPLICATION.MoveData.rOverride, 
                BufferMode:= , 
                Options:= , 
                Status=> , 
                Busy=> , 
                Error=> , 
                ErrorID=> );

    IF NOT (GVL_APPLICATION.MasterPower.Error)
    THEN
      IF (GVL_APPLICATION.MasterAxis.Status.ControlLoopClosed)
      THEN
        nState                      := 14;
      END_IF
    ELSE
      nState                        := 9000;
      nErrorId                      := GVL_APPLICATION.MasterPower.ErrorID;
    END_IF

  14:
    nState                          := 15;

    // READ THIS:
    // https://infosys.beckhoff.com/english.php?content=../content/1033/tf5410_tc3_collision_avoidance/1534969995.html&id=

    GVL_APPLICATION.MoveData.rVelo  :=  1000.0;   // dynamics for gearing procedure
    GVL_APPLICATION.MoveData.rAcc   := 12500.0;   // dynamics for gearing procedure
    GVL_APPLICATION.MoveData.rGap   :=   100.0;   // gap which has to be maintained during operations

    GVL_APPLICATION.GearData.rDeltaToMasterPos      :=  125.0;  // distance to GearIn position of master
    GVL_APPLICATION.GearData.rMasterStartDistance   :=    0.0;  // distance master has to move until gearing is started
    GVL_APPLICATION.GearData.rModuloSyncPosSlave    :=   75.0;  // Modulo Position of mover where master and mover have to be in sync
    GVL_APPLICATION.GearData.rGearNumerator         :=    1.0;  // Gearing factor

    GVL_APPLICATION.MasterMoveVelo(
                  Axis              := GVL_APPLICATION.MasterAxis, 
                  Execute           := FALSE, 
                  Velocity          :=    500.0, 
                  Acceleration      :=  12500.0, 
                  Deceleration      :=  12500.0, 
                  Jerk              := 100000.0, 
                  Direction         := Tc2_MC2.MC_Direction.MC_Positive_Direction, 
                  BufferMode        := Tc2_MC2.MC_Aborting, 
                  Options:= , 
                  InVelocity=> , 
                  Busy=> , 
                  Active=> , 
                  CommandAborted=> , 
                  Error=> , 
                  ErrorID=> );

  15:
    GVL_APPLICATION.MasterMoveVelo(
                  Axis              := GVL_APPLICATION.MasterAxis, 
                  Execute           := TRUE);

    IF (GVL_APPLICATION.MasterMoveVelo.Error)
    THEN
      nState                        := 9000;
      nErrorId                      := GVL_APPLICATION.MasterMoveVelo.ErrorID;

    ELSIF (GVL_APPLICATION.MasterMoveVelo.InVelocity)
    THEN
      nState                        := 1000;
    END_IF


  1000:
    IF bEnable
    THEN
      nState                        := 1010;
      // see method fb_Mover.GearInPosCa for how the MC_GearInPosCa is connected
      // GVL_XTS.MoverCtrl is triggering fb_MoverCtrl(fb_Mover) instance
      GVL_XTS.MoveData [nMover]     := GVL_APPLICATION.MoveData;  // feed dynamic constraints into datafield of mover
      GVL_XTS.GearData [nMover]     := GVL_APPLICATION.GearData;  // feed gearing constraints into datafield of mover

      GVL_XTS.MoverCtrl[nMover].Cmd := E_MOVER_CTRL.MOVER_GEAR_IN_POS_CA; // start gearing procedure 
    END_IF

  1010:
    IF (GVL_XTS.MoverState[nMover].State = E_MOVER_STATE.MOVER_GEAR_IN_POS_CA + E_PROGRESS.PROGRESS_ERROR)
    THEN
      nErrorId                      := GVL_XTS.MoverInfo[nMover].nErrorId;
      nState                        := 9000;

    ELSIF (GVL_XTS.MoverState[nMover].State = E_MOVER_STATE.MOVER_GEAR_IN_POS_CA + E_PROGRESS.PROGRESS_DONE)
    THEN
      // sync movement is reached, now check for SyncDistance and then send mover away
      nState                        := 1020;
      rStartPositionConveyer        := GVL_APPLICATION.MasterAxis.NcToPlc.ActPos;
      rTargetPositionMover          := GVL_XTS.MoverItf [nMover].RailLength + GVL_XTS.StationStart.rPosWait; // this example sends movers one RailLength forward to startup position 
    END_IF

  1020:
    rSyncDistance                   := GVL_APPLICATION.MasterAxis.NcToPlc.ActPos - rStartPositionConveyer;
    IF (rSyncDistance > rSyncDistanceConveyer)
    THEN
      // sync distance is reached, now send mover away
      nState                              := 1030;
      GVL_XTS.MoveData [nMover].rPos      := rTargetPositionMover;
      GVL_XTS.MoveData [nMover].rDistance := -5.0; // mover has to move more than this distance, then E_MOVER_CTRL.MOVER_SEND_TO_POS_CA is done

      GVL_XTS.MoverCtrl[nMover].Cmd := E_MOVER_CTRL.MOVER_SEND_TO_POS_CA;
    END_IF

  1030:
    IF (GVL_XTS.MoverState[nMover].State = E_MOVER_STATE.MOVER_SEND_TO_POS_CA + E_PROGRESS.PROGRESS_ERROR)
    THEN
      nErrorId                      := GVL_XTS.MoverInfo[nMover].nErrorId;
      nState                        := 9000;

    ELSIF (GVL_XTS.MoverState[nMover].State = E_MOVER_STATE.MOVER_SEND_TO_POS_CA + E_PROGRESS.PROGRESS_DONE)
    THEN
      nState                        := 1040;
    END_IF

  1040:
    nState                          := 1000;
    IF (nMover > MAX_MOVER-1)
    THEN
      nMover                        := 1;
    ELSE
      nMover                        := nMover + 1;
    END_IF

  9000:
    bError                          := TRUE;
END_CASE




]]></ST>
    </Implementation>
    <LineIds Name="GEAR_IN_POS_CA">
      <LineId Id="571" Count="36" />
      <LineId Id="613" Count="0" />
      <LineId Id="860" Count="0" />
      <LineId Id="614" Count="8" />
      <LineId Id="627" Count="27" />
      <LineId Id="731" Count="0" />
      <LineId Id="853" Count="0" />
      <LineId Id="852" Count="0" />
      <LineId Id="851" Count="0" />
      <LineId Id="732" Count="0" />
      <LineId Id="655" Count="0" />
      <LineId Id="686" Count="1" />
      <LineId Id="761" Count="0" />
      <LineId Id="688" Count="0" />
      <LineId Id="690" Count="2" />
      <LineId Id="694" Count="15" />
      <LineId Id="693" Count="0" />
      <LineId Id="733" Count="1" />
      <LineId Id="736" Count="1" />
      <LineId Id="751" Count="1" />
      <LineId Id="784" Count="0" />
      <LineId Id="786" Count="0" />
      <LineId Id="785" Count="0" />
      <LineId Id="787" Count="1" />
      <LineId Id="735" Count="0" />
      <LineId Id="753" Count="2" />
      <LineId Id="757" Count="1" />
      <LineId Id="756" Count="0" />
      <LineId Id="842" Count="1" />
      <LineId Id="791" Count="0" />
      <LineId Id="854" Count="1" />
      <LineId Id="759" Count="0" />
      <LineId Id="789" Count="0" />
      <LineId Id="856" Count="0" />
      <LineId Id="790" Count="0" />
      <LineId Id="792" Count="0" />
      <LineId Id="844" Count="0" />
      <LineId Id="793" Count="4" />
      <LineId Id="799" Count="0" />
      <LineId Id="798" Count="0" />
      <LineId Id="800" Count="2" />
      <LineId Id="808" Count="0" />
      <LineId Id="813" Count="0" />
      <LineId Id="656" Count="0" />
      <LineId Id="806" Count="0" />
      <LineId Id="804" Count="1" />
      <LineId Id="811" Count="0" />
      <LineId Id="814" Count="0" />
      <LineId Id="857" Count="0" />
      <LineId Id="818" Count="0" />
      <LineId Id="815" Count="0" />
      <LineId Id="858" Count="1" />
      <LineId Id="816" Count="1" />
      <LineId Id="819" Count="1" />
      <LineId Id="825" Count="7" />
      <LineId Id="821" Count="0" />
      <LineId Id="833" Count="1" />
      <LineId Id="841" Count="0" />
      <LineId Id="835" Count="5" />
      <LineId Id="803" Count="0" />
      <LineId Id="657" Count="1" />
      <LineId Id="660" Count="4" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>