<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="APPLICATION" Id="{a42cfa77-97a5-4ec9-b576-fd1e63c4d66c}" SpecialFunc="None">
    <Declaration><![CDATA[//---------------------------------------------------------------------------------------------------------------
//
//  HAUD 2024.10.02
//
//  - APPLICATION
//    - explicit simple example PRG for setting up GearInPosCa application
//      - works dirEctly on GVL_XTS namespace Ctrl/State structs
//      - no error handling, reset application from start
//
//  - Application controls:
//    - XtsTransport
//      - GVL_XTS.TransportCtrl
//      - GVL_XTS.TransportState
//
//    - Xts Movers
//      - GVL_XTS.MoverCtrl
//      - GVL_XTS.MoverState
//      - GVL_XTS.MoverInfo
//      - GVL_XTS.MoveData
//      - GVL_XTS.GearData
//
//  - Application
//    - GearInPosCa example
//      - gear in to conveyer belt 
//
//---------------------------------------------------------------------------------------------------------------
// This SOFTWARE is provided as an Exemple by THE PROVIDER "as is" and "with all faults." THE PROVIDER makes no 
// representations or warranties of any kind concerning the safety, suitability, lack of viruses, inaccuracies, 
// typographical errors, or other harmful components of this SOFTWARE. There are inherent dangers in the use of 
// any software, and you are solely responsible for determining whether this SOFTWARE is compatible with your 
// equipment and other software installed on your equipment. You are also solely responsible for the protection 
// of your equipment and backup of your data, and THE PROVIDER will not be liable for any damages you may suffer 
// in connection with using, modifying, or distributing this SOFTWARE.
//---------------------------------------------------------------------------------------------------------------
PROGRAM APPLICATION
VAR
  eInit         : E_PROGRESS;
  bStart        : BOOL;   // XtsTransport is initialized, CAGroup is built, All movers are enabled, XtsStations are cleared, XtsTransport base position for all movers is commanded, XtsStations are handshaked with timer
  bReset        : BOOL;   // All Xts Stations are cleared, requires new start

  nState        : UINT;   // state var for application
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

//-----------------------------------------------------------------------------
// wait for initialization to be complete before work may start
//-----------------------------------------------------------------------------
IF NOT (Main.eInit = E_PROGRESS.PROGRESS_DONE)
THEN
  eInit                               := E_PROGRESS.PROGRESS_INIT;
  bReset                              := FALSE;
  bStart                              := FALSE;
  nState                              := 0;
  RETURN;
END_IF
//-----------------------------------------------------------------------------
// fetch reset anytime
//-----------------------------------------------------------------------------
IF bReset
THEN
  bReset                              := FALSE;
  bStart                              := FALSE;
  nState                              := 9000;  // states for clearing XtsTransport
END_IF


CASE nState 
OF
  0:                                  // first PLC cycle
    nState                            := 1;

  1:
    // do other init stuff here
    eInit                             := E_PROGRESS.PROGRESS_DONE;
    nState                            := 10;

  10:                                 // starts from here
    IF bStart
    THEN
      nState                          := 100; // let's go
    END_IF
    
  100:                                // clear interface
    GVL_XTS.XtsTransportCtrl.Cmd      := E_XTS_TRANSPORT_CTRL.CMD_NULL;
    nState                            := 110;

  110:                                // check initialization of XtsTransport, wait for either MoverDetection being valid or OperationMode.Simulation
    IF (GVL_XTS.XtsTransportState.XpuInfo.IdDetectionValid) OR
       (GVL_XTS.XtsTransportState.XpuInfo.OperationMode = OperationMode.Simulation)
    THEN
      // now XtsTransport is initialized, cyclic plausibility checks on Xpu are active
      nState                          := 120;
    END_IF

  120:                                // clear group for defined start situation
    GVL_XTS.XtsTransportCtrl.Cmd      := E_XTS_TRANSPORT_CTRL.CMD_GROUP_CLEAR;

    IF (GVL_XTS.XtsTransportState.State = E_XTS_TRANSPORT_STATE.TRANSPORT_GROUP_CLEAR + E_PROGRESS.PROGRESS_DONE)
    THEN
      // CA Group is now in defined error free state
      nState                          := 130;
    END_IF

  130:                                // build Collision Avoidance group with all movers
    GVL_XTS.XtsTransportCtrl.Cmd      := E_XTS_TRANSPORT_CTRL.CMD_GROUP_BUILD;

    IF (GVL_XTS.XtsTransportState.State = E_XTS_TRANSPORT_STATE.TRANSPORT_GROUP_BUILD + E_PROGRESS.PROGRESS_DONE)
    THEN
      // CA Group contains all movers now
      // GVL_XTS.XtsTransportState.GroupInfo.AxisCount = MAX_MOVER
      nState                          := 140;
      GEAR_IN_POS_CA.bEnable          := FALSE;
      GEAR_IN_POS_CA.bReset           := FALSE;
    END_IF

  140:                                // enable CA Group
    GVL_XTS.XtsTransportCtrl.Cmd      := E_XTS_TRANSPORT_CTRL.CMD_GROUP_ENABLE;

    IF (GVL_XTS.XtsTransportState.State = E_XTS_TRANSPORT_STATE.TRANSPORT_GROUP_ENABLE + E_PROGRESS.PROGRESS_DONE)
    THEN
      // GVL_XTS.XtsTransportState.GroupInfo.CaGroupState = mcGroupStateNotReady
      nState                          := 150;
      GEAR_IN_POS_CA.bReset           := TRUE;
    END_IF

  150:                                // enable all movers
    GVL_XTS.XtsTransportCtrl.Cmd      := E_XTS_TRANSPORT_CTRL.CMD_MOVER_ENABLE;

    IF (GVL_XTS.XtsTransportState.State = E_XTS_TRANSPORT_STATE.TRANSPORT_MOVER_ENABLE + E_PROGRESS.PROGRESS_DONE)
    THEN
      // GVL_XTS.XtsTransportState.GroupInfo.CaGroupState = mcGroupStateStandby
      nState                          := 160;
      GEAR_IN_POS_CA.bReset           := FALSE;
    END_IF

  160:                                // command all movers to startup position
    GVL_XTS.XtsTransportCtrl.Cmd      := E_XTS_TRANSPORT_CTRL.CMD_TRANSPORT_START;

    IF (GVL_XTS.XtsTransportState.State = E_XTS_TRANSPORT_STATE.TRANSPORT_START + E_PROGRESS.PROGRESS_DONE)
    THEN
      // all movers are now waiting at GVL_XTS.StationStart.rPosWait
      nState                          := 1000; // go to wait state, activate GearInPos program
      // enable gear in pos sequence now the movers are ready
      GEAR_IN_POS_CA.bEnable          := TRUE;
    END_IF


  9000:
    // reset sequence trigger starts here
    GEAR_IN_POS_CA.bEnable            := FALSE;
    GVL_XTS.XtsTransportCtrl.Cmd      := E_XTS_TRANSPORT_CTRL.CMD_NULL;
    nState                            := 9005;

    GVL_APPLICATION.MasterHalt(
                        Axis          := GVL_APPLICATION.MasterAxis, 
                        Execute       := FALSE, 
                        Deceleration  :=  12500.0, 
                        Jerk          := 100000.0, 
                        BufferMode    := Tc2_MC2.MC_Aborting, 
                        Options:= , 
                        Done=> , 
                        Busy=> , 
                        Active=> , 
                        CommandAborted=> , 
                        Error=> , 
                        ErrorID=> );

  9005:
    GVL_APPLICATION.MasterHalt(
                        Axis          := GVL_APPLICATION.MasterAxis, 
                        Execute       := TRUE);

    IF (GVL_APPLICATION.MasterAxis.Status.NotMoving)
    THEN
      nState                          := 9010;

      GVL_APPLICATION.MasterHalt(
                          Axis        := GVL_APPLICATION.MasterAxis, 
                          Execute     := FALSE);

      GVL_APPLICATION.MasterPower(
                  Axis                := GVL_APPLICATION.MasterAxis, 
                  Enable              := FALSE);
    END_IF

  9010:                               // halt all movers and clear group
    GVL_XTS.XtsTransportCtrl.Cmd      := E_XTS_TRANSPORT_CTRL.CMD_GROUP_CLEAR;

    IF (GVL_XTS.XtsTransportState.State = E_XTS_TRANSPORT_STATE.TRANSPORT_GROUP_CLEAR + E_PROGRESS.PROGRESS_DONE)
    THEN
      // CA group cleared and mover in standstill
      nState                          := 9100;
    END_IF

  9100:                               // switch off movers
    GVL_XTS.XtsTransportCtrl.Cmd      := E_XTS_TRANSPORT_CTRL.CMD_MOVER_DISABLE;

    IF (GVL_XTS.XtsTransportState.State = E_XTS_TRANSPORT_STATE.TRANSPORT_MOVER_DISABLE + E_PROGRESS.PROGRESS_ERROR)
    THEN
      nState                          := 9010;
    ELSIF (GVL_XTS.XtsTransportState.State = E_XTS_TRANSPORT_STATE.TRANSPORT_MOVER_DISABLE + E_PROGRESS.PROGRESS_DONE)
    THEN
      nState                          := 10;
    END_IF

END_CASE

GVL_APPLICATION.MasterAxis(); // update master axis

GEAR_IN_POS_CA();             // gear in pos sequence















]]></ST>
    </Implementation>
    <LineIds Name="APPLICATION">
      <LineId Id="438" Count="0" />
      <LineId Id="374" Count="0" />
      <LineId Id="373" Count="0" />
      <LineId Id="358" Count="0" />
      <LineId Id="375" Count="0" />
      <LineId Id="359" Count="1" />
      <LineId Id="366" Count="0" />
      <LineId Id="363" Count="1" />
      <LineId Id="383" Count="0" />
      <LineId Id="361" Count="1" />
      <LineId Id="61" Count="0" />
      <LineId Id="377" Count="0" />
      <LineId Id="376" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="63" Count="2" />
      <LineId Id="175" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="54" Count="1" />
      <LineId Id="173" Count="0" />
      <LineId Id="368" Count="1" />
      <LineId Id="372" Count="0" />
      <LineId Id="370" Count="1" />
      <LineId Id="94" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="79" Count="3" />
      <LineId Id="68" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="100" Count="1" />
      <LineId Id="103" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="105" Count="2" />
      <LineId Id="99" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="134" Count="1" />
      <LineId Id="137" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="143" Count="4" />
      <LineId Id="150" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="506" Count="0" />
      <LineId Id="502" Count="0" />
      <LineId Id="149" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="155" Count="3" />
      <LineId Id="161" Count="1" />
      <LineId Id="503" Count="0" />
      <LineId Id="163" Count="8" />
      <LineId Id="504" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="176" Count="7" />
      <LineId Id="662" Count="1" />
      <LineId Id="184" Count="0" />
      <LineId Id="451" Count="0" />
      <LineId Id="665" Count="0" />
      <LineId Id="248" Count="0" />
      <LineId Id="614" Count="0" />
      <LineId Id="597" Count="0" />
      <LineId Id="380" Count="0" />
      <LineId Id="382" Count="0" />
      <LineId Id="557" Count="12" />
      <LineId Id="556" Count="0" />
      <LineId Id="571" Count="0" />
      <LineId Id="570" Count="0" />
      <LineId Id="572" Count="1" />
      <LineId Id="584" Count="1" />
      <LineId Id="381" Count="0" />
      <LineId Id="586" Count="1" />
      <LineId Id="592" Count="3" />
      <LineId Id="600" Count="2" />
      <LineId Id="599" Count="0" />
      <LineId Id="588" Count="1" />
      <LineId Id="379" Count="0" />
      <LineId Id="271" Count="6" />
      <LineId Id="267" Count="0" />
      <LineId Id="258" Count="0" />
      <LineId Id="278" Count="3" />
      <LineId Id="284" Count="0" />
      <LineId Id="666" Count="0" />
      <LineId Id="668" Count="0" />
      <LineId Id="667" Count="0" />
      <LineId Id="285" Count="0" />
      <LineId Id="670" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="505" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="664" Count="0" />
      <LineId Id="114" Count="14" />
      <LineId Id="47" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>