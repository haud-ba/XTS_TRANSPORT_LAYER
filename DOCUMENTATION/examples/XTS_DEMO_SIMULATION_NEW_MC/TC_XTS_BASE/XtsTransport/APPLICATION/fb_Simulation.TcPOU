<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="fb_Simulation" Id="{da86ec44-e899-45cb-8522-c0f7a497324a}" SpecialFunc="None">
    <Declaration><![CDATA[//---------------------------------------------------------------------------------------------------------------
//
//  HAUD 2023.03.27
//
//
//  fb_Simulation
//
//    !!! NOT FOR USE IN PRODUCTION !!! --> build something from your mind, this gets messy if you do not
//
//  - grouping of xts stations to sync start process
//  - nFirst to nLast xts stations are checked for starting process simultaneously
//  - basic preparation of station target index in PrepareTarget()
//  - handshake with station control for mover transport through station
//
//---------------------------------------------------------------------------------------------------------------
// This SOFTWARE is provided as an Exemple by THE PROVIDER "as is" and "with all faults." THE PROVIDER makes no 
// representations or warranties of any kind concerning the safety, suitability, lack of viruses, inaccuracies, 
// typographical errors, or other harmful components of this SOFTWARE. There are inherent dangers in the use of 
// any software, and you are solely responsible for determining whether this SOFTWARE is compatible with your 
// equipment and other software installed on your equipment. You are also solely responsible for the protection 
// of your equipment and backup of your data, and THE PROVIDER will not be liable for any damages you may suffer 
// in connection with using, modifying, or distributing this SOFTWARE.
//---------------------------------------------------------------------------------------------------------------
FUNCTION_BLOCK fb_Simulation
VAR
  _sCheck                     : STRING;
  _tonProcess                 : Tc2_Standard.TON;
  _tProcess                   : TIME := T#500MS;

  _AllStationMoverPerMinute   : UINT;
  _tonPartsPerMinute          : Tc2_Standard.TON;

  {attribute 'displaymode':='bin'}
  _wEnter                     : WORD;
  {attribute 'displaymode':='bin'}
  _wStart                     : WORD;
  {attribute 'displaymode':='bin'}
  _wOut                       : WORD;
  {attribute 'displaymode':='bin'}
  _wGone                      : WORD;
  {attribute 'displaymode':='bin'}
  _wEnableProcess             : WORD; // bits switch on stations

  {attribute 'displaymode':='bin'}
  _TargetMask                 : BYTE;

  _stCtrl                     : POINTER TO ARRAY[1..MAX_STATION]  OF ST_STATION_CTRL;
  _stState                    : POINTER TO ARRAY[1..MAX_STATION]  OF ST_STATION_STATE;

  // controlling bits from properties used on the outside
  _bNext,
  _bMoverEnter,
  _bMoverOut                  : BOOL;

  // who is included in process
  // _nFirst to _nLast MUST be in closed consecutive order
  _nProcessState,
  _nStation,
  _nStationCount,
  _nFirstStation,
  _nLastStation               : UINT;

  _nTarget,
  _nFirstTarget,
  _nLastTarget                : UINT;

  _nPreparedTarget            : ARRAY[1..MAX_MOVER]  OF UINT;

  _nMoverPerMinute,
  _nMoverCount,
  _nMoverCountOld             : ARRAY[1..MAX_STATION]  OF UINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="properties" Id="{00319e58-6c2c-4aca-bec4-fee440d08884}" />
    <Method Name="Check" Id="{229e5281-97c6-4cad-b72d-bce792434909}">
      <Declaration><![CDATA[METHOD Check : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF (_nFirstStation < 1) OR
   (_nFirstStation > MAX_STATION)
THEN
  _sCheck                     := '_nFirstStation out of bounds';
  RETURN;
END_IF

IF (_nLastStation < 1) OR
   (_nLastStation > MAX_STATION)
THEN
  _sCheck                     := '_nLastStation out of bounds';
  RETURN;
END_IF

IF (_nFirstTarget < 1) OR
   (_nFirstTarget > MAX_STATION)
THEN
  _sCheck                     := '_nFirstTarget out of bounds';
  RETURN;
END_IF

IF (_nLastTarget < 1) OR
   (_nLastTarget > MAX_STATION)
THEN
  _sCheck                     := '_nLastTarget out of bounds';
  RETURN;
END_IF

IF NOT (_stCtrl  <> 0)
THEN
  _sCheck                     := '_stCtrl: missing pointer';
  RETURN;
END_IF

IF NOT (_stState <> 0)
THEN
  _sCheck                     := '_stState: missing pointer';
  RETURN;
END_IF


_sCheck                       := TO_STRING(E_PROGRESS.PROGRESS_DONE);
Check                         := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Cycle" Id="{5d9343b9-7566-4654-850b-142338388e5d}">
      <Declaration><![CDATA[METHOD Cycle
VAR_INST
  _k                  : UINT;
  _rtrigProcess       : ARRAY[1..MAX_STATION] OF Tc2_Standard.R_TRIG;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Check() THEN RETURN; END_IF

_nStationCount                              := _nLastStation - _nFirstStation + 1;

IF (_nStationCount < 1)
THEN
  RETURN;
END_IF

FOR _nStation := _nLastStation TO _nFirstStation BY(-1) 
DO
  CASE _stState^[_nStation].eState
  OF
    E_STATION_STATE.STATION_DISABLE,
    E_STATION_STATE.STATION_ENABLE, 
    E_STATION_STATE.STATION_DETECT_MOVER:
      _wOut    := _wGone                    := 0;
      _wEnter                               := DelBitWord(_wEnter, (_nStation-_nFirstStation));
      _wStart                               := DelBitWord(_wStart, (_nStation-_nFirstStation));
      IF (GetBitWord(_wEnableProcess, (_nStation-_nFirstStation)))
      THEN
        IF (_bMoverEnter)
        THEN
          _stCtrl^[_nStation].eCmd          := E_STATION_CTRL.STATION_ENABLE;
        ELSE
          _stCtrl^[_nStation].eCmd          := E_STATION_CTRL.STATION_DISABLE;
        END_IF
      ELSE
        _stCtrl^[_nStation].eCmd            := E_STATION_CTRL.STATION_DISABLE;
      END_IF


    E_STATION_STATE.STATION_MOVER_ENTER:
      _wEnter                               := SetBitWord(_wEnter, (_nStation-_nFirstStation));
      IF _bMoverEnter
      THEN
        _tonProcess(IN                      := FALSE, 
                    PT                      := _tProcess);

        _stCtrl^[_nStation].nTargetStation  := 0;
        _stCtrl^[_nStation].eCmd            := E_STATION_CTRL.STATION_MOVER_ENTER;
      END_IF

    E_STATION_STATE.STATION_PROCESS_START:
      _wEnter                               := DelBitWord(_wEnter, (_nStation-_nFirstStation));
      _wStart                               := SetBitWord(_wStart, (_nStation-_nFirstStation));
  
      // check if ALL XtsStations have mover in place to work
      IF (_wStart = TO_WORD(EXPT(2,_nStationCount))-1)
      THEN
        _tonProcess(IN                      := TRUE, 
                    PT                      := _tProcess);

        IF _tonProcess.Q
        THEN
          PrepareTargets(FALSE);
          _stCtrl^[_nStation].eCmd          := E_STATION_CTRL.STATION_PROCESS_DONE;
        END_IF
      END_IF

    E_STATION_STATE.STATION_CHECK_NEST:
      _wEnter                               := SetBitWord(_wEnter, (_nStation-_nFirstStation));
      _wStart                               := DelBitWord(_wStart, (_nStation-_nFirstStation));
      _tonProcess(IN                        := FALSE, 
                  PT                        := _tProcess);

      IF (_bMoverEnter)
      THEN
        // check if ALL XtsStations have nest to work
        IF (_wEnter = TO_WORD(EXPT(2,_nStationCount))-1)
        THEN
          _stCtrl^[_nStation].eCmd          := E_STATION_CTRL.STATION_MOVER_ENTER;
        END_IF
      END_IF


    E_STATION_STATE.STATION_MOVER_OUT:
      _wOut                                 := SetBitWord(_wOut, (_nStation-_nFirstStation));
      _tonProcess(IN                        := FALSE, 
                  PT                        := _tProcess);

      IF _bMoverOut
      THEN
        // nest mask for this mover in target station, sender decides what to work in target
        _stCtrl^[_nStation].nMask           := _TargetMask;

        // check if ALL XtsStations have mover to send
        IF (_wOut = TO_WORD(EXPT(2,_nStationCount))-1)
        THEN
          _nProcessState                    := 10;
        END_IF
      END_IF
  END_CASE
END_FOR

CASE _nProcessState
OF
10:
  // ctrl has to decide where to send mover; this depends on YOUR decision
  IF PrepareTargets(TRUE)
  THEN
    PrepareTargets(FALSE);
    _nProcessState                          := 30;
  END_IF
END_CASE
CASE _nProcessState
OF
30:
  FOR _nStation := _nLastStation TO _nFirstStation BY(-1) 
  DO
    IF _bNext
    THEN
      // start outfeed of mover
      _stCtrl^[_nStation].eCmd              := E_STATION_CTRL.STATION_MOVER_OUT;
    END_IF

    CASE _stState^[_nStation].eState
    OF
      E_STATION_STATE.STATION_MOVER_GONE:
        // whO is gone?
        _wGone                              := SetBitWord(_wGone, (_nStation-_nFirstStation));
    END_CASE
  END_FOR
  // check if ALL XtsStations are empty
  IF (_wGone = TO_WORD(EXPT(2,_nStationCount))-1)
  THEN
    _nProcessState                          := 40;
  END_IF
END_CASE
CASE _nProcessState
OF
40:
  _nProcessState                            := 0;
  FOR _nStation := _nLastStation TO _nFirstStation BY(-1) 
  DO
    // let XtsStations jump back to disable
    _stCtrl^[_nStation].eCmd                := E_STATION_CTRL.STATION_MOVER_GONE;
  END_FOR
END_CASE


//-----------------------------------------------------------------------------
// Mover per Minute counter all XtsStations in range
//-----------------------------------------------------------------------------
_AllStationMoverPerMinute   := 0; 
//-----------------------------------------------------------------------------
// mover counter
//-----------------------------------------------------------------------------
FOR _k := _nLastStation TO _nFirstStation BY(-1) 
DO
  _rtrigProcess[_k](CLK:= (_stCtrl^[_k].eCmd = E_STATION_CTRL.STATION_MOVER_OUT));

  IF _rtrigProcess[_k].Q
  THEN
    _nMoverCount[_k]         := _nMoverCount[_k] + 1;
  END_IF
  
  IF _tonPartsperMinute.Q
  THEN
    // count every XtsStation in range
    _nMoverPerMinute[_k]    := _nMoverCount[_k] - _nMoverCountOld[_k];
    _nMoverCountOld [_k]    := _nMoverCount[_k];
  END_IF
  // sum up all XtsStations in range
  _AllStationMoverPerMinute := _AllStationMoverPerMinute + _nMoverPerMinute[_k]; 
END_FOR

IF _tonPartsperMinute.q
THEN
  _tonPartsperMinute(IN:=FALSE);
END_IF

_tonPartsperMinute(IN:= TRUE, PT:= T#60S);


]]></ST>
      </Implementation>
    </Method>
    <Method Name="DelBitWord" Id="{2fd93023-4323-4a27-9876-b223c0f7241e}">
      <Declaration><![CDATA[METHOD PUBLIC DelBitWord : WORD
VAR_INPUT
  inVal   : WORD;
  bitNo   : DINT;
END_VAR
VAR
  wConst : WORD := 1;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ( inVal AND SHL( wConst,bitNo MOD 16 ) ) > 0 THEN
  DelBitWord := inVal XOR (SHL( wConst,bitNo MOD 16 ));
ELSE
  DelBitWord := inVal;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Disable" Id="{9cdf3ddb-105c-47cb-917e-75066bb35183}">
      <Declaration><![CDATA[METHOD Disable : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT (_nLastStation   > 0) OR
   NOT (_nFirstStation  > 0) OR
   NOT (_nLastStation   < MAX_STATION+1) OR
   NOT (_nFirstStation  < MAX_STATION+1)
THEN
  Disable := FALSE;
ELSE
  FOR _nStation := _nLastStation TO _nFirstStation BY(-1) 
  DO
    _stCtrl^[_nStation].eCmd              := E_STATION_CTRL.STATION_DISABLE;
    _stCtrl^[_nStation].nMask             := 0;
  END_FOR

  memset(ADR(_nMoverCount),    0, SIZEOF(_nMoverCount));
  memset(ADR(_nMoverCountOld), 0, SIZEOF(_nMoverCountOld));
  _nProcessState :=  _nTarget             := 0;
  
  Disable := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Property Name="EnableProcess" Id="{7c790d0b-a53d-40bf-b6bd-1c4cc587158d}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY EnableProcess : word]]></Declaration>
      <Get Name="Get" Id="{0874ed85-5165-412e-903a-1e28fd1e2715}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[EnableProcess := _wEnableProcess;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{05a75b91-4880-4efd-a0da-62e3a72730d1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_wEnableProcess := EnableProcess;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="GetBitWord" Id="{9aaf85f6-498e-4c5b-808a-fb7d36255b32}">
      <Declaration><![CDATA[METHOD PUBLIC GetBitWord : BOOL
VAR_INPUT
  inVal   : WORD;
  bitNo   : DINT;
END_VAR
VAR
  wConst : WORD := 1;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ( inVal AND SHL( wConst,DINT_TO_SINT(bitNo) MOD 16 ) ) > 0
THEN
  GetBitWord := TRUE;
ELSE
  GetBitWord := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{cb35fdde-b84e-42f2-be27-a7e2dfc72e31}">
      <Declaration><![CDATA[METHOD Init : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT (_nLastStation   > 0) OR
   NOT (_nFirstStation  > 0) OR
   NOT (_nLastStation   < MAX_STATION+1) OR
   NOT (_nFirstStation  < MAX_STATION+1)
THEN
  Init := FALSE;
ELSE
  FOR _nStation := _nLastStation TO _nFirstStation BY(-1) 
  DO
    _stCtrl^[_nStation].eCmd              := E_STATION_CTRL.STATION_INIT;
    _stCtrl^[_nStation].nMask             := 0;
  END_FOR

  memset(ADR(_nMoverCount),    0, SIZEOF(_nMoverCount));
  memset(ADR(_nMoverCountOld), 0, SIZEOF(_nMoverCountOld));
  _nProcessState :=  _nTarget             := 0;
  
  Init := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Property Name="MoverEnter" Id="{a123c5da-b9ec-48fa-af95-5319a2be67f5}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY MoverEnter : bool]]></Declaration>
      <Get Name="Get" Id="{b8d0f0c6-db31-42b6-ae0a-a7cf95d3b2b6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoverEnter := _bMoverEnter;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{b3acca20-3154-414f-9a4b-6fa99f8c6aa1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_bMoverEnter := MoverEnter;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MoverOut" Id="{f4f54579-aadc-488f-98d8-33d62b02a039}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY MoverOut : bool]]></Declaration>
      <Get Name="Get" Id="{cb6aad1c-e0d6-4590-8a69-575dc6861eef}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MoverOut := _bMoverOut;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{bd1601b3-372f-422e-a07f-eed0ab9efaef}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_bMoverOut := MoverOut;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Next" Id="{dce080b4-1f56-4925-a392-d8d52bab7669}">
      <Declaration><![CDATA[METHOD Next : BOOL
VAR_INPUT
  Nxt  : Bool;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_bNext := Nxt;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PrepareTargets" Id="{1b573a2b-9344-4048-b386-4f42ea4f4f85}">
      <Declaration><![CDATA[METHOD PRIVATE PrepareTargets : BOOL
VAR_INPUT
  Execute         : BOOL;
END_VAR
VAR_INST
  _idxStations    : uint;
  _nt,
  _nstate         : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT Check() THEN RETURN; END_IF

IF NOT Execute
THEN
  _nstate                             := 0;
END_IF


CASE _nstate
OF
  0:
    IF Execute
    THEN
      _nstate                         := 10;
    END_IF
END_CASE
CASE _nstate
OF
  10:
    _nstate                           := 20;

    FOR _idxStations := _nLastStation TO _nFirstStation BY(-1) 
    DO
      _nt                               := TO_USINT(_nLastTarget - _nTarget);
      _nTarget                          := _nTarget + 1;
  
      _nPreparedTarget[_stState^[_idxStations].nMoverId]  := _nt;
      _stCtrl^[_idxStations].nTargetStation               := TO_USINT(_nt);
  
      IF (_nLastTarget - _nTarget < _nFirstTarget)
      THEN
        _nTarget                        := 0;
      END_IF
    END_FOR
END_CASE
CASE _nstate
OF
  20:
    PrepareTargets                    := TRUE;
END_CASE


]]></ST>
      </Implementation>
    </Method>
    <Property Name="ProcessTime" Id="{4586af61-a640-4a83-ac8f-ca1bc34a80a9}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY ProcessTime : time]]></Declaration>
      <Get Name="Get" Id="{543def3a-bb92-47f6-85fe-edef11b0cf4e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ProcessTime := _tProcess;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{b4cba47d-de5d-414e-bafc-b27d4bee4dd2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_tProcess := ProcessTime;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="SetBitWord" Id="{a2527f69-a904-46eb-87b3-a348014b22dc}">
      <Declaration><![CDATA[METHOD PUBLIC SetBitWord : WORD
VAR_INPUT
  inVal   : WORD;
  bitNo   : DINT;
END_VAR
VAR
  wConst  : WORD := 1;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SetBitWord := inVal OR SHL( wConst,bitNo MOD 16 );]]></ST>
      </Implementation>
    </Method>
    <Property Name="StationCount" Id="{bbddc7a5-fced-441c-996a-edd7fefea6f0}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY StationCount : uint]]></Declaration>
      <Get Name="Get" Id="{2b2bf614-371e-4bd0-b84f-3e8630820673}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[StationCount := _nStationCount;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="StationCtrl" Id="{54f02afe-19e2-4e58-80bb-7dd3c88c31a3}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY StationCtrl : pointer to ARRAY[1..MAX_STATION]  OF ST_STATION_CTRL;]]></Declaration>
      <Set Name="Set" Id="{5b956450-26e7-406c-b2e3-712eb2c09a6b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_stCtrl := StationCtrl;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="StationFirst" Id="{14e12906-fcf3-43f0-9320-604e1c488997}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY StationFirst : uint]]></Declaration>
      <Get Name="Get" Id="{b2c8fd95-49aa-4f95-b623-1e786aa8296d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[StationFirst := _nFirstStation;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{23c8506f-8c5d-48d3-b7a8-85e178c0b436}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_nFirstStation := StationFirst;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="StationLast" Id="{66b1c133-8ea7-425f-a05d-435ec8a6fe75}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY StationLast : uint]]></Declaration>
      <Get Name="Get" Id="{78bbb339-c485-4284-8cfa-a1468f5cbbc0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[StationLast := _nLastStation;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{e0256e78-ee9d-48d9-9468-746a7009e98b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_nLastStation := StationLast;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="StationState" Id="{12d671ce-4f48-4f2d-801b-f179fe1b4407}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY StationState : POINTER TO ARRAY[1..MAX_STATION]  OF ST_STATION_STATE]]></Declaration>
      <Set Name="Set" Id="{b9409299-2a76-4f7e-ad65-a952bdd1334f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_stState := StationState;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="TargetFirst" Id="{f7dee83a-8746-44d0-8747-363a91698d07}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY TargetFirst : uint]]></Declaration>
      <Get Name="Get" Id="{65db5591-8c5e-42b7-afbb-3c1dc0f4e381}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TargetFirst := _nFirstTarget;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{7e76c355-577a-48ba-8b6b-2808053fc746}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_nFirstTarget := TargetFirst;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="TargetLast" Id="{da86159d-6ee5-4404-81d4-db749bbb3513}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY TargetLast : uint]]></Declaration>
      <Get Name="Get" Id="{229070bc-f9cf-4a0c-90aa-62f3bd5d36df}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TargetLast := _nLastTarget;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{5bd9be9c-7374-4097-86e8-97f8e4696dc9}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_nLastTarget := TargetLast;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="TargetMask" Id="{299fb60d-893e-406c-a169-4e5ca2cdd902}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY TargetMask : byte]]></Declaration>
      <Get Name="Get" Id="{d8bfd69f-a07e-4bb0-a945-c2a3950800c8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TargetMask := _TargetMask;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{2492d0b1-d603-4be1-85fb-56561e253167}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_TargetMask := TargetMask;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="fb_Simulation">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="fb_Simulation.Check">
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="23" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="17" Count="2" />
      <LineId Id="24" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="50" Count="0" />
      <LineId Id="52" Count="12" />
      <LineId Id="25" Count="12" />
      <LineId Id="12" Count="2" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="fb_Simulation.Cycle">
      <LineId Id="105" Count="2" />
      <LineId Id="319" Count="0" />
      <LineId Id="109" Count="3" />
      <LineId Id="351" Count="0" />
      <LineId Id="349" Count="1" />
      <LineId Id="120" Count="1" />
      <LineId Id="126" Count="1" />
      <LineId Id="606" Count="0" />
      <LineId Id="624" Count="0" />
      <LineId Id="553" Count="0" />
      <LineId Id="603" Count="0" />
      <LineId Id="128" Count="1" />
      <LineId Id="600" Count="1" />
      <LineId Id="130" Count="0" />
      <LineId Id="604" Count="1" />
      <LineId Id="602" Count="0" />
      <LineId Id="131" Count="5" />
      <LineId Id="504" Count="0" />
      <LineId Id="137" Count="1" />
      <LineId Id="143" Count="3" />
      <LineId Id="556" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="568" Count="0" />
      <LineId Id="507" Count="3" />
      <LineId Id="534" Count="2" />
      <LineId Id="545" Count="1" />
      <LineId Id="544" Count="0" />
      <LineId Id="540" Count="1" />
      <LineId Id="594" Count="0" />
      <LineId Id="542" Count="1" />
      <LineId Id="539" Count="0" />
      <LineId Id="520" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="495" Count="0" />
      <LineId Id="477" Count="0" />
      <LineId Id="558" Count="1" />
      <LineId Id="557" Count="0" />
      <LineId Id="470" Count="1" />
      <LineId Id="614" Count="0" />
      <LineId Id="548" Count="3" />
      <LineId Id="472" Count="0" />
      <LineId Id="474" Count="0" />
      <LineId Id="473" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="554" Count="0" />
      <LineId Id="626" Count="1" />
      <LineId Id="625" Count="0" />
      <LineId Id="172" Count="1" />
      <LineId Id="241" Count="1" />
      <LineId Id="264" Count="0" />
      <LineId Id="255" Count="2" />
      <LineId Id="275" Count="0" />
      <LineId Id="260" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="184" Count="1" />
      <LineId Id="392" Count="2" />
      <LineId Id="186" Count="0" />
      <LineId Id="615" Count="0" />
      <LineId Id="276" Count="1" />
      <LineId Id="582" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="284" Count="0" />
      <LineId Id="396" Count="0" />
      <LineId Id="400" Count="1" />
      <LineId Id="293" Count="0" />
      <LineId Id="369" Count="1" />
      <LineId Id="584" Count="1" />
      <LineId Id="616" Count="0" />
      <LineId Id="586" Count="1" />
      <LineId Id="583" Count="0" />
      <LineId Id="569" Count="1" />
      <LineId Id="572" Count="0" />
      <LineId Id="617" Count="0" />
      <LineId Id="573" Count="0" />
      <LineId Id="571" Count="0" />
      <LineId Id="379" Count="0" />
      <LineId Id="575" Count="2" />
      <LineId Id="579" Count="1" />
      <LineId Id="390" Count="0" />
      <LineId Id="383" Count="0" />
      <LineId Id="391" Count="0" />
      <LineId Id="382" Count="0" />
      <LineId Id="389" Count="0" />
      <LineId Id="385" Count="1" />
      <LineId Id="618" Count="0" />
      <LineId Id="387" Count="1" />
      <LineId Id="272" Count="0" />
      <LineId Id="607" Count="1" />
      <LineId Id="433" Count="0" />
      <LineId Id="610" Count="0" />
      <LineId Id="609" Count="0" />
      <LineId Id="434" Count="0" />
      <LineId Id="561" Count="0" />
      <LineId Id="412" Count="0" />
      <LineId Id="611" Count="0" />
      <LineId Id="436" Count="1" />
      <LineId Id="414" Count="0" />
      <LineId Id="446" Count="0" />
      <LineId Id="415" Count="2" />
      <LineId Id="426" Count="3" />
      <LineId Id="612" Count="0" />
      <LineId Id="430" Count="2" />
      <LineId Id="613" Count="0" />
      <LineId Id="560" Count="0" />
      <LineId Id="413" Count="0" />
      <LineId Id="447" Count="6" />
      <LineId Id="315" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Simulation.DelBitWord">
      <LineId Id="13" Count="4" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Simulation.Disable">
      <LineId Id="21" Count="6" />
      <LineId Id="6" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="28" Count="0" />
    </LineIds>
    <LineIds Name="fb_Simulation.EnableProcess.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Simulation.EnableProcess.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Simulation.GetBitWord">
      <LineId Id="13" Count="4" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Simulation.Init">
      <LineId Id="21" Count="6" />
      <LineId Id="6" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="28" Count="0" />
    </LineIds>
    <LineIds Name="fb_Simulation.MoverEnter.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Simulation.MoverEnter.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Simulation.MoverOut.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Simulation.MoverOut.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Simulation.Next">
      <LineId Id="5" Count="1" />
    </LineIds>
    <LineIds Name="fb_Simulation.PrepareTargets">
      <LineId Id="12" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="14" Count="8" />
      <LineId Id="24" Count="4" />
      <LineId Id="30" Count="0" />
      <LineId Id="47" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="39" Count="3" />
      <LineId Id="35" Count="0" />
      <LineId Id="49" Count="2" />
      <LineId Id="44" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Simulation.ProcessTime.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Simulation.ProcessTime.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Simulation.SetBitWord">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Simulation.StationCount.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Simulation.StationCtrl.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Simulation.StationFirst.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Simulation.StationFirst.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Simulation.StationLast.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Simulation.StationLast.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Simulation.StationState.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Simulation.TargetFirst.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Simulation.TargetFirst.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Simulation.TargetLast.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Simulation.TargetLast.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Simulation.TargetMask.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Simulation.TargetMask.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>