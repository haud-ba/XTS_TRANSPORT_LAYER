<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="PROCESS_HANDSHAKE" Id="{db5864b5-04e2-4cc0-83c9-c75fef762d3c}" SpecialFunc="None">
    <Declaration><![CDATA[//---------------------------------------------------------------------------------------------------------------
//
//  HAUD 2025.02.24
//
//  - test program
//    - handshakes with process instances
//
//---------------------------------------------------------------------------------------------------------------
PROGRAM PROCESS_HANDSHAKE
VAR_INPUT
  bEnable     : Bool;
END_VAR
VAR
  bInit       : BOOL;

  // singke switches for testing
  bDisableBufferInfeedSender      : BOOL; // this buffer has to be the first to stop feeding movers, since movers must not be waiting in the vertical 180° curve
  bDisableBufferInfeed            : BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT binit
THEN
  bInit                                                 := TRUE;

  GVL_APPLICATION.tProcess[E_INSTANCE.INFEED]           := T#600MS;
  GVL_APPLICATION.tProcess[E_INSTANCE.OUTFEED_ROBOT_R1] := T#800MS;
  GVL_APPLICATION.tProcess[E_INSTANCE.OUTFEED_ROBOT_R2] := T#800MS;
END_IF
//-----------------------------------------------------------------------------------
// - SenderBufferInfeed  : 1 XtsStation 
//                    movers are handled when entering position area 
//                    movers are sent to BufferInfeed, so that BufferInfeed has 12 mover ready
//                    movers do stop here, wait until there is room for movers
//                    

CASE GVL_APPLICATION.SenderBufferInfeed.State
OF
  E_INSTANCE_STATE.DISABLED:
    CASE GVL_APPLICATION.SenderBufferInfeed.Progress
    OF
      E_PROGRESS.PROGRESS_BUSY:
        IF bEnable
        THEN
          GVL_APPLICATION.SenderBufferInfeed.Command    := SEL(bDisableBufferInfeedSender, E_INSTANCE_CMD.ENABLE, E_INSTANCE_CMD.DISABLE);
        END_IF
    END_CASE

  E_INSTANCE_STATE.FINISH:
    CASE GVL_APPLICATION.SenderBufferInfeed.Progress
    OF
      E_PROGRESS.PROGRESS_BUSY:
        IF bEnable
        THEN
          GVL_APPLICATION.SenderBufferInfeed.Command    := SEL(bDisableBufferInfeedSender, E_INSTANCE_CMD.FINISH, E_INSTANCE_CMD.DISABLE);
        END_IF
    END_CASE
END_CASE

//-----------------------------------------------------------------------------------
// - BufferInfeed     : single XtsStation which looks for input trigger from transfersystem, 
//                      transfersystem writes positions of XtsStations to be used at Infeed. 
//                      BufferInfeed is writing ItfProcessCollector[BufferInfeed.ProcessTarget].ActivateStation for BufferInfeed target (Infeed / 12 XtsStations).
//                      BufferInfeed sends required amount of movers to WaitPos of XtsStations of BufferInfeed target (Infeed / 12 XtsStations).

CASE GVL_APPLICATION.BufferInfeed.State
OF
  E_INSTANCE_STATE.DISABLED:
    CASE GVL_APPLICATION.BufferInfeed.Progress
    OF
      E_PROGRESS.PROGRESS_BUSY:
        IF bEnable
        THEN
          GVL_APPLICATION.BufferInfeed.Command          := E_INSTANCE_CMD.ENABLE;
        END_IF
    END_CASE

  E_INSTANCE_STATE.FINISH:
    CASE GVL_APPLICATION.BufferInfeed.Progress
    OF
      E_PROGRESS.PROGRESS_OCCUPIED:
        IF bEnable
        THEN
          GVL_APPLICATION.BufferInfeed.Command          := E_INSTANCE_CMD.PROCEED;
        END_IF
    END_CASE
END_CASE


//-----------------------------------------------------------------------------------
// - Infeed         : 12 XtsStations for transfersystem to unload
//                    Infeed is pulling in the movers according to list entry from BufferInfeed
//                    one stop only
//                    must be checked for all mover standstill in PosStop[1] of each XtsStation
//                    must be released by handshake from transfersystem (this is done by a TON for now)

CASE GVL_APPLICATION.Infeed.State
OF
  E_INSTANCE_STATE.DISABLED:
    CASE GVL_APPLICATION.Infeed.Progress
    OF
      E_PROGRESS.PROGRESS_BUSY:
        IF bEnable
        THEN
          GVL_APPLICATION.Infeed.Command                := E_INSTANCE_CMD.ENABLE;
        END_IF
    END_CASE

  E_INSTANCE_STATE.WORKING:
    CASE GVL_APPLICATION.Infeed.Progress
    OF
      E_PROGRESS.PROGRESS_BUSY:
        GVL_APPLICATION.tonProcess [E_INSTANCE.INFEED]
                                            (IN         := FALSE, 
                                             PT         := GVL_APPLICATION.tProcess[E_INSTANCE.INFEED]);
        IF bEnable
        THEN
          GVL_APPLICATION.Infeed.Command                := E_INSTANCE_CMD.WORK;
        END_IF


      E_PROGRESS.PROGRESS_CHECK:
        GVL_APPLICATION.tonProcess [E_INSTANCE.INFEED]
                                            (IN         := TRUE, 
                                             PT         := GVL_APPLICATION.tProcess[E_INSTANCE.INFEED]);

        IF GVL_APPLICATION.tonProcess [E_INSTANCE.INFEED].Q
        THEN
          IF bEnable
          THEN
            GVL_APPLICATION.Infeed.Command              := E_INSTANCE_CMD.FINISH;
          END_IF
        END_IF
    END_CASE
END_CASE


//-----------------------------------------------------------------------------------
// - BufferOutfeedRobot  : single XtsStation which distributes movers to OutfeedR2 and OutfeedR1 
//                    Infeed sends all movers here 
//                    BufferOutfeed ensures that OutputR2 and OutputR1 have 12 movers each for every job
//                    BufferOutfeed checks if the Queue of this single XtsStation is empty or not

CASE GVL_APPLICATION.BufferOutfeedRobot.State
OF
  E_INSTANCE_STATE.DISABLED:
    CASE GVL_APPLICATION.BufferOutfeedRobot.Progress
    OF
      E_PROGRESS.PROGRESS_BUSY:
        IF bEnable
        THEN
          GVL_APPLICATION.BufferOutfeedRobot.Command    := E_INSTANCE_CMD.ENABLE;
        END_IF
    END_CASE

  E_INSTANCE_STATE.FINISH:
    CASE GVL_APPLICATION.BufferOutfeedRobot.Progress
    OF
      E_PROGRESS.PROGRESS_BUSY:
        IF bEnable
        THEN
          GVL_APPLICATION.BufferOutfeedRobot.Command    := E_INSTANCE_CMD.FINISH;
        END_IF
    END_CASE
END_CASE


//-----------------------------------------------------------------------------------
// - Outfeed_R1  : 12 XtsStations for Robot 
//                    All XtsStations must be filled before robot can start 
//                    affter process all movers are sent to Sender process (high speed for the way back)
//                     
//                    
(*
CASE GVL_APPLICATION.Outfeed_R1.State
OF
  E_INSTANCE_STATE.DISABLED:
    CASE GVL_APPLICATION.Outfeed_R1.Progress
    OF
      E_PROGRESS.PROGRESS_BUSY:
        GVL_APPLICATION.Outfeed_R1.Command              := E_INSTANCE_CMD.ENABLE;
    END_CASE

  E_INSTANCE_STATE.WORKING:
    CASE GVL_APPLICATION.Outfeed_R1.Progress
    OF
      E_PROGRESS.PROGRESS_BUSY:
        GVL_APPLICATION.tonProcess [E_INSTANCE.OUTFEED_ROBOT_R1]
                                            (IN         := FALSE, 
                                             PT         := GVL_APPLICATION.tProcess[E_INSTANCE.OUTFEED_ROBOT_R1]);
        GVL_APPLICATION.Outfeed_R1.Command              := E_INSTANCE_CMD.WORK;

      E_PROGRESS.PROGRESS_CHECK:
        GVL_APPLICATION.tonProcess [E_INSTANCE.OUTFEED_ROBOT_R1]
                                            (IN         := TRUE, 
                                             PT         := GVL_APPLICATION.tProcess[E_INSTANCE.OUTFEED_ROBOT_R1]);

        IF GVL_APPLICATION.tonProcess [E_INSTANCE.OUTFEED_ROBOT_R1].Q
        THEN
          GVL_APPLICATION.Outfeed_R1.Command            := E_INSTANCE_CMD.FINISH;
        END_IF
    END_CASE
END_CASE
*)

//-----------------------------------------------------------------------------------
// - Outfeed_R2  : 12 XtsStations for Robot 
//                    All XtsStations must be filled before robot can start 
//                    affter process all movers are sent to Sender process (high speed for the way back)
//                     
//                    

CASE GVL_APPLICATION.Outfeed_R2.State
OF
  E_INSTANCE_STATE.DISABLED:
    CASE GVL_APPLICATION.Outfeed_R2.Progress
    OF
      E_PROGRESS.PROGRESS_BUSY:
        IF bEnable
        THEN
          GVL_APPLICATION.Outfeed_R2.Command            := E_INSTANCE_CMD.ENABLE;
          GVL_APPLICATION.Outfeed_R1.Command            := E_INSTANCE_CMD.ENABLE;
        END_IF
    END_CASE

  E_INSTANCE_STATE.WORKING:
    CASE GVL_APPLICATION.Outfeed_R2.Progress
    OF
      E_PROGRESS.PROGRESS_BUSY:
        GVL_APPLICATION.tonProcess [E_INSTANCE.OUTFEED_ROBOT_R2]
                                            (IN         := FALSE, 
                                             PT         := GVL_APPLICATION.tProcess[E_INSTANCE.OUTFEED_ROBOT_R2]);
        IF (GVL_APPLICATION.Outfeed_R1.State = GVL_APPLICATION.Outfeed_R2.State)
        THEN 
          IF bEnable
          THEN
            GVL_APPLICATION.Outfeed_R2.Command          := E_INSTANCE_CMD.WORK;
            GVL_APPLICATION.Outfeed_R1.Command          := E_INSTANCE_CMD.WORK;
          END_IF
        END_IF

      E_PROGRESS.PROGRESS_CHECK:
        GVL_APPLICATION.tonProcess [E_INSTANCE.OUTFEED_ROBOT_R2]
                                            (IN         := TRUE, 
                                             PT         := GVL_APPLICATION.tProcess[E_INSTANCE.OUTFEED_ROBOT_R2]);

        IF GVL_APPLICATION.tonProcess [E_INSTANCE.OUTFEED_ROBOT_R2].Q
        THEN
          IF bEnable
          THEN
            GVL_APPLICATION.Outfeed_R2.Command          := E_INSTANCE_CMD.FINISH;
            GVL_APPLICATION.Outfeed_R1.Command          := E_INSTANCE_CMD.FINISH;
          END_IF
        END_IF
    END_CASE
END_CASE



//-----------------------------------------------------------------------------------
// - SenderFast  : 1 XtsStation 
//                    movers are handled when entering position area 
//                    movers are accelerated to max speed
//                    movers do not stop here
//                    

CASE GVL_APPLICATION.SenderFast.State
OF
  E_INSTANCE_STATE.DISABLED:
    CASE GVL_APPLICATION.SenderFast.Progress
    OF
      E_PROGRESS.PROGRESS_BUSY:
        IF bEnable
        THEN
          GVL_APPLICATION.SenderFast.Command            := E_INSTANCE_CMD.ENABLE;
        END_IF
    END_CASE

  E_INSTANCE_STATE.FINISH:
    CASE GVL_APPLICATION.SenderFast.Progress
    OF
      E_PROGRESS.PROGRESS_BUSY:
        IF bEnable
        THEN
          GVL_APPLICATION.SenderFast.Command            := E_INSTANCE_CMD.FINISH;
        END_IF
    END_CASE
END_CASE



]]></ST>
    </Implementation>
    <LineIds Name="PROCESS_HANDSHAKE">
      <LineId Id="354" Count="1" />
      <LineId Id="360" Count="1" />
      <LineId Id="357" Count="2" />
      <LineId Id="356" Count="0" />
      <LineId Id="517" Count="28" />
      <LineId Id="516" Count="0" />
      <LineId Id="34" Count="5" />
      <LineId Id="173" Count="1" />
      <LineId Id="177" Count="0" />
      <LineId Id="185" Count="2" />
      <LineId Id="405" Count="1" />
      <LineId Id="183" Count="0" />
      <LineId Id="407" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="207" Count="2" />
      <LineId Id="408" Count="0" />
      <LineId Id="410" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="409" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="51" Count="5" />
      <LineId Id="191" Count="6" />
      <LineId Id="412" Count="1" />
      <LineId Id="198" Count="0" />
      <LineId Id="414" Count="0" />
      <LineId Id="199" Count="1" />
      <LineId Id="203" Count="0" />
      <LineId Id="229" Count="2" />
      <LineId Id="239" Count="2" />
      <LineId Id="416" Count="3" />
      <LineId Id="232" Count="0" />
      <LineId Id="235" Count="0" />
      <LineId Id="234" Count="0" />
      <LineId Id="243" Count="2" />
      <LineId Id="248" Count="0" />
      <LineId Id="242" Count="0" />
      <LineId Id="246" Count="0" />
      <LineId Id="421" Count="3" />
      <LineId Id="247" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="205" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="73" Count="5" />
      <LineId Id="213" Count="0" />
      <LineId Id="249" Count="5" />
      <LineId Id="426" Count="3" />
      <LineId Id="256" Count="0" />
      <LineId Id="346" Count="0" />
      <LineId Id="344" Count="0" />
      <LineId Id="348" Count="2" />
      <LineId Id="431" Count="3" />
      <LineId Id="352" Count="0" />
      <LineId Id="265" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="92" Count="7" />
      <LineId Id="266" Count="28" />
      <LineId Id="101" Count="0" />
      <LineId Id="111" Count="7" />
      <LineId Id="295" Count="5" />
      <LineId Id="436" Count="1" />
      <LineId Id="440" Count="1" />
      <LineId Id="439" Count="0" />
      <LineId Id="302" Count="8" />
      <LineId Id="386" Count="1" />
      <LineId Id="443" Count="1" />
      <LineId Id="448" Count="1" />
      <LineId Id="447" Count="0" />
      <LineId Id="388" Count="0" />
      <LineId Id="312" Count="7" />
      <LineId Id="451" Count="1" />
      <LineId Id="456" Count="1" />
      <LineId Id="455" Count="0" />
      <LineId Id="321" Count="2" />
      <LineId Id="119" Count="1" />
      <LineId Id="130" Count="7" />
      <LineId Id="324" Count="5" />
      <LineId Id="459" Count="1" />
      <LineId Id="463" Count="1" />
      <LineId Id="331" Count="0" />
      <LineId Id="371" Count="4" />
      <LineId Id="466" Count="3" />
      <LineId Id="377" Count="0" />
      <LineId Id="332" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="150" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>