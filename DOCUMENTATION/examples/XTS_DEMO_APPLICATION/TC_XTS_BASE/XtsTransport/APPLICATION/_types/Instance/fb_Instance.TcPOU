<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="fb_Instance" Id="{02367fcb-67b8-497b-8382-1c3639f01a80}" SpecialFunc="None">
    <Declaration><![CDATA[//---------------------------------------------------------------------------------------------------------------
//
//  HAUD 2024.11.21
//
//
//  fb_Instance
//-----------------------------------------------------------------------------
//  - base class for my process instance to work with fb_ProcessCollector
//
//  - _nProcess --> whoami, this is me
//
//  - fb_ProcessCollector[_nProcess].Cycle() is called in APPLICATION(PRG)
//    - handles range of XtsStations
//    - range must be closed and in consecutive order
//
//    - combines states into bitmasks, one bit per XtsStation
//    - controls forwarding of commands to range of XtsStations 
//      (see fb_ProcessCollector.Cycle())
//
//  - reference to all _ItfProcessCollector(I_ProcessCollector)[]
//    - _ItfProcessCollector[nProcess] Get/Set properties and methods
//
//  - Control / State of my process
//    - datafield for control and state provided
//    - _Ctrl 
//      --> commands to my process; fb_ProcessCollector[_nProcess]
//      --> is linked (REF=) automatically in Check()
//
//      Cmd               : E_PROCESS_CTRL; // command enum for my process
//      ProcessTarget     : UINT;           // target of my process
//      ActivateStation   : WORD;           // is checked for every job
//                                          // every bit is a XtsStation
//
//      NestMask          : BYTE;           // one mask for all XtsStations
//      - every bit is a PosStop in a XtsStation
//      - copied to every XtsStation in my process when movers are about to leave
//
//    - _State
//      --> satus information from my process
//      --> check for plausible StationLast / StationFirst range of XtsStations
//
//      State             : E_PROCESS_STATE;  // state enuum from my process
//      Result            : E_PROGRESS;       // substate from my process, BUSY signals state is ready for interaction
//      Check             : E_PROCESS_CHECK;  // plausibility check of StationLast and StationFirst 
//
//
//  - basic check and var names, so you can build your procedures with it
//
//  - processes may be connected via linked list, you decide.
//    - linked list for processes is intended to work as job buffer
//    - linked list provides information via ST_PROCESS_DATA, 
//      add what you have to in there
//    - linked ist to all process instances provided
//
//  - inherit this base class for your application, call Check() cyclic
//
//---------------------------------------------------------------------------------------------------------------//
// This SOFTWARE is provided as an Exemple by THE PROVIDER "as is" and "with all faults." THE PROVIDER makes no  //
// representations or warranties of any kind concerning the safety, suitability, lack of viruses, inaccuracies,  //
// typographical errors, or other harmful components of this SOFTWARE. There are inherent dangers in the use of  //
// any software, and you are solely responsible for determining whether this SOFTWARE is compatible with your    //
// equipment and other software installed on your equipment. You are also solely responsible for the protection  //
// of your equipment and backup of your data, and THE PROVIDER will not be liable for any damages you may suffer //
// in connection with using, modifying, or distributing this SOFTWARE.                                           //
//---------------------------------------------------------------------------------------------------------------//
FUNCTION_BLOCK fb_Instance
VAR
  // process index
  _nProcess               : E_INSTANCE;           // whoami

  _InstanceCtrl           : REFERENCE TO ARRAY[1..MAX_PROCESS] OF ST_INSTANCE_CTRL;
  _InstanceState          : REFERENCE TO ARRAY[1..MAX_PROCESS] OF ST_INSTANCE_STATE;

  _eCmd,
  _eCmdOld                : E_INSTANCE_CMD;       // commands for local state machine
  _eStateInstance         : E_INSTANCE_STATE;     // local state machine for infeed procedure

  _eResult,
  _eStateProgress         : E_PROGRESS;           // substate for lacal state machine

  _eInit                  : E_PROGRESS;           // startup
  _eCheck                 : E_INSTANCE_CHECK;     // pointer checks


  // local ctrl / state datafields for you to use, connected by reference to _ItfProcessCollector[_nProcess]
  _Ctrl                   : ST_PROCESS_CTRL;      // control to write, connected by reference to _ItfProcessCollector
  _State                  : ST_PROCESS_STATE;     // state   to read,  connected by reference to _ItfProcessCollector

  _ItfProcessCollector    : ARRAY[1..MAX_PROCESS] OF I_ProcessCollector;    // information and configuration of the connected ProcessCollector for given range of XtsStations

  _ItfProcessList         : ARRAY[1..MAX_PROCESS] OF I_Process_LinkedList;  // access to all linked lists for process entry
  _ListResult             : ST_PROCESS_LIST_RESULT;
  _ProcessData            : ST_PROCESS_DATA;

  {attribute 'displaymode':='bin'}
  _wTargetMask            : ARRAY[1..SIZEOF(T_PROCESS)*8] OF BYTE; // bits for PosStop[] to use in XtsStation of target process

  _stMsg                  : ST_Message;
  _MessageLevel           : E_MessageType;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="properties" Id="{5f969983-7274-474e-ad53-ecf15d94990d}" />
    <Method Name="Check" Id="{04192027-e492-4023-92ca-671af767f088}">
      <Declaration><![CDATA[METHOD Check : BOOL // call this method in the extending/inheriting class
VAR_INST
  _eCommandOld    : E_INSTANCE_CMD;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
// plausibility checks
//-----------------------------------------------------------------------------
IF NOT (_nProcess > 0)
THEN
  _eCheck                 := E_INSTANCE_CHECK.INVALID_PROCESS_ID_ZERO;
  RETURN;
END_IF

IF NOT (_nProcess < E_INSTANCE.INSTANCE_MAX)
THEN
  _eCheck                 := E_INSTANCE_CHECK.INVALID_PROCESS_ID_MAX;
  RETURN;
END_IF
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
// pointer checks
//-----------------------------------------------------------------------------
IF NOT __ISVALIDREF(_InstanceCtrl)
THEN
  _eCheck                 := E_INSTANCE_CHECK.INVALID_INSTANCE_CONTROL_REFERENCE;
  RETURN;
END_IF

IF NOT __ISVALIDREF(_InstanceState)
THEN
  _eCheck                 := E_INSTANCE_CHECK.INVALID_INSTANCE_STATE_REFERENCE;
  RETURN;
END_IF

IF NOT (_ItfProcessCollector[_nProcess] <> 0) 
THEN
  _eCheck                 := E_INSTANCE_CHECK.INVALID_INTERFACE_POINTER;
  RETURN;
END_IF

IF NOT (_ItfProcessCollector[_nProcess].ProcessId > 0)
THEN
  _eCheck                 := E_INSTANCE_CHECK.INVALID_PROCESS_ID_ZERO;
  RETURN;
END_IF

IF NOT (_ItfProcessCollector[_nProcess].ProcessId < E_INSTANCE.INSTANCE_MAX)
THEN
  _eCheck                 := E_INSTANCE_CHECK.INVALID_PROCESS_ID_MAX;
  RETURN;
END_IF

IF NOT (_nProcess = _ItfProcessCollector[_nProcess].ProcessId)
THEN
  _eCheck                 := E_INSTANCE_CHECK.INVALID_PROCESS_ID_NOTEQUAL_COLLECTOR_ID;
  RETURN;
END_IF

IF NOT (_ItfProcessList[_nProcess] <> 0)
THEN
  _eCheck                 := E_INSTANCE_CHECK.INVALID_INDEX_IN_LIST;
  RETURN;
END_IF
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
// connect datafields to interface of ProcessCollector
//-----------------------------------------------------------------------------
_ItfProcessCollector[_nProcess].ProcessCtrl   REF= _Ctrl;
_ItfProcessCollector[_nProcess].ProcessState  REF= _State;

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
// set message device
//-----------------------------------------------------------------------------
_stMsg.eDevice            := e_Device.Process + TO_UINT(_nProcess);
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
// log cmd change
//-----------------------------------------------------------------------------
IF _eCmd <> _eCommandOld
THEN
  _eCommandOld              := _eCmd;

  IF (_MessageLevel = E_MessageType.eMessageVerbose)
  THEN
    _stMsg.eType            := E_MessageType.eMessageVerbose;
    _stMsg.eSubdevice       := e_Subdevice.Instance_Command;
    _stMsg.iErrorNumber     := _nProcess;
    _stMsg.sText            := concat(TO_STRING(_nProcess), ': ');
    _stMsg.sText            := concat(_stMsg.sText, TO_STRING(_eCmd));
    f_MessageSet(_stMsg);
  END_IF
END_IF
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
_eCheck                   := E_INSTANCE_CHECK.CHECK_DONE;
Check                     := TRUE;


]]></ST>
      </Implementation>
    </Method>
    <Property Name="CollectorInterface" Id="{7856fb23-1ef1-472e-9855-7bec6a7c2039}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY CollectorInterface : array[1..MAX_PROCESS] of I_ProcessCollector]]></Declaration>
      <Set Name="Set" Id="{d83e93f2-0907-4e4e-899d-c33bd6f05c59}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_ItfProcessCollector := CollectorInterface;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="InstanceCtrl" Id="{db5cb503-c126-4bf4-9d9e-33d5513507b6}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY InstanceCtrl : REFERENCE TO ARRAY[1..MAX_PROCESS] OF ST_INSTANCE_CTRL]]></Declaration>
      <Set Name="Set" Id="{eaba3005-7366-4abe-8b29-c097c6288b47}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_InstanceCtrl ref= InstanceCtrl;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="InstanceState" Id="{24069783-085b-4d3c-814f-09ba43146601}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY InstanceState : REFERENCE TO ARRAY[1..MAX_PROCESS] OF ST_INSTANCE_STATE]]></Declaration>
      <Set Name="Set" Id="{dea38988-006a-4feb-a9dc-eb0cdbca8050}">
        <Declaration><![CDATA[
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_InstanceState ref= InstanceState;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MessageLevel" Id="{a9dd7dcf-ba21-477a-8a42-fa64c360ded3}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY MessageLevel : e_MessageType]]></Declaration>
      <Set Name="Set" Id="{94a317c5-92cc-4719-aa6d-49ab52f30950}">
        <Declaration><![CDATA[VAR
  _mlidx      : UINT;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF NOT Check() THEN RETURN; END_IF
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
// message levels for underlying ProcessCollector and XtsStations
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
_MessageLevel                                 :=  MessageLevel;
GVL_MSG.MessageLevelProcess[_nProcess]        := _MessageLevel;

FOR _mlidx := _ItfProcessCollector[_nProcess].StationFirst 
           TO _ItfProcessCollector[_nProcess].StationLast
DO
  GVL_MSG.MessageLevelStations[_mlidx]        := _MessageLevel;
END_FOR
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="ProcessId" Id="{bc02b386-af4a-427a-bfae-f03f977e543e}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY ProcessId : E_INSTANCE]]></Declaration>
      <Get Name="Get" Id="{f26a4457-27eb-4b2a-bb3e-26741e3e8a80}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ProcessId := _nProcess;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{82f5dac8-30d1-408a-8463-5b7d3dbc951d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_nProcess := ProcessId;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="ProcessLinkedLists" Id="{f1f4c45b-0247-4e47-9cfc-0c8d3318a647}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY ProcessLinkedLists : ARRAY[1..max_process] OF I_Process_LinkedList]]></Declaration>
      <Set Name="Set" Id="{d5137f63-8b56-4b2c-a086-29d9076bed68}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_ItfProcessList := ProcessLinkedLists;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="fb_Instance">
      <LineId Id="139" Count="0" />
    </LineIds>
    <LineIds Name="fb_Instance.Check">
      <LineId Id="93" Count="3" />
      <LineId Id="51" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="55" Count="1" />
      <LineId Id="58" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="60" Count="1" />
      <LineId Id="98" Count="3" />
      <LineId Id="115" Count="1" />
      <LineId Id="120" Count="0" />
      <LineId Id="117" Count="1" />
      <LineId Id="121" Count="5" />
      <LineId Id="119" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="24" Count="0" />
      <LineId Id="26" Count="4" />
      <LineId Id="43" Count="5" />
      <LineId Id="62" Count="2" />
      <LineId Id="67" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="16" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="89" Count="3" />
      <LineId Id="74" Count="1" />
      <LineId Id="113" Count="0" />
      <LineId Id="82" Count="4" />
      <LineId Id="130" Count="3" />
      <LineId Id="129" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="148" Count="1" />
      <LineId Id="138" Count="1" />
      <LineId Id="142" Count="5" />
      <LineId Id="140" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="87" Count="1" />
      <LineId Id="21" Count="2" />
      <LineId Id="18" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Instance.CollectorInterface.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Instance.InstanceCtrl.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Instance.InstanceState.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="fb_Instance.MessageLevel.Set">
      <LineId Id="24" Count="0" />
      <LineId Id="5" Count="4" />
      <LineId Id="31" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="28" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="fb_Instance.ProcessId.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Instance.ProcessId.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Instance.ProcessLinkedLists.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>