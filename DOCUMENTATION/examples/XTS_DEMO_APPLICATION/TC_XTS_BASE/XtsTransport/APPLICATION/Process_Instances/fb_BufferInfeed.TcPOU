<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="fb_BufferInfeed" Id="{8f83a517-0564-4150-8e42-db4c72a4f053}" SpecialFunc="None">
    <Declaration><![CDATA[//---------------------------------------------------------------------------------------------------------------
//
//  HAUD 2024.11.15
//
//
//  fb_BufferInfeed
//  - inherits fb_Instance, which provides a design pattern in order to build different specific processes in a structured way
//  - uses a single XtsStation via _ItfProcessCollector
//  - used for targeting movers to predetermined substations of process control (1 to many)
//  - processes are connected via linked list
//    - entry in list is detected
//    - entry in list determines count and place of used XtsStations in target process
//
//
//  - constructed with fb_Instance main state (_eStateInstance) in addition to a substate (_eStateProgress)
//  - substate enables to handle procedures within main state by preventing race conditions 
//    with the help of small steps and decisions with clear separation from each other 
//
//---------------------------------------------------------------------------------------------------------------//
// This SOFTWARE is provided as an Exemple by THE PROVIDER "as is" and "with all faults." THE PROVIDER makes no  //
// representations or warranties of any kind concerning the safety, suitability, lack of viruses, inaccuracies,  //
// typographical errors, or other harmful components of this SOFTWARE. There are inherent dangers in the use of  //
// any software, and you are solely responsible for determining whether this SOFTWARE is compatible with your    //
// equipment and other software installed on your equipment. You are also solely responsible for the protection  //
// of your equipment and backup of your data, and THE PROVIDER will not be liable for any damages you may suffer //
// in connection with using, modifying, or distributing this SOFTWARE.                                           //
//---------------------------------------------------------------------------------------------------------------//
FUNCTION_BLOCK fb_BufferInfeed EXTENDS fb_Instance
VAR
  _nProcessTarget               : E_INSTANCE;     // who am I connected to

  // target XTS station range
  _nTargetStationLast           : UINT;           // where does the target process end
  _nTargetStationFirst          : UINT;           // where does the target process start

  _rCheckPos                    : LREAL;

  _WriteResult                  : ST_PROCESS_LIST_RESULT;   // last job written to target
  _DeleteResult                 : ST_PROCESS_LIST_RESULT;   // last job executed

  _idx                          : UINT;
  _nTargetIndex                 : ARRAY[1..SIZEOF(T_PROCESS)*8] OF USINT;

  _MoverInfo                    : ST_MOVER_INFO;      // Information from the Mover in Station
  _StationState                 : ST_STATION_STATE;   // BufferInfeed has only one XtsStation to work
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
// check pointer and interface
// connect Ctrl/State to _ItfProcessCollector
// set message device identification
//-----------------------------------------------------------------------------
IF NOT Check() THEN 
  RETURN; 
END_IF
//-----------------------------------------------------------------------------
// check command
//-----------------------------------------------------------------------------
_eCmd                                 := _InstanceCtrl[_nProcess].Cmd;
IF (_eCmd <> _eCmdOld)
THEN
  CASE _eCmd
  OF
    E_INSTANCE_CMD.INIT:
      // clear init info
      _eInit                          := _ItfProcessCollector[_nProcess].Init(FALSE);
  
      IF _ItfProcessList[_nProcess].InitList()  // clear linked list
      THEN
        Clear();
        _eStateInstance               := E_INSTANCE_STATE.INIT;
        _eStateProgress               := E_PROGRESS.PROGRESS_INIT;
      END_IF
  END_CASE
  _eCmdOld                            := _eCmd;
END_IF
//-----------------------------------------------------------------------------
// cyclic information of mover and station
//-----------------------------------------------------------------------------
_StationState                         := _ItfProcessCollector[_nProcess].GetStationState  (_ItfProcessCollector[_nProcess].StationLast);
_MoverInfo                            := _ItfProcessCollector[_nProcess].GetMoverInStation(_ItfProcessCollector[_nProcess].StationLast);

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
// state machine for BufferInfeed work
//-----------------------------------------------------------------------------
CASE _eStateInstance
OF
  E_INSTANCE_STATE.NULL:
    // first cycle startup
    // initialize linked list, clears all entries
    IF _ItfProcessList[_nProcess].InitList()
    THEN
      _eInit                          := _ItfProcessCollector[_nProcess].Init(FALSE);
      _eStateProgress                 := E_PROGRESS.PROGRESS_INIT;
      _eStateInstance                 := E_INSTANCE_STATE.INIT;
    END_IF


  E_INSTANCE_STATE.INIT:
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
    // E_INSTANCE_STATE.INIT:
    //-------------------------------------------------------------------------
      E_PROGRESS.PROGRESS_ERROR:
        IF (_nProcessTarget > 0) AND
           (_nProcessTarget < E_INSTANCE.INSTANCE_MAX)
        THEN
          _eStateProgress             := E_PROGRESS.PROGRESS_INIT;
        END_IF

    // E_INSTANCE_STATE.INIT:
    //-------------------------------------------------------------------------
      E_PROGRESS.PROGRESS_INIT:
        IF NOT (_nProcessTarget > 0) OR
           NOT (_nProcessTarget < E_INSTANCE.INSTANCE_MAX)
        THEN
          _eStateProgress             := E_PROGRESS.PROGRESS_ERROR;
        ELSE
          _eStateProgress             := E_PROGRESS.PROGRESS_BUSY;
        END_IF

    // E_INSTANCE_STATE.INIT:
    //-------------------------------------------------------------------------
      E_PROGRESS.PROGRESS_BUSY:
        // wait for process collector check to be done
        //  - checks range of XtsStations
        //  - checks count of XtsStations
        IF (_State.Check = E_PROCESS_CHECK.PROCESS_CHECK_DONE)
        THEN
          _eInit                      := _ItfProcessCollector[_nProcess].Init(TRUE);
  
          IF (_eInit = E_PROGRESS.PROGRESS_DONE)
          THEN
            IF NOT (_nProcessTarget > 0) OR
               NOT (_nProcessTarget < E_INSTANCE.INSTANCE_MAX)
            THEN
              _eStateProgress         := E_PROGRESS.PROGRESS_ERROR;
            ELSE
              _ItfProcessCollector[_nProcess].Init(FALSE); // clear init procedure

              // for ease of use; copy target XtsStation range to local helper vars
              _nTargetStationLast     := _ItfProcessCollector[_nProcessTarget].StationLast;
              _nTargetStationFirst    := _ItfProcessCollector[_nProcessTarget].StationFirst;
      
              // initialization of BufferInfeed: _ItfProcessCollector with XtsStation
              _Ctrl.Cmd               := E_PROCESS_CTRL.PROCESS_DISABLE;  // switch off _ItfProcessCollector and XtsStation
              _eStateProgress         := E_PROGRESS.PROGRESS_INIT;        // clear sub state
              _eStateInstance         := E_INSTANCE_STATE.DISABLED;       // switch to disabled as default after startup
            END_IF
          END_IF
        END_IF
    END_CASE
END_CASE
//-----------------------------------------------------------------------------
// DISABLED:
//  - clear local list result data
//  - wait for enable from the outside
//-----------------------------------------------------------------------------
CASE _eStateInstance
OF
  E_INSTANCE_STATE.DISABLED:
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_INIT:
        _Ctrl.Cmd                     := E_PROCESS_CTRL.PROCESS_DISABLE;  // switch off _ItfProcessCollector and XtsStation
        _eStateProgress               := E_PROGRESS.PROGRESS_BUSY;
        // clear data for a new round
        memset(ADR(_ListResult), 0, SIZEOF(_ListResult));

        _Ctrl.ActivateStation         := 0; // clear activation mask of my process
        _Ctrl.NestMask                := 1; // my process target has one nest
    END_CASE
    // E_INSTANCE_STATE.DISABLED:
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_BUSY:
        CASE _eCmd
        OF
          E_INSTANCE_CMD.ENABLE:      // turn it on!!
            _eStateInstance           := E_INSTANCE_STATE.DETECT_IN_LIST;
            _eStateProgress           := E_PROGRESS.PROGRESS_BUSY;
  
            IF (_MessageLevel = E_MessageType.eMessageVerbose)
            THEN
              _stMsg.eType            := E_MessageType.eMessageVerbose;
              _stMsg.eSubdevice       := e_Subdevice.Process_LinkedList_GetHead;
              _stMsg.iErrorNumber     := 0;
              _stMsg.sText            := concat(TO_STRING(_eStateInstance), ': ');
              _stMsg.sText            := concat(_stMsg.sText, TO_STRING(_eStateProgress));
              f_MessageSet(_stMsg);
            END_IF

        END_CASE
    END_CASE
END_CASE
//-----------------------------------------------------------------------------
// DETECT_IN_LIST: 
//  - check inked list and GetHead()
//  - copy job data
//  - switch on process
//-----------------------------------------------------------------------------
CASE _eStateInstance
OF
  E_INSTANCE_STATE.DETECT_IN_LIST:
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_INIT:
        IF (_eCmd = E_INSTANCE_CMD.PROCEED)
        THEN
          _eStateProgress             := E_PROGRESS.PROGRESS_BUSY;
        END_IF
    END_CASE
    // E_INSTANCE_STATE.DETECT_IN_LIST
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_BUSY:
        IF (_eCmd = E_INSTANCE_CMD.DISABLE)
        THEN
          _eStateInstance             := E_INSTANCE_STATE.DISABLED;
          _eStateProgress             := E_PROGRESS.PROGRESS_INIT;

        ELSIF (_ItfProcessList[_nProcess].Count > 0)
        THEN
          // get new job order for my process
          // check my list for a new round of movers
          _ListResult                 := _ItfProcessList[_nProcess].GetHead();  // the list results carries information about the requirements of the target process (who and where)

          IF (_ListResult.wState <> 0)
          THEN
            // error in list results must not appear
            // if you land here, there is somethng wrong with the initialization or configuration of the linked list
            _eStateProgress           := E_PROGRESS.PROGRESS_ERROR;

            _stMsg.eType              := E_MessageType.eMessageError;
            _stMsg.eSubdevice         := e_Subdevice.Process_LinkedList_GetHead;
            _stMsg.iErrorNumber       := _ListResult.wState;
            _stMsg.sText              := concat(TO_STRING(_eStateInstance), ': ');
            _stMsg.sText              := concat(_stMsg.sText, TO_STRING(_eStateProgress));
            f_MessageSet(_stMsg);

          ELSE
            IF (_MessageLevel = E_MessageType.eMessageVerbose)
            THEN
              _stMsg.eType            := E_MessageType.eMessageVerbose;
              _stMsg.eSubdevice       := e_Subdevice.Process_LinkedList_GetHead;
              _stMsg.iErrorNumber     := 0;
              _stMsg.sText            := concat(TO_STRING(_eStateInstance), ': ');
              _stMsg.sText            := concat(_stMsg.sText, '_ListResult.stData.wTarget: ');
              _stMsg.sText            := concat(_stMsg.sText, _ItfProcessCollector[_nProcess].BitsToString(_ListResult.stData.wTarget));
              f_MessageSet(_stMsg);
            END_IF

            _ProcessData              := _ListResult.stData;  // list result contains data for target process

            IF (_ProcessData.wTarget > 0)
            THEN
              _eStateProgress         := E_PROGRESS.PROGRESS_CHECK;
            ELSE
              _DeleteResult           := _ItfProcessList[_nProcess].RemoveHeadValue();
            END_IF


            // check target mask for entries
            IF NOT (_ProcessData.wTarget > 0)
            THEN
              //_eStateProgress         := E_PROGRESS.PROGRESS_ERROR;

              _stMsg.eType            := E_MessageType.eMessageWarning;
              _stMsg.eSubdevice       := e_Subdevice.Process_LinkedList_CheckData;
              _stMsg.iErrorNumber     := 666;
              _stMsg.sText            := concat(TO_STRING(_eStateInstance), ': ');
              _stMsg.sText            := concat(_stMsg.sText, '_ProcessData.wTarget: ');
              _stMsg.sText            := concat(_stMsg.sText, _ItfProcessCollector[_nProcess].BitsToString(_ProcessData.wTarget));
              f_MessageSet(_stMsg);
            END_IF
          END_IF
        END_IF
    END_CASE
    // E_INSTANCE_STATE.DETECT_IN_LIST
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_CHECK:
        // check for disabled process interface state
        CASE _State.State
        OF
          E_PROCESS_STATE.PROCESS_DISABLE:

          CASE _State.Result
          OF
            E_PROGRESS.PROGRESS_BUSY:     // busy from _State.Result means, waiting for input
              // now the preparation for the target process may begin
              _Ctrl.Cmd               := E_PROCESS_CTRL.PROCESS_ENABLE; // switch on my state machine in _ItfProcessCollector
              _Ctrl.ActivateStation   := 1;                             // enable my XtsStation in _ItfProcessCollector (BufferInfeed has only one XtsStation)

              _eStateInstance         := E_INSTANCE_STATE.ENABLED;      // go check if my process is switched on
              _eStateProgress         := E_PROGRESS.PROGRESS_INIT;      // reset substate

              IF (_MessageLevel = E_MessageType.eMessageVerbose)
              THEN
                _stMsg.eType          := E_MessageType.eMessageVerbose;
                _stMsg.eSubdevice     := e_Subdevice.Instance_BufferInfeed_CheckDisabled;
                _stMsg.iErrorNumber   := 0;
                _stMsg.sText          := concat(TO_STRING(_eStateInstance), ': ');
                _stMsg.sText          := concat(_stMsg.sText, TO_STRING(_eStateProgress));
                _stMsg.sText          := concat(_stMsg.sText, ': ');
                _stMsg.sText          := concat(_stMsg.sText, TO_STRING(_Ctrl.Cmd));
                f_MessageSet(_stMsg);
              END_IF

          END_CASE
        END_CASE
    END_CASE
END_CASE
//-----------------------------------------------------------------------------
// ENABLED
//  - check process for enabled stations from list entry
//  - switch to infeed
//  - check if infeed is active on all required stations
//  - allow movers to enter
//  - check if movers arrived at PosStop[1]
//-----------------------------------------------------------------------------
CASE _eStateInstance
OF
  E_INSTANCE_STATE.ENABLED:
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_INIT:
        CASE _State.State
        OF
          E_PROCESS_STATE.PROCESS_ENABLE:
          CASE _State.Result
          OF
            E_PROGRESS.PROGRESS_BUSY:
              // now my process and all XtsStations within are switched on
              // check infeed into my process
              _Ctrl.Cmd               := E_PROCESS_CTRL.PROCESS_STATIONS_INFEED; // tells my process to go check the infeed
              _eStateProgress         := E_PROGRESS.PROGRESS_BUSY; // go check how the infeed into my process is doing

              IF (_MessageLevel = E_MessageType.eMessageVerbose)
              THEN
                _stMsg.eType          := E_MessageType.eMessageVerbose;
                _stMsg.eSubdevice     := e_Subdevice.Instance_BufferInfeed_CheckEnabled;
                _stMsg.iErrorNumber   := 0;
                _stMsg.sText          := concat(TO_STRING(_eStateInstance), ': ');
                _stMsg.sText          := concat(_stMsg.sText, TO_STRING(_eStateProgress));
                _stMsg.sText          := concat(_stMsg.sText, ': ');
                _stMsg.sText          := concat(_stMsg.sText, TO_STRING(_Ctrl.Cmd));
                f_MessageSet(_stMsg);
              END_IF
          END_CASE
        END_CASE
    END_CASE
    // E_INSTANCE_STATE.ENABLED:
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_BUSY:
        CASE _State.State
        OF
          E_PROCESS_STATE.PROCESS_STATIONS_INFEED:
          CASE _State.Result
          OF
            E_PROGRESS.PROGRESS_BUSY:
            IF (_MoverInfo.rModuloActPos < GVL_XTS.StationParameter[53].rPosWait + 5.0)
            THEN
              // now we know who wants to enter
              _Ctrl.Cmd               := E_PROCESS_CTRL.PROCESS_STATIONS_SEND; // the InfeedBuffer does not need a standstill at PosStop, --> send mover at once

              _eStateInstance         := E_INSTANCE_STATE.FINISH;   // go get data ready for outfeed
              _eStateProgress         := E_PROGRESS.PROGRESS_INIT;  // reset substate

              IF (_MessageLevel = E_MessageType.eMessageVerbose)
              THEN
                _stMsg.eType          := E_MessageType.eMessageVerbose;
                _stMsg.eSubdevice     := e_Subdevice.Instance_BufferInfeed_CheckInfeed;
                _stMsg.iErrorNumber   := 0;
                _stMsg.sText          := concat(TO_STRING(_eStateInstance), ': ');
                _stMsg.sText          := concat(_stMsg.sText, TO_STRING(_eStateProgress));
                _stMsg.sText          := concat(_stMsg.sText, ': ');
                _stMsg.sText          := concat(_stMsg.sText, TO_STRING(_Ctrl.Cmd));
                f_MessageSet(_stMsg);
              END_IF
            END_IF
          END_CASE
        END_CASE
    END_CASE
END_CASE
//-----------------------------------------------------------------------------
// FINISH:
//  - write target (Infeed: Last to First)
//  - delete target bit from linked list result (_ProcessData.wTarget)
//  - send out mover
//  - check _ProcessData.wTarget for next mover
//  - check if all movers in job were sent (ProcessData.wTarget = 0)
//  - RemoveHead() from my list
//  - AddTail() at TargetProcess
//  - check to proceed
//-----------------------------------------------------------------------------
CASE _eStateInstance
OF
  E_INSTANCE_STATE.FINISH:
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_INIT:
      // check bit mask for sending mover to required targets
      // get target index for mover from process list entry
      FOR _idx := _nTargetStationLast TO _nTargetStationFirst BY(-1)
      DO
        IF (ItfProcessCollector[_nProcess].GetBit(_ProcessData.wTarget, _idx-_nTargetStationFirst))
        THEN
          _eStateProgress             := E_PROGRESS.PROGRESS_BUSY;

          _nTargetIndex[1]                            := TO_USINT(_idx);
          _ItfProcessCollector[_nProcess].TargetIndex := _nTargetIndex; // write Xts target onto my ProcessCollector interface

          IF (_MessageLevel = E_MessageType.eMessageVerbose)
          THEN
            _stMsg.eType              := E_MessageType.eMessageVerbose;
            _stMsg.eSubdevice         := e_Subdevice.Instance_BufferInfeed_CheckTarget;
            _stMsg.iErrorNumber       := _idx;
            _stMsg.sText              := concat('_ProcessData.wTarget: ', 
                                         _ItfProcessCollector[_nProcess].BitsToString(_ProcessData.wTarget));
            f_MessageSet(_stMsg);
          END_IF

          // got the target, now delete the just found bit of this job
          _ProcessData.wTarget        := _ItfProcessCollector[_nProcess].
                                         DelBit(_ProcessData.wTarget, _idx-_nTargetStationFirst);
          EXIT;
        END_IF
      END_FOR
    END_CASE
    // E_INSTANCE_STATE.FINISH:
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_BUSY:
        CASE _State.State
        OF
          E_PROCESS_STATE.PROCESS_STATIONS_OUTFEED: // double check my process' state
          CASE _State.Result
          OF
            E_PROGRESS.PROGRESS_BUSY:
              // now data is prepared and copied to the right places
              _Ctrl.Cmd               := E_PROCESS_CTRL.PROCESS_STATIONS_OUTFEED; // tell my process to release the mover
              _eStateProgress         := E_PROGRESS.PROGRESS_CHECK; // go check for more to do

              IF (_MessageLevel = E_MessageType.eMessageVerbose)
              THEN
                _stMsg.eType          := E_MessageType.eMessageVerbose;
                _stMsg.eSubdevice     := e_Subdevice.Instance_BufferInfeed;
                _stMsg.iErrorNumber   := 0;
                _stMsg.sText          := concat(TO_STRING(_eStateInstance), ': ');
                _stMsg.sText          := concat(_stMsg.sText, TO_STRING(_eStateProgress));
                _stMsg.sText          := concat(_stMsg.sText, ': ');
                _stMsg.sText          := concat(_stMsg.sText, TO_STRING(_Ctrl.Cmd));
                f_MessageSet(_stMsg);
              END_IF
          END_CASE
        END_CASE
    END_CASE
    // E_INSTANCE_STATE.FINISH:
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_CHECK:
        CASE _State.State
        OF
          E_PROCESS_STATE.PROCESS_DISABLE:
            IF (_ProcessData.wTarget <> 0)
            THEN
              _eStateProgress         := E_PROGRESS.PROGRESS_OCCUPIED;
            ELSE
              // job done, all movers were sent
              // job done, delete from top of my list
              _DeleteResult           := _ItfProcessList[_nProcess].RemoveHeadValue();

              IF (_DeleteResult.wState <> 0)
              THEN
                // deleting from list must be successful
                // IF you land here, there is something wrong with initialization or configuration of the linked list
                _eStateProgress       := E_PROGRESS.PROGRESS_ERROR;
              ELSE
                _eStateProgress       := E_PROGRESS.PROGRESS_WORKING; // job is done, now go and write ticket to _nTargetProcess
              END_IF
            END_IF 
        END_CASE
    END_CASE
    // E_INSTANCE_STATE.FINISH:
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_OCCUPIED:
        IF (_eCmd = E_INSTANCE_CMD.PROCEED)
        THEN
          // job not finished, go back and get next mover
          _eStateInstance             := E_INSTANCE_STATE.DETECT_IN_LIST;
          _eStateProgress             := E_PROGRESS.PROGRESS_CHECK;
        END_IF
    END_CASE
    // E_INSTANCE_STATE.FINISH:
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_WORKING:
        // write process ticket, then go back up
        _WriteResult                  := _ItfProcessList[_nProcessTarget].AddTailValue(_ListResult.stData);

        IF (_WriteResult.wState <> 0)
        THEN
          // adding to target list must be successful on the first try
          // IF you land here, there is something wrong with initialization or configuration of the linked list
          _eStateProgress             := E_PROGRESS.PROGRESS_ERROR;
        ELSE
          _eStateProgress             := E_PROGRESS.PROGRESS_DONE;

          IF (_MessageLevel = E_MessageType.eMessageVerbose)
          THEN
            _stMsg.eType              := E_MessageType.eMessageVerbose;
            _stMsg.eSubdevice         := e_Subdevice.Instance_BufferInfeed;
            _stMsg.iErrorNumber       := _nProcessTarget;
            _stMsg.sText              := concat(TO_STRING(_eStateInstance), ': ');
            _stMsg.sText              := concat(_stMsg.sText, TO_STRING(_eStateProgress));
            f_MessageSet(_stMsg);
          END_IF
        END_IF
    END_CASE
    // E_INSTANCE_STATE.FINISH:
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_DONE:
        _eStateInstance               := E_INSTANCE_STATE.DISABLED;
        _eStateProgress               := E_PROGRESS.PROGRESS_INIT;
    END_CASE
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
_InstanceState[_nProcess].State       := _eStateInstance;
_InstanceState[_nProcess].Progress    := _eStateProgress;
]]></ST>
    </Implementation>
    <Property Name="CheckPosition" Id="{c13b0648-06f0-45f9-857f-74ffaa73092d}">
      <Declaration><![CDATA[PROPERTY CheckPosition : lreal]]></Declaration>
      <Get Name="Get" Id="{496ea180-cf0a-4827-b07c-b746514a1615}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CheckPosition := _rCheckPos;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{d531790d-e797-42a4-bdeb-e90bdd37f5f8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_rCheckPos := CheckPosition;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Clear" Id="{e1095da2-e43f-4255-869b-bf84b40fa85f}">
      <Declaration><![CDATA[METHOD Clear : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[memset(ADR(_nTargetIndex), 0, SIZEOF(_nTargetIndex));

_eStateInstance                         := E_INSTANCE_STATE.DISABLED;
_eStateProgress                 := E_PROGRESS.PROGRESS_INIT;

Clear                           := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="ProcessTarget" Id="{38c811f4-115c-4811-8470-21f17521dd8d}">
      <Declaration><![CDATA[PROPERTY ProcessTarget : E_INSTANCE]]></Declaration>
      <Get Name="Get" Id="{8032149b-55fa-4949-aaaf-24ed2f5a7c43}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ProcessTarget := _nProcessTarget;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{c90b1a7b-6f18-45b6-b83f-1e823ca71d23}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_nProcessTarget := ProcessTarget;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="fb_BufferInfeed">
      <LineId Id="6481" Count="130" />
      <LineId Id="7038" Count="1" />
      <LineId Id="6612" Count="42" />
      <LineId Id="6961" Count="3" />
      <LineId Id="6960" Count="0" />
      <LineId Id="6657" Count="1" />
      <LineId Id="6967" Count="1" />
      <LineId Id="6659" Count="21" />
      <LineId Id="7030" Count="1" />
      <LineId Id="6682" Count="3" />
      <LineId Id="7019" Count="0" />
      <LineId Id="7018" Count="0" />
      <LineId Id="7020" Count="0" />
      <LineId Id="6686" Count="0" />
      <LineId Id="7021" Count="0" />
      <LineId Id="7023" Count="0" />
      <LineId Id="7022" Count="0" />
      <LineId Id="7016" Count="0" />
      <LineId Id="6687" Count="10" />
      <LineId Id="7029" Count="0" />
      <LineId Id="6698" Count="31" />
      <LineId Id="7036" Count="0" />
      <LineId Id="7026" Count="0" />
      <LineId Id="6730" Count="39" />
      <LineId Id="7035" Count="0" />
      <LineId Id="7027" Count="0" />
      <LineId Id="6770" Count="30" />
      <LineId Id="7034" Count="0" />
      <LineId Id="7028" Count="0" />
      <LineId Id="6801" Count="74" />
      <LineId Id="7033" Count="0" />
      <LineId Id="7032" Count="0" />
      <LineId Id="6876" Count="83" />
      <LineId Id="139" Count="0" />
    </LineIds>
    <LineIds Name="fb_BufferInfeed.CheckPosition.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_BufferInfeed.CheckPosition.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_BufferInfeed.Clear">
      <LineId Id="6" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_BufferInfeed.ProcessTarget.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_BufferInfeed.ProcessTarget.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>