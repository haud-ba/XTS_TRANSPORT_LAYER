<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="fb_OutfeedRobot" Id="{0ebf429e-82e9-4523-8b3c-80e3eae4df8a}" SpecialFunc="None">
    <Declaration><![CDATA[//---------------------------------------------------------------------------------------------------------------
//
//  HAUD 2024.12.19
//
//
//  fb_OutfeedRobot
//  - inherits fb_Instance, which provides a design pattern in order to build different specific processes in a structured way
//  - uses 12 XtsStations via _ItfProcessCollector
//
//
//  - constructed with fb_Instance main state (_eState) in addition to a substate (_eStateProgress)
//  - substate enables to handle procedures within main state by preventing race conditions 
//    with the help of small steps and decisions with clear separation from each other 
//
//---------------------------------------------------------------------------------------------------------------//
// This SOFTWARE is provided as an Exemple by THE PROVIDER "as is" and "with all faults." THE PROVIDER makes no  //
// representations or warranties of any kind concerning the safety, suitability, lack of viruses, inaccuracies,  //
// typographical errors, or other harmful components of this SOFTWARE. There are inherent dangers in the use of  //
// any software, and you are solely responsible for determining whether this SOFTWARE is compatible with your    //
// equipment and other software installed on your equipment. You are also solely responsible for the protection  //
// of your equipment and backup of your data, and THE PROVIDER will not be liable for any damages you may suffer //
// in connection with using, modifying, or distributing this SOFTWARE.                                           //
//---------------------------------------------------------------------------------------------------------------//
FUNCTION_BLOCK fb_OutfeedRobot EXTENDS fb_Instance
VAR
  _nProcessTarget               : E_INSTANCE;     // who am I connected to

  // target XTS station range
  _nTargetStationLast           : UINT;           // where does the target process end
  _nTargetStationFirst          : UINT;           // where does the target process start

  _rCheckPos                    : LREAL;

  _WriteResult                  : ST_PROCESS_LIST_RESULT;   // last job written to target
  _DeleteResult                 : ST_PROCESS_LIST_RESULT;   // last job executed

  _idx                          : UINT;
  _nTargetIndex                 : ARRAY[1..SIZEOF(T_PROCESS)*8] OF USINT; // helper var to copy to my process (_ItfProcessCollector[_nProcess].TargetIndex)

  _MoverInfo                    : ST_MOVER_INFO;      // Information from the Mover in Station
  _StationState                 : ST_STATION_STATE;   // fb_BufferOutfeedRobot has only one XtsStation to work

  _bInfeedLate                  : BOOL;               // check first XtsStation for mover enter
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
// check pointer and interface
// connect Ctrl/State to _ItfProcessCollector
// set message device identification
//-----------------------------------------------------------------------------
IF NOT Check() THEN 
  RETURN; 
END_IF
//-----------------------------------------------------------------------------
// check init command (hard reset)
//-----------------------------------------------------------------------------
_eCmd                                 := _InstanceCtrl[_nProcess].Cmd;
IF (_eCmd <> _eCmdOld)
THEN
  CASE _eCmd
  OF
    E_INSTANCE_CMD.INIT:
      // clear init info
      _eInit                          := _ItfProcessCollector[_nProcess].Init(FALSE);
  
      IF _ItfProcessList[_nProcess].InitList()  // clear linked list
      THEN
        Clear();
        _eStateInstance               := E_INSTANCE_STATE.INIT;
        _eStateProgress               := E_PROGRESS.PROGRESS_INIT;
      END_IF
  END_CASE
  _eCmdOld                            := _eCmd;
END_IF
//-----------------------------------------------------------------------------
// cyclic information of mover and station
//-----------------------------------------------------------------------------
IF _bInfeedLate
THEN
  _StationState                       := _ItfProcessCollector[_nProcess].GetStationState  (_ItfProcessCollector[_nProcess].StationFirst);
  _MoverInfo                          := _ItfProcessCollector[_nProcess].GetMoverInStation(_ItfProcessCollector[_nProcess].StationFirst);
ELSE
  _StationState                       := _ItfProcessCollector[_nProcess].GetStationState  (_ItfProcessCollector[_nProcess].StationLast);
  _MoverInfo                          := _ItfProcessCollector[_nProcess].GetMoverInStation(_ItfProcessCollector[_nProcess].StationLast);
END_IF
//-----------------------------------------------------------------------------
// state machine for buffer to OutputR1 and OutputR2
//-----------------------------------------------------------------------------
CASE _eStateInstance // main state machine
OF
  E_INSTANCE_STATE.NULL:           // first cycle init
    IF _ItfProcessList[_nProcess].InitList()
    THEN
      _eInit                          := _ItfProcessCollector[_nProcess].Init(FALSE);
      _eStateProgress                 := E_PROGRESS.PROGRESS_INIT;
      _eStateInstance                 := E_INSTANCE_STATE.INIT;
    END_IF


  E_INSTANCE_STATE.INIT:              // plausibility checks and _ItfProcessCollector Init
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
    //-------------------------------------------------------------------------
      E_PROGRESS.PROGRESS_ERROR:
        IF (_nProcessTarget > 0) AND
           (_nProcessTarget < E_INSTANCE.INSTANCE_MAX)
        THEN
          _eStateProgress             := E_PROGRESS.PROGRESS_INIT;
        END_IF

    // E_INSTANCE_STATE.INIT:
    //-------------------------------------------------------------------------
      E_PROGRESS.PROGRESS_INIT:
        IF NOT (_nProcessTarget > 0) OR
           NOT (_nProcessTarget < E_INSTANCE.INSTANCE_MAX)
        THEN
          // an invalid target you must have not
          _eStateProgress             := E_PROGRESS.PROGRESS_ERROR;
        ELSE
          _eStateProgress             := E_PROGRESS.PROGRESS_BUSY;
        END_IF

    // E_INSTANCE_STATE.INIT:
    //-------------------------------------------------------------------------
      E_PROGRESS.PROGRESS_BUSY:
        // wait for my process collector check (_State.Check) to be done
        //  - checks range of XtsStations
        //  - checks count of XtsStations
        IF (_State.Check = E_PROCESS_CHECK.PROCESS_CHECK_DONE)
        THEN
          _eInit                      := _ItfProcessCollector[_nProcess].Init(TRUE);
  
          IF (_eInit = E_PROGRESS.PROGRESS_DONE)
          THEN
            IF NOT (_nProcessTarget > 0) OR
               NOT (_nProcessTarget < E_INSTANCE.INSTANCE_MAX)
            THEN
              // an invalid target you must have not
              _eStateProgress         := E_PROGRESS.PROGRESS_ERROR;
            ELSE
              _nTargetStationLast     := _ItfProcessCollector[_nProcessTarget].StationLast;
              _nTargetStationFirst    := _ItfProcessCollector[_nProcessTarget].StationFirst;

              // initialization of Infeed: _ItfProcessCollector with XtsStation
              _Ctrl.Cmd               := E_PROCESS_CTRL.PROCESS_DISABLE;  // first, switch off _ItfProcessCollector and XtsStation
              _eStateProgress         := E_PROGRESS.PROGRESS_INIT;        // clear sub state
              _eStateInstance               := E_INSTANCE_STATE.DISABLED;       // switch to disabled as default after startup
            END_IF
          END_IF
        END_IF
    END_CASE
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
// DISABLED:
//  - clear local list result data
//  - wait for enable from the outside
//-----------------------------------------------------------------------------
CASE _eStateInstance
OF
  E_INSTANCE_STATE.DISABLED:
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_INIT:
        _eStateProgress               := E_PROGRESS.PROGRESS_BUSY;
        // clear data for a new round
        memset(ADR(_ListResult), 0, SIZEOF(_ListResult));

        _Ctrl.ActivateStation         := 0;
        _Ctrl.NestMask                := 1;
        
        _ProcessData.wTarget          := 1;


    // E_INSTANCE_STATE.DISABLED:
    //-------------------------------------------------------------------------
      E_PROGRESS.PROGRESS_BUSY:
        CASE _eCmd
        OF
          E_INSTANCE_CMD.ENABLE:      // turn it on!!
            _Ctrl.Cmd                 := E_PROCESS_CTRL.PROCESS_ENABLE;
            _Ctrl.ActivateStation     := _ItfProcessCollector[_nProcess].To_T_Process(TO_BYTE(_ItfProcessCollector[_nProcess].StationCount)); // turn on all stations in my process

            _eStateInstance           := E_INSTANCE_STATE.ENABLED;
            _eStateProgress           := E_PROGRESS.PROGRESS_INIT;
  
            IF (_MessageLevel = E_MessageType.eMessageVerbose)
            THEN
              _stMsg.eType            := E_MessageType.eMessageVerbose;
              _stMsg.eSubdevice       := e_Subdevice.Instance_BufferOutfeedRobot;
              _stMsg.iErrorNumber     := 0;
              _stMsg.sText            := concat(TO_STRING(_eStateInstance), ': ');
              _stMsg.sText            := concat(_stMsg.sText, TO_STRING(_eStateProgress));
              f_MessageSet(_stMsg);
            END_IF

        END_CASE
    END_CASE
END_CASE
//-----------------------------------------------------------------------------
// ENABLED
//  - check process for enabled station
//  - switch to infeed
//  - check if infeed is active
//  - allow movers to enter
//  - check if mover arrived at PosStop[1]
//-----------------------------------------------------------------------------
CASE _eStateInstance
OF
  E_INSTANCE_STATE.ENABLED:
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_INIT:
        CASE _State.State
        OF
          E_PROCESS_STATE.PROCESS_ENABLE:
          CASE _State.Result
          OF
            E_PROGRESS.PROGRESS_BUSY:
              // now my process and all XtsStations within are switched on
              // check infeed into my process
              _Ctrl.Cmd               := E_PROCESS_CTRL.PROCESS_STATIONS_INFEED; // tells my process to go check the infeed
              _eStateProgress         := E_PROGRESS.PROGRESS_BUSY; // go check how the infeed into my process is doing

              IF (_MessageLevel = E_MessageType.eMessageVerbose)
              THEN
                _stMsg.eType          := E_MessageType.eMessageVerbose;
                _stMsg.eSubdevice     := e_Subdevice.Instance_BufferOutfeedRobot;
                _stMsg.iErrorNumber   := 0;
                _stMsg.sText          := concat(TO_STRING(_eStateInstance), ': ');
                _stMsg.sText          := concat(_stMsg.sText, TO_STRING(_eStateProgress));
                f_MessageSet(_stMsg);
              END_IF
          END_CASE
        END_CASE
    END_CASE
    // E_INSTANCE_STATE.ENABLED:
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_BUSY:
        CASE _State.State
        OF
          E_PROCESS_STATE.PROCESS_STATIONS_INFEED:
          CASE _State.Result
          OF
            E_PROGRESS.PROGRESS_BUSY:
            IF (_MoverInfo.rModuloActPos > _rCheckPos)
            THEN
              // all XtsStations have a mover waiting
              _eStateProgress         := E_PROGRESS.PROGRESS_OCCUPIED;

              IF (_MessageLevel = E_MessageType.eMessageVerbose)
              THEN
                _stMsg.eType          := E_MessageType.eMessageVerbose;
                _stMsg.eSubdevice     := e_Subdevice.Instance_BufferOutfeedRobot;
                _stMsg.iErrorNumber   := 0;
                _stMsg.sText          := concat(TO_STRING(_eStateInstance), ': ');
                _stMsg.sText          := concat(_stMsg.sText, TO_STRING(_eStateProgress));
                f_MessageSet(_stMsg);
              END_IF
            END_IF
          END_CASE
        END_CASE
    END_CASE
    // E_INSTANCE_STATE.ENABLED:
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_OCCUPIED:
        CASE _State.State
        OF
          E_PROCESS_STATE.PROCESS_STATIONS_INFEED:
          CASE _State.Result
          OF
            E_PROGRESS.PROGRESS_BUSY:
              CASE _eCmd              // check for proceed command
              OF
                E_INSTANCE_CMD.PROCEED:
                  _Ctrl.Cmd             := E_PROCESS_CTRL.PROCESS_STATIONS_ENTER; // Infeed has work to do, let all movers enter
                  _eStateProgress       := E_PROGRESS.PROGRESS_STARTUP;           // go check start of my process
    
                  IF (_MessageLevel = E_MessageType.eMessageVerbose)
                  THEN
                    _stMsg.eType        := E_MessageType.eMessageVerbose;
                    _stMsg.eSubdevice   := e_Subdevice.Instance_BufferOutfeedRobot;
                    _stMsg.iErrorNumber := 0;
                    _stMsg.sText        := concat(TO_STRING(_eStateInstance), ': ');
                    _stMsg.sText        := concat(_stMsg.sText, TO_STRING(_eStateProgress));
                    f_MessageSet(_stMsg);
                  END_IF
              END_CASE
          END_CASE
        END_CASE
    END_CASE
    // E_INSTANCE_STATE.ENABLED:
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_STARTUP:
        CASE _State.State
        OF
          E_PROCESS_STATE.PROCESS_START:
          CASE _State.Result
          OF
            E_PROGRESS.PROGRESS_BUSY:
              // all movers at PosStop[1] in standstill
              // my process wants to work
              _eStateInstance         := E_INSTANCE_STATE.WORKING;   // go check if all movers are in place
              _eStateProgress         := E_PROGRESS.PROGRESS_BUSY;   // reset substate

              IF (_MessageLevel = E_MessageType.eMessageVerbose)
              THEN
                _stMsg.eType          := E_MessageType.eMessageVerbose;
                _stMsg.eSubdevice     := e_Subdevice.Instance_BufferOutfeedRobot;
                _stMsg.iErrorNumber   := 0;
                _stMsg.sText          := concat(TO_STRING(_eStateInstance), ': ');
                _stMsg.sText          := concat(_stMsg.sText, TO_STRING(_eStateProgress));
                f_MessageSet(_stMsg);
              END_IF
          END_CASE
        END_CASE
    END_CASE
END_CASE
//-----------------------------------------------------------------------------
// WORKING:
//  - wait for start
//  - wait for done
//-----------------------------------------------------------------------------
CASE _eStateInstance
OF
  E_INSTANCE_STATE.WORKING:
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_BUSY:
        CASE _State.State
        OF
          E_PROCESS_STATE.PROCESS_START:
          CASE _State.Result
          OF
            E_PROGRESS.PROGRESS_BUSY:
              CASE _eCmd
              OF
                E_INSTANCE_CMD.WORK:
                  _Ctrl.Cmd             := E_PROCESS_CTRL.PROCESS_START;
                  _eStateProgress       := E_PROGRESS.PROGRESS_CHECK;
  
                  IF (_MessageLevel = E_MessageType.eMessageVerbose)
                  THEN
                    _stMsg.eType        := E_MessageType.eMessageVerbose;
                    _stMsg.eSubdevice   := e_Subdevice.Instance_BufferOutfeedRobot;
                    _stMsg.iErrorNumber := 0;
                    _stMsg.sText        := concat(TO_STRING(_eStateInstance), ': ');
                    _stMsg.sText        := concat(_stMsg.sText, TO_STRING(_eStateProgress));
                    f_MessageSet(_stMsg);
                  END_IF
              END_CASE
          END_CASE
        END_CASE
    END_CASE
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_CHECK:
        CASE _State.State
        OF
          E_PROCESS_STATE.PROCESS_DONE:
          CASE _State.Result
          OF
            E_PROGRESS.PROGRESS_BUSY:
              CASE _eCmd
              OF
                E_INSTANCE_CMD.FINISH:
                  _Ctrl.Cmd             := E_PROCESS_CTRL.PROCESS_DONE;
  
                  _eStateInstance       := E_INSTANCE_STATE.FINISH;
                  _eStateProgress       := E_PROGRESS.PROGRESS_INIT;
  
                  IF (_MessageLevel = E_MessageType.eMessageVerbose)
                  THEN
                    _stMsg.eType        := E_MessageType.eMessageVerbose;
                    _stMsg.eSubdevice   := e_Subdevice.Instance_BufferOutfeedRobot;
                    _stMsg.iErrorNumber := 0;
                    _stMsg.sText        := concat(TO_STRING(_eStateInstance), ': ');
                    _stMsg.sText        := concat(_stMsg.sText, TO_STRING(_eStateProgress));
                    f_MessageSet(_stMsg);
                  END_IF
              END_CASE
          END_CASE
        END_CASE
    END_CASE
END_CASE
//-----------------------------------------------------------------------------
// FINISH:
//  - write target (OutputR2 and OutputR1)
//  - command outfeed of mover
//  - AddTail() at TargetProcess
//  - check to proceed
//-----------------------------------------------------------------------------
CASE _eStateInstance
OF
  E_INSTANCE_STATE.FINISH:
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_INIT:
      _eStateProgress                 := E_PROGRESS.PROGRESS_BUSY;

      // the sending of movers
      // many movers to one target
      FOR _idx := 1 TO _ItfProcessCollector[_nProcess].StationCount
      DO 
        _nTargetIndex[_idx]           := TO_USINT(_nTargetStationLast);
        _ProcessData.wTarget          := _ItfProcessCollector[_nProcess].
                                          DelBit(_ProcessData.wTarget, 0);
      END_FOR
      _ItfProcessCollector[_nProcess].TargetIndex := _nTargetIndex; // write Xts target onto my ProcessCollector interface
    END_CASE
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_BUSY:
        CASE _State.State
        OF
          E_PROCESS_STATE.PROCESS_STATIONS_OUTFEED: // check my process' state
          CASE _State.Result
          OF
            E_PROGRESS.PROGRESS_BUSY:
            // now data is prepared and copied to the right places
              _Ctrl.Cmd               := E_PROCESS_CTRL.PROCESS_STATIONS_OUTFEED; // release the kraken!
              _eStateProgress         := E_PROGRESS.PROGRESS_DONE;                // mover is on its way, we're done here
    
              IF (_MessageLevel = E_MessageType.eMessageVerbose)
              THEN
                _stMsg.eType          := E_MessageType.eMessageVerbose;
                _stMsg.eSubdevice     := e_Subdevice.Instance_BufferOutfeedRobot;
                _stMsg.iErrorNumber   := 0;
                _stMsg.sText          := concat(TO_STRING(_eStateInstance), ': ');
                _stMsg.sText          := concat(_stMsg.sText, TO_STRING(_eStateProgress));
                f_MessageSet(_stMsg);
              END_IF
          END_CASE
        END_CASE


      E_PROGRESS.PROGRESS_DONE:
        CASE _State.State
        OF
          E_PROCESS_STATE.PROCESS_DISABLE:
            IF (_MessageLevel = E_MessageType.eMessageVerbose)
            THEN
              _stMsg.eType            := E_MessageType.eMessageVerbose;
              _stMsg.eSubdevice       := e_Subdevice.Instance_BufferOutfeedRobot;
              _stMsg.iErrorNumber     := 0;
              _stMsg.sText            := concat(TO_STRING(_eStateInstance), ': ');
              _stMsg.sText            := concat(_stMsg.sText, TO_STRING(_eStateProgress));
              f_MessageSet(_stMsg);
            END_IF
    
            _eStateInstance           := E_INSTANCE_STATE.DISABLED;
            _eStateProgress           := E_PROGRESS.PROGRESS_INIT;
        END_CASE
    END_CASE
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
_InstanceState[_nProcess].State       := _eStateInstance;
_InstanceState[_nProcess].Progress    := _eStateProgress;
]]></ST>
    </Implementation>
    <Property Name="CheckPosition" Id="{4319a63e-35ad-44e8-a19f-10ab6b72730d}">
      <Declaration><![CDATA[PROPERTY CheckPosition : lreal]]></Declaration>
      <Get Name="Get" Id="{11e9fd98-f679-473b-944d-b5ab62c2a871}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CheckPosition := _rCheckPos;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{536a7930-d82b-47ee-9667-234bd0ac5325}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_rCheckPos := CheckPosition;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Clear" Id="{2e4ae4e1-36ee-47b7-a692-2ccc3eb62659}">
      <Declaration><![CDATA[METHOD Clear : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[memset(ADR(_nTargetIndex), 0, SIZEOF(_nTargetIndex));

_eStateInstance                         := E_INSTANCE_STATE.DISABLED;
_eStateProgress                 := E_PROGRESS.PROGRESS_INIT;

Clear                           := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="ProcessTarget" Id="{5ca81497-6e13-4278-a0e4-ef66c86c7206}">
      <Declaration><![CDATA[PROPERTY ProcessTarget : E_INSTANCE]]></Declaration>
      <Get Name="Get" Id="{376dea8a-1c0c-45ab-88d4-05ac48de8568}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ProcessTarget := _nProcessTarget;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{9fc3a2e5-545b-458d-bc68-b74d63d18777}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_nProcessTarget := ProcessTarget;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="fb_OutfeedRobot">
      <LineId Id="4178" Count="34" />
      <LineId Id="4608" Count="1" />
      <LineId Id="4215" Count="0" />
      <LineId Id="4606" Count="1" />
      <LineId Id="4218" Count="387" />
      <LineId Id="139" Count="0" />
    </LineIds>
    <LineIds Name="fb_OutfeedRobot.CheckPosition.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_OutfeedRobot.CheckPosition.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_OutfeedRobot.Clear">
      <LineId Id="6" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_OutfeedRobot.ProcessTarget.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_OutfeedRobot.ProcessTarget.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>