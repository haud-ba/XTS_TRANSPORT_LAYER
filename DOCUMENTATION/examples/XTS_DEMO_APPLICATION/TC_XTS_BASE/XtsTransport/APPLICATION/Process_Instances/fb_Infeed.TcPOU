<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="fb_Infeed" Id="{6f6c1e2e-6349-416d-b058-49b3b2e87285}" SpecialFunc="None">
    <Declaration><![CDATA[//---------------------------------------------------------------------------------------------------------------
//
//  HAUD 2024.12.19
//
//
//  fb_Infeed
//  - inherits fb_Instance, which provides a design pattern in order to build different specific processes in a structured way
//  - uses 12 XtsStations via _ItfProcessCollector
//  - used for targeting movers to predetermined substation of process control (many to one)
//  - processes are connected via linked list
//    - entry in list is detected
//    - entry in list determines count and place of used XtsStations in target process
//
//
//  - constructed with fb_Instance main state (_eState) in addition to a substate (_eStateProgress)
//  - substate enables to handle procedures within main state by preventing race conditions 
//    with the help of small steps and decisions with clear separation from each other 
//
//---------------------------------------------------------------------------------------------------------------//
// This SOFTWARE is provided as an Exemple by THE PROVIDER "as is" and "with all faults." THE PROVIDER makes no  //
// representations or warranties of any kind concerning the safety, suitability, lack of viruses, inaccuracies,  //
// typographical errors, or other harmful components of this SOFTWARE. There are inherent dangers in the use of  //
// any software, and you are solely responsible for determining whether this SOFTWARE is compatible with your    //
// equipment and other software installed on your equipment. You are also solely responsible for the protection  //
// of your equipment and backup of your data, and THE PROVIDER will not be liable for any damages you may suffer //
// in connection with using, modifying, or distributing this SOFTWARE.                                           //
//---------------------------------------------------------------------------------------------------------------//
FUNCTION_BLOCK fb_Infeed EXTENDS fb_Instance
VAR
  _nProcessTarget               : E_INSTANCE;     // who am I connected to

  // target XTS station range
  _nTargetStationLast           : UINT;           // where does the target process end
  _nTargetStationFirst          : UINT;           // where does the target process start

  _WriteResult                  : ST_PROCESS_LIST_RESULT;   // last job written to target
  _DeleteResult                 : ST_PROCESS_LIST_RESULT;   // last job executed

  _idx                          : UINT;
  _nTargetIndex                 : ARRAY[1..SIZEOF(T_PROCESS)*8] OF USINT; // helper var to copy to my process (_ItfProcessCollector[_nProcess].TargetIndex)
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
// check pointer and interface
// connect Ctrl/State to _ItfProcessCollector
// set message device identification
//-----------------------------------------------------------------------------
IF NOT Check() THEN 
  RETURN; 
END_IF
//-----------------------------------------------------------------------------
// check init command (hard reset)
//-----------------------------------------------------------------------------
_eCmd                                 := _InstanceCtrl[_nProcess].Cmd;
IF (_eCmd <> _eCmdOld)
THEN
  CASE _eCmd
  OF
    E_INSTANCE_CMD.INIT:
      // clear init info
      _eInit                          := _ItfProcessCollector[_nProcess].Init(FALSE);
  
      IF _ItfProcessList[_nProcess].InitList()  // clear linked list
      THEN
        Clear();
        _eStateInstance               := E_INSTANCE_STATE.INIT;
        _eStateProgress               := E_PROGRESS.PROGRESS_INIT;
      END_IF
  END_CASE
  _eCmdOld                            := _eCmd;
END_IF
//-----------------------------------------------------------------------------
// state machine for Infeed functionality
//-----------------------------------------------------------------------------
CASE _eStateInstance // main state machine
OF
  E_INSTANCE_STATE.NULL:           // first cycle init
    IF _ItfProcessList[_nProcess].InitList()
    THEN
      _eInit                          := _ItfProcessCollector[_nProcess].Init(FALSE);
      _eStateProgress                 := E_PROGRESS.PROGRESS_INIT;
      _eStateInstance                 := E_INSTANCE_STATE.INIT;
    END_IF


  E_INSTANCE_STATE.INIT:              // plausibility checks and _ItfProcessCollector Init
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
    //-------------------------------------------------------------------------
      E_PROGRESS.PROGRESS_ERROR:
        IF (_nProcessTarget > 0) AND
           (_nProcessTarget < E_INSTANCE.INSTANCE_MAX)
        THEN
          _eStateProgress             := E_PROGRESS.PROGRESS_INIT;
        END_IF

    // E_INSTANCE_STATE.INIT:
    //-------------------------------------------------------------------------
      E_PROGRESS.PROGRESS_INIT:
        IF NOT (_nProcessTarget > 0) OR
           NOT (_nProcessTarget < E_INSTANCE.INSTANCE_MAX)
        THEN
          // an invalid target you must have not
          _eStateProgress             := E_PROGRESS.PROGRESS_ERROR;
        ELSE
          _eStateProgress             := E_PROGRESS.PROGRESS_BUSY;
        END_IF

    // E_INSTANCE_STATE.INIT:
    //-------------------------------------------------------------------------
      E_PROGRESS.PROGRESS_BUSY:
        // wait for my process collector check (_State.Check) to be done
        //  - checks range of XtsStations
        //  - checks count of XtsStations
        IF (_State.Check = E_PROCESS_CHECK.PROCESS_CHECK_DONE)
        THEN
          _eInit                      := _ItfProcessCollector[_nProcess].Init(TRUE);
  
          IF (_eInit = E_PROGRESS.PROGRESS_DONE)
          THEN
            IF NOT (_nProcessTarget > 0) OR
               NOT (_nProcessTarget < E_INSTANCE.INSTANCE_MAX)
            THEN
              _eStateProgress         := E_PROGRESS.PROGRESS_ERROR;
            ELSE
              _nTargetStationLast     := _ItfProcessCollector[_nProcessTarget].StationLast;
              _nTargetStationFirst    := _ItfProcessCollector[_nProcessTarget].StationFirst;
      
              // initialization of Infeed: _ItfProcessCollector with XtsStation
              _Ctrl.Cmd               := E_PROCESS_CTRL.PROCESS_DISABLE;  // first, switch off _ItfProcessCollector and XtsStation
              _eStateProgress         := E_PROGRESS.PROGRESS_INIT;        // clear sub state
              _eStateInstance                 := E_INSTANCE_STATE.DISABLED;       // switch to disabled as default after startup
            END_IF
          END_IF
        END_IF
    END_CASE
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
// DISABLED:
//  - clear local list result data
//  - wait for enable from the outside
//-----------------------------------------------------------------------------
CASE _eStateInstance
OF
  E_INSTANCE_STATE.DISABLED:
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_INIT:
        _eStateProgress               := E_PROGRESS.PROGRESS_BUSY;
        // clear data for a new round
        memset(ADR(_ListResult), 0, SIZEOF(_ListResult));

        _Ctrl.ActivateStation         := 0;
        _Ctrl.NestMask                := 1;
        
    END_CASE
    // E_INSTANCE_STATE.DISABLED:
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_BUSY:
        CASE _eCmd
        OF
          E_INSTANCE_CMD.ENABLE:      // turn it on!!
            _eStateInstance           := E_INSTANCE_STATE.DETECT_IN_LIST;
            _eStateProgress           := E_PROGRESS.PROGRESS_BUSY;
  
            IF (_MessageLevel = E_MessageType.eMessageVerbose)
            THEN
              _stMsg.eType            := E_MessageType.eMessageVerbose;
              _stMsg.eSubdevice       := e_Subdevice.Process_LinkedList_GetHead;
              _stMsg.iErrorNumber     := 0;
              _stMsg.sText            := concat(TO_STRING(_eStateInstance), ': ');
              _stMsg.sText            := concat(_stMsg.sText, TO_STRING(_eStateProgress));
              f_MessageSet(_stMsg);
            END_IF
        END_CASE
    END_CASE
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
// DETECT_IN_LIST: 
//  - check inked list and GetHead()
//  - copy job data
//  - switch on process
//-----------------------------------------------------------------------------
CASE _eStateInstance
OF
  E_INSTANCE_STATE.DETECT_IN_LIST:
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_INIT:
        IF (_eCmd = E_INSTANCE_CMD.PROCEED)
        THEN
          _eStateProgress             := E_PROGRESS.PROGRESS_BUSY;
        END_IF
    END_CASE
    // E_INSTANCE_STATE.DETECT_IN_LIST
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_BUSY:
        IF (_eCmd = E_INSTANCE_CMD.DISABLE)
        THEN
          _eStateInstance             := E_INSTANCE_STATE.DISABLED;
          _eStateProgress             := E_PROGRESS.PROGRESS_INIT;

        ELSIF (_ItfProcessList[_nProcess].Count > 0)
        THEN
          // get new order for my process
          // check my list for a new round of movers
          _ListResult                 := _ItfProcessList[_nProcess].GetHead();  // the list results carries information about the requirements of the target process (who and where)

          IF (_ListResult.wState <> 0)
          THEN
            // error in list results must not appear
            // if you land here, there is somethng wrong with the initialization or configuration of the linked list
            _eStateProgress           := E_PROGRESS.PROGRESS_ERROR;

            _stMsg.eType              := E_MessageType.eMessageError;
            _stMsg.eSubdevice         := e_Subdevice.Process_LinkedList_GetHead;
            _stMsg.iErrorNumber       := _ListResult.wState;
            _stMsg.sText              := concat(TO_STRING(_eStateInstance), ': ');
            _stMsg.sText              := concat(_stMsg.sText, TO_STRING(_eStateProgress));
            f_MessageSet(_stMsg);

          ELSE
            _ProcessData              := _ListResult.stData;  // list result contains data for target process
            _eStateProgress           := E_PROGRESS.PROGRESS_CHECK;

            IF (_MessageLevel = E_MessageType.eMessageVerbose)
            THEN
              _stMsg.eType            := E_MessageType.eMessageVerbose;
              _stMsg.eSubdevice       := e_Subdevice.Process_LinkedList_GetHead;
              _stMsg.iErrorNumber     := 0;
              _stMsg.sText            := concat(TO_STRING(_eStateInstance), ': ');
              _stMsg.sText            := concat(_stMsg.sText, TO_STRING(_eStateProgress));
              f_MessageSet(_stMsg);
            END_IF
          END_IF
        END_IF
    END_CASE
    // E_INSTANCE_STATE.DETECT_IN_LIST
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_CHECK:
        // check for disabled process interface state
        CASE _State.State
        OF
          E_PROCESS_STATE.PROCESS_DISABLE:

          CASE _State.Result
          OF
            E_PROGRESS.PROGRESS_BUSY:     // busy from _State.Result means, waiting for input
              // now the preparation may begin
              _Ctrl.Cmd               := E_PROCESS_CTRL.PROCESS_ENABLE; // switch on my state machine in _ItfProcessCollector
              _Ctrl.ActivateStation   := _ProcessData.wTarget;          // get active stations from list result

              _eStateInstance         := E_INSTANCE_STATE.ENABLED;      // go check if my process is switched on
              _eStateProgress         := E_PROGRESS.PROGRESS_INIT;      // reset substate

              IF (_MessageLevel = E_MessageType.eMessageVerbose)
              THEN
                _stMsg.eType          := E_MessageType.eMessageVerbose;
                _stMsg.eSubdevice     := e_Subdevice.Instance_Infeed;
                _stMsg.iErrorNumber   := 0;
                _stMsg.sText          := concat(TO_STRING(_eStateInstance), ': ');
                _stMsg.sText          := concat(_stMsg.sText, TO_STRING(_eStateProgress));
                f_MessageSet(_stMsg);
              END_IF
          END_CASE
        END_CASE
    END_CASE
END_CASE
//-----------------------------------------------------------------------------
// ENABLED
//  - check process for enabled stations from list entry
//  - switch to infeed
//  - check if infeed is active on all required stations
//  - allow movers to enter
//  - check if movers arrived at PosStop[1]
//-----------------------------------------------------------------------------
CASE _eStateInstance
OF
  E_INSTANCE_STATE.ENABLED:
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_INIT:
        CASE _State.State
        OF
          E_PROCESS_STATE.PROCESS_ENABLE:
          CASE _State.Result
          OF
            E_PROGRESS.PROGRESS_BUSY:
              // now my process and all XtsStations within are switched on
              // check infeed into my process
              _Ctrl.Cmd               := E_PROCESS_CTRL.PROCESS_STATIONS_INFEED; // tells my process to go check the infeed
              _eStateProgress         := E_PROGRESS.PROGRESS_BUSY; // go check how the infeed into my process is doing

              IF (_MessageLevel = E_MessageType.eMessageVerbose)
              THEN
                _stMsg.eType          := E_MessageType.eMessageVerbose;
                _stMsg.eSubdevice     := e_Subdevice.Instance_Infeed;
                _stMsg.iErrorNumber   := 0;
                _stMsg.sText          := concat(TO_STRING(_eStateInstance), ': ');
                _stMsg.sText          := concat(_stMsg.sText, TO_STRING(_eStateProgress));
                f_MessageSet(_stMsg);
              END_IF
          END_CASE
        END_CASE
    END_CASE
    // E_INSTANCE_STATE.ENABLED:
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_BUSY:
        CASE _State.State
        OF
          E_PROCESS_STATE.PROCESS_STATIONS_INFEED:
          CASE _State.Result
          OF
            E_PROGRESS.PROGRESS_BUSY:
              // now we know who wants to enter
              _eStateProgress         := E_PROGRESS.PROGRESS_OCCUPIED;

              IF (_MessageLevel = E_MessageType.eMessageVerbose)
              THEN
                _stMsg.eType          := E_MessageType.eMessageVerbose;
                _stMsg.eSubdevice     := e_Subdevice.Instance_Infeed;
                _stMsg.iErrorNumber   := 0;
                _stMsg.sText          := concat(TO_STRING(_eStateInstance), ': ');
                _stMsg.sText          := concat(_stMsg.sText, TO_STRING(_eStateProgress));
                f_MessageSet(_stMsg);
              END_IF
          END_CASE
        END_CASE
    END_CASE
    // E_INSTANCE_STATE.ENABLED:
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_OCCUPIED:
        CASE _State.State
        OF
          E_PROCESS_STATE.PROCESS_STATIONS_INFEED:
          CASE _State.Result
          OF
            E_PROGRESS.PROGRESS_BUSY:
              CASE _eCmd              // check for proceed command
              OF
                E_INSTANCE_CMD.PROCEED:
                  _Ctrl.Cmd               := E_PROCESS_CTRL.PROCESS_STATIONS_ENTER; // Infeed has work to do, let all movers enter
                  _eStateProgress         := E_PROGRESS.PROGRESS_STARTUP;           // go check start of my process
    
                  // as movers are about to enter, tell fb_SenderBufferInfeed to send a new batch
                  _WriteResult            := _ItfProcessList[E_INSTANCE.SENDER_BUFFER_INFEED].AddTailValue(_ProcessData);
    
                  IF (_WriteResult.wState <> 0)
                  THEN
                    // error in list results must not appear
                    // if you land here, there is somethng wrong with the initialization or configuration of the linked list
                    _eStateProgress       := E_PROGRESS.PROGRESS_ERROR;
        
                    _stMsg.eType          := E_MessageType.eMessageError;
                    _stMsg.eSubdevice     := e_Subdevice.Process_LinkedList_AddTail;
                    _stMsg.iErrorNumber   := _WriteResult.wState;
                    _stMsg.sText          := concat(TO_STRING(_eStateInstance), ': ');
                    _stMsg.sText          := concat(_stMsg.sText, TO_STRING(_eStateProgress));
                    f_MessageSet(_stMsg);
                  ELSE
                    IF (_MessageLevel = E_MessageType.eMessageVerbose)
                    THEN
                      _stMsg.eType        := E_MessageType.eMessageVerbose;
                      _stMsg.eSubdevice   := e_Subdevice.Instance_Infeed;
                      _stMsg.iErrorNumber := 0;
                      _stMsg.sText        := concat(TO_STRING(_eStateInstance), ': ');
                      _stMsg.sText        := concat(_stMsg.sText, TO_STRING(_eStateProgress));
                      f_MessageSet(_stMsg);
                    END_IF
                  END_IF
              END_CASE
          END_CASE
        END_CASE
    END_CASE
    // E_INSTANCE_STATE.ENABLED:
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_STARTUP:
        CASE _State.State
        OF
          E_PROCESS_STATE.PROCESS_START:
          CASE _State.Result
          OF
            E_PROGRESS.PROGRESS_BUSY:
              // all movers at PosStop[1] in standstill
              // my process wants to work
              _eStateInstance         := E_INSTANCE_STATE.WORKING;   // go check if all movers are in place
              _eStateProgress         := E_PROGRESS.PROGRESS_BUSY;   // reset substate

              IF (_MessageLevel = E_MessageType.eMessageVerbose)
              THEN
                _stMsg.eType          := E_MessageType.eMessageVerbose;
                _stMsg.eSubdevice     := e_Subdevice.Instance_Infeed;
                _stMsg.iErrorNumber   := 0;
                _stMsg.sText          := concat(TO_STRING(_eStateInstance), ': ');
                _stMsg.sText          := concat(_stMsg.sText, TO_STRING(_eStateProgress));
                f_MessageSet(_stMsg);
              END_IF
          END_CASE
        END_CASE
    END_CASE
END_CASE
//-----------------------------------------------------------------------------
// WORKING:
//  - wait for start
//  - wait for done
//-----------------------------------------------------------------------------
CASE _eStateInstance
OF
  E_INSTANCE_STATE.WORKING:
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_BUSY:
        CASE _State.State
        OF
          E_PROCESS_STATE.PROCESS_START:
          CASE _State.Result
          OF
            E_PROGRESS.PROGRESS_BUSY:
              CASE _eCmd
              OF
                E_INSTANCE_CMD.WORK:
                  _Ctrl.Cmd             := E_PROCESS_CTRL.PROCESS_START;
                  _eStateProgress       := E_PROGRESS.PROGRESS_CHECK;
  
                  IF (_MessageLevel = E_MessageType.eMessageVerbose)
                  THEN
                    _stMsg.eType        := E_MessageType.eMessageVerbose;
                    _stMsg.eSubdevice   := e_Subdevice.Instance_Infeed;
                    _stMsg.iErrorNumber := 0;
                    _stMsg.sText        := concat(TO_STRING(_eStateInstance), ': ');
                    _stMsg.sText        := concat(_stMsg.sText, TO_STRING(_eStateProgress));
                    f_MessageSet(_stMsg);
                  END_IF
              END_CASE
          END_CASE
        END_CASE
    END_CASE
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_CHECK:
        CASE _State.State
        OF
          E_PROCESS_STATE.PROCESS_DONE:
          CASE _State.Result
          OF
            E_PROGRESS.PROGRESS_BUSY:
              CASE _eCmd
              OF
                E_INSTANCE_CMD.FINISH:
                  _Ctrl.Cmd             := E_PROCESS_CTRL.PROCESS_DONE;
  
                  _eStateInstance       := E_INSTANCE_STATE.FINISH;
                  _eStateProgress       := E_PROGRESS.PROGRESS_INIT;
  
                  IF (_MessageLevel = E_MessageType.eMessageVerbose)
                  THEN
                    _stMsg.eType        := E_MessageType.eMessageVerbose;
                    _stMsg.eSubdevice   := e_Subdevice.Instance_Infeed;
                    _stMsg.iErrorNumber := 0;
                    _stMsg.sText        := concat(TO_STRING(_eStateInstance), ': ');
                    _stMsg.sText        := concat(_stMsg.sText, TO_STRING(_eStateProgress));
                    f_MessageSet(_stMsg);
                  END_IF
              END_CASE
          END_CASE
        END_CASE
    END_CASE
END_CASE
//-----------------------------------------------------------------------------
// FINISH:
//  - write target (BufferOutfeed) to all XtsStations
//  - command outfeed of all movers
//  - RemoveHead() from my list
//  - AddTail() at TargetProcess
//  - check to proceed
//-----------------------------------------------------------------------------
CASE _eStateInstance
OF
  E_INSTANCE_STATE.FINISH:
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_INIT:
      _eStateProgress                 := E_PROGRESS.PROGRESS_BUSY;

      // the sending is different from a buffer; now it has to be 'many to 1'
      // all movers from my process are sent to the same target (OutfeedBuffer)
      FOR _idx := _ItfProcessCollector[_nProcess].StationLast TO _ItfProcessCollector[_nProcess].StationFirst BY(-1)
      DO
        // many movers to one target
        _nTargetIndex[1+_idx-_ItfProcessCollector[_nProcess].StationFirst]  := TO_USINT(_ItfProcessCollector[_nProcessTarget].StationFirst);
  
        _ItfProcessCollector[_nProcess].TargetIndex := _nTargetIndex; // write Xts target onto my ProcessCollector interface
        _ProcessData.wTarget                        := _ItfProcessCollector[_nProcess].
                                                       DelBit(_ProcessData.wTarget, _idx-_nTargetStationFirst);
      END_FOR
    END_CASE
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_BUSY:
        CASE _State.State
        OF
          E_PROCESS_STATE.PROCESS_STATIONS_OUTFEED: // check my process' state
          CASE _State.Result
          OF
            E_PROGRESS.PROGRESS_BUSY:
              // now data is prepared and copied to the right places
              _Ctrl.Cmd               := E_PROCESS_CTRL.PROCESS_STATIONS_OUTFEED; // release the kraken!
              _eStateProgress         := E_PROGRESS.PROGRESS_CHECK;               // go check for more

              IF (_MessageLevel = E_MessageType.eMessageVerbose)
              THEN
                _stMsg.eType          := E_MessageType.eMessageVerbose;
                _stMsg.eSubdevice     := e_Subdevice.Instance_Infeed;
                _stMsg.iErrorNumber   := 0;
                _stMsg.sText          := concat(TO_STRING(_eStateInstance), ': ');
                _stMsg.sText          := concat(_stMsg.sText, TO_STRING(_eStateProgress));
                f_MessageSet(_stMsg);
              END_IF
          END_CASE
        END_CASE
    END_CASE
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_CHECK:
        // job done, delete from top of my list
        _DeleteResult                 := _ItfProcessList[_nProcess].RemoveHeadValue();

        IF (_DeleteResult.wState <> 0)
        THEN
          // deleting from list must be successful
          // IF you land here, there is something wrong with initialization or configuration of the linked list
          _eStateProgress             := E_PROGRESS.PROGRESS_ERROR;
        ELSE
          _eStateProgress             := E_PROGRESS.PROGRESS_DONE; // job is done, no ticket for target process required, BufferOutfeedRobot checks for arriving movers
        END_IF
    END_CASE
    //-------------------------------------------------------------------------
    CASE _eStateProgress
    OF
      E_PROGRESS.PROGRESS_DONE:
        CASE _State.State
        OF
          E_PROCESS_STATE.PROCESS_DISABLE:
            IF (_MessageLevel = E_MessageType.eMessageVerbose)
            THEN
              _stMsg.eType            := E_MessageType.eMessageVerbose;
              _stMsg.eSubdevice       := e_Subdevice.Instance_Infeed;
              _stMsg.iErrorNumber     := 0;
              _stMsg.sText            := concat(TO_STRING(_eStateInstance), ': ');
              _stMsg.sText            := concat(_stMsg.sText, TO_STRING(_eStateProgress));
              f_MessageSet(_stMsg);
            END_IF
    
            _eStateInstance           := E_INSTANCE_STATE.DISABLED;
            _eStateProgress           := E_PROGRESS.PROGRESS_INIT;
        END_CASE
    END_CASE
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
_InstanceState[_nProcess].State       := _eStateInstance;
_InstanceState[_nProcess].Progress    := _eStateProgress;
]]></ST>
    </Implementation>
    <Method Name="Clear" Id="{ebeff18c-ed5d-4086-8062-0f3df3c3f24d}">
      <Declaration><![CDATA[METHOD Clear : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[memset(ADR(_nTargetIndex), 0, SIZEOF(_nTargetIndex));

//_eStateInstance                         := E_INSTANCE_STATE.DISABLED;
_eStateProgress                 := E_PROGRESS.PROGRESS_INIT;

Clear                           := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="ProcessTarget" Id="{15b3f868-c77f-4c3d-9d92-4177362f521a}">
      <Declaration><![CDATA[PROPERTY ProcessTarget : E_INSTANCE]]></Declaration>
      <Get Name="Get" Id="{de3a47b0-6721-4a50-9dc1-46916bedca4c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ProcessTarget := _nProcessTarget;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{dba46dc2-1ac1-4a10-a8f3-55f90bcb65a1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_nProcessTarget := ProcessTarget;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="fb_Infeed">
      <LineId Id="2973" Count="22" />
      <LineId Id="3485" Count="0" />
      <LineId Id="2996" Count="95" />
      <LineId Id="3668" Count="1" />
      <LineId Id="3092" Count="15" />
      <LineId Id="3109" Count="26" />
      <LineId Id="3481" Count="1" />
      <LineId Id="3480" Count="0" />
      <LineId Id="3483" Count="1" />
      <LineId Id="3138" Count="1" />
      <LineId Id="3478" Count="1" />
      <LineId Id="3140" Count="17" />
      <LineId Id="3640" Count="0" />
      <LineId Id="3159" Count="94" />
      <LineId Id="3255" Count="1" />
      <LineId Id="3273" Count="8" />
      <LineId Id="3283" Count="2" />
      <LineId Id="3486" Count="10" />
      <LineId Id="3533" Count="5" />
      <LineId Id="3549" Count="25" />
      <LineId Id="3548" Count="0" />
      <LineId Id="3527" Count="2" />
      <LineId Id="3286" Count="172" />
      <LineId Id="3577" Count="2" />
      <LineId Id="3587" Count="11" />
      <LineId Id="3584" Count="0" />
      <LineId Id="3471" Count="5" />
      <LineId Id="139" Count="0" />
    </LineIds>
    <LineIds Name="fb_Infeed.Clear">
      <LineId Id="6" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Infeed.ProcessTarget.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_Infeed.ProcessTarget.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>