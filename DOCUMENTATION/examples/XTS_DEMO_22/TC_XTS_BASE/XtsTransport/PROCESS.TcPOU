<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="PROCESS" Id="{e5979450-2e38-45e7-a605-8bf053f6a629}" SpecialFunc="None">
    <Declaration><![CDATA[//---------------------------------------------------------------------------------------------------------------
//
//  HAUD 2024.04.13
//
//  - ExternControl for XtsTransport
//
//  - example project for controlling XTS transport layer
//  - transport layer members:
//
//      HAUD 2024 04 30 - introduction of fb_UnitControl as interface to APPLICATION
//
//    - fb_UnitControl
//      - groups commands into sequences for APPLICATION
//      - handles XtsTransport
//      - handles fb_Process
//
//    - fb_Process
//      - groups XtsStations for processes
//      - synced handshakes with all assigned XtsStations
//
//    - Transport Control Unit
//      - mapped from XtsTransport GVL_XTS.TransportCtrl / GVL_XTS.TransportState
//        - Info for CaGroup
//        - Info for Xpu
//
//      - coordinates members to get XTS in defined states
//
//    - Xts Stations
//      - handshakes for mover transport
//
//---------------------------------------------------------------------------------------------------------------
// This SOFTWARE is provided as an Exemple by THE PROVIDER "as is" and "with all faults." THE PROVIDER makes no 
// representations or warranties of any kind concerning the safety, suitability, lack of viruses, inaccuracies, 
// typographical errors, or other harmful components of this SOFTWARE. There are inherent dangers in the use of 
// any software, and you are solely responsible for determining whether this SOFTWARE is compatible with your 
// equipment and other software installed on your equipment. You are also solely responsible for the protection 
// of your equipment and backup of your data, and THE PROVIDER will not be liable for any damages you may suffer 
// in connection with using, modifying, or distributing this SOFTWARE.
//---------------------------------------------------------------------------------------------------------------
PROGRAM PROCESS
VAR
  bInit,
  bStart              : BOOL;
  eInit               : E_PROGRESS;

  nProcess,
  nStation            : UINT;

  tProcess            : ARRAY[1..MAX_PROCESS] OF TIME;
  tonProcess          : ARRAY[1..MAX_PROCESS] OF Tc2_Standard.TON;

  {attribute 'displaymode':='bin'}
  wEnableProcess      : ARRAY[1..MAX_PROCESS] OF DWORD;  // switch XTS stations on/off here (one word per process --> max. 16 stations each)

  {attribute 'displaymode':='bin'}
  wInitProcess        : WORD;  // processes init

  bEmptySerialStation : BOOL;

  eProcessCmd         : ARRAY[1..MAX_PROCESS] OF E_STATION_CTRL;
  eProcessState       : ARRAY[1..MAX_PROCESS] OF E_STATION_STATE;

  nMoverSelected,
  nStationSelected,
  nProcessSelected,
  nStationParameter,
  nProcessParameter   : UINT;

  eTransportCmd,
  eTransportCmdOld    : E_XTS_TRANSPORT_CTRL;

  eTransportState,
  eTransportStateOld  : E_XTS_TRANSPORT_STATE;
  eTransportResult,
  eStateStart         : E_PROGRESS;

  eXpuState           : E_XPU_STATE;
  eXpuResult          : E_PROGRESS;
  eXpuCheck           : E_XPU_CHECK;

  eMoverState         : E_MOVER_STATE;
  eMoverResult        : E_PROGRESS;

  sCaGroupState,
  sTransportState,
  sTransportCheck,
  sTransportResult,
  sXpuState,
  sXpuResult,
  sXpuCheck,
  sXpuOpMode,
  sXpuMoverdetectionMode,
  sXpuMoverAssignement,
  sMoverState,
  sMoverResult,
  sStationState,
  sStationStateMask,
  sStationCtrlMask,
  sProcessEnableMask        : STRING;

  bStationEnable,
  bStationEnter,
  bStationStart,
  bStationDone,
  bStationOut,
  bStationGone            : BOOL;

  sStationText            : STRING;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//#############################################################################
// Visualization data	
//#############################################################################	
VisuData();
//
//#############################################################################
// check for changed Cmd on XtsTransportCtrl.Cmd
//#############################################################################
//
eTransportCmd                         := GVL_XTS.XtsTransportCtrl.Cmd;
//
IF (eTransportCmd <> eTransportCmdOld)
THEN
  eTransportCmdOld                    := eTransportCmd;
  bStart                              := FALSE;
  bEmptySerialStation                 := FALSE;
  eStateStart                         := E_PROGRESS.PROGRESS_INIT;
  memset(ADR(wEnableProcess), 0, SIZEOF(wEnableProcess));

  CASE eTransportCmd
  OF
    E_XTS_TRANSPORT_CTRL.CMD_INIT:
      bInit                           := FALSE;

  ELSE
    IF bInit
    THEN
      CASE eTransportCmd
      OF
        E_XTS_TRANSPORT_CTRL.CMD_IDLE,
        E_XTS_TRANSPORT_CTRL.CMD_TRANSPORT_START:
          FOR nProcess := 1 TO MAX_PROCESS
          DO
            eProcessCmd[nProcess]     := E_STATION_CTRL.STATION_DISABLE;
          END_FOR
      END_CASE
    END_IF
  END_CASE
END_IF
//
//
//#############################################################################
// check for changed state on XtsTransportState.State
//#############################################################################
//
IF (GVL_XTS.XtsTransportState.State <> eTransportStateOld)
THEN
  CASE (GVL_XTS.XtsTransportState.State MOD E_PROGRESS.PROGRESS_DONE)
  OF
    E_XTS_TRANSPORT_STATE.TRANSPORT_START:
      CASE eStateStart
      OF
        E_PROGRESS.PROGRESS_INIT:
          IF GVL_XTS.XtsTransportState.GroupInfo.AllAxesStanding
          THEN
            eStateStart               := E_PROGRESS.PROGRESS_BUSY;
            memset(ADR(wEnableProcess), 0, SIZEOF(wEnableProcess));
          END_IF

        E_PROGRESS.PROGRESS_BUSY:
          eStateStart                   := E_PROGRESS.PROGRESS_PREPARE;
          FOR nProcess := 1 TO MAX_PROCESS
          DO
            FOR nStation := 1 TO GVL_PROCESS.Process[nProcess].StationCount
            DO
              wEnableProcess[nProcess]  := GVL_PROCESS.Process[nProcess].SetBitDWord(wEnableProcess[nProcess],(nStation-1));
            END_FOR
            GVL_PROCESS.Process[nProcess].EnableProcess := TO_WORD(wEnableProcess[nProcess]);
          END_FOR

        E_PROGRESS.PROGRESS_PREPARE:
          eStateStart                   := E_PROGRESS.PROGRESS_STARTUP;
          FOR nProcess := 1 TO MAX_PROCESS
          DO
            IF (nProcess = MAX_PROCESS)
            THEN
              GVL_PROCESS.Process[nProcess].TargetMask := wEnableProcess[1];
            ELSE
              GVL_PROCESS.Process[nProcess].TargetMask := wEnableProcess[nProcess+1];
            END_IF
          END_FOR

        E_PROGRESS.PROGRESS_STARTUP:
          eStateStart                   := E_PROGRESS.PROGRESS_CHECK;

        E_PROGRESS.PROGRESS_CHECK:
          eStateStart                 := E_PROGRESS.PROGRESS_OCCUPIED;
          FOR nProcess := 1 TO MAX_PROCESS
          DO
            IF NOT (GVL_PROCESS.Process[nProcess].EnableProcess = wEnableProcess[nProcess])
            THEN
              eStateStart             := E_PROGRESS.PROGRESS_CHECK;
            END_IF
          END_FOR

        E_PROGRESS.PROGRESS_OCCUPIED:
          eTransportStateOld          := GVL_XTS.XtsTransportState.State;
          bStart                      := TRUE;
      END_CASE

  ELSE
    eTransportStateOld                := GVL_XTS.XtsTransportState.State;

    CASE (GVL_XTS.XtsTransportState.State MOD E_PROGRESS.PROGRESS_ERROR)
    OF
      E_XTS_TRANSPORT_STATE.TRANSPORT_START:
        bStart                        := FALSE;

    END_CASE
  END_CASE
END_IF
//
//#############################################################################
//#############################################################################
//
IF NOT bInit
THEN
  Init();
END_IF
//#############################################################################
//#############################################################################
// cyclic call to processes
//#############################################################################
FOR nProcess := 1 TO MAX_PROCESS
DO
  GVL_PROCESS.Process[nProcess].Cycle();

  GVL_PROCESS.Process[nProcess].EnabledStation    := ADR(GVL_PROCESS.StationsEnabled);  // enabled process: for other processes to read
  GVL_PROCESS.Process[nProcess].MoverPerMinute    := ADR(GVL_PROCESS.MoverPerMinute);

  GVL_PROCESS.Process[nProcess].StationCtrl       := ADR(GVL_XTS.StationCtrl);
  GVL_PROCESS.Process[nProcess].StationState      := ADR(GVL_XTS.StationState);

  GVL_PROCESS.ItfProcess[nProcess]                := GVL_PROCESS.Process[nProcess]; 
END_FOR


//#############################################################################
// process workers
//#############################################################################


//#############################################################################
//
IF NOT (bInit) THEN RETURN; END_IF
//
//#############################################################################
//#############################################################################

AUTO();












//#############################################################################

]]></ST>
    </Implementation>
    <Action Name="AUTO" Id="{42d17f0a-ffc7-48d7-bbc1-779aac84e57a}">
      <Implementation>
        <ST><![CDATA[

IF NOT bStart THEN RETURN; END_IF


FOR nProcess := 1 TO MAX_PROCESS
DO
  CASE GVL_PROCESS.ItfProcess[nProcess].ProcessState
  OF
    E_STATION_STATE.STATION_DISABLE:
      GVL_PROCESS.ItfProcess[nProcess].ProcessCmd       := E_STATION_CTRL.STATION_ENABLE;

    E_STATION_STATE.STATION_MOVER_ENTER:
      CASE GVL_PROCESS.ItfProcess[nProcess].ProcessType
      OF
        E_PROCESS_TYPE.DISTRIBUTOR:
          GVL_PROCESS.ItfProcess[nProcess].ProcessCmd := E_STATION_CTRL.STATION_MOVER_SEND;
(*
          IF (GVL_XTS.StationState[GVL_PROCESS.ItfProcess[nProcess].StationFirst].rMoverModPos > GVL_XTS.StationParameter[GVL_PROCESS.ItfProcess[nProcess].StationFirst].rPosWait-5.0)// AND
          THEN
            GVL_PROCESS.ItfProcess[nProcess].ProcessCmd := E_STATION_CTRL.STATION_MOVER_SEND;
          END_IF
*)
      ELSE
          GVL_PROCESS.ItfProcess[nProcess].ProcessCmd   := E_STATION_CTRL.STATION_MOVER_ENTER;
      END_CASE

    E_STATION_STATE.STATION_PROCESS_START:
      tonProcess[nProcess](IN:= FALSE, PT:= tProcess[nProcess]);
      GVL_PROCESS.ItfProcess[nProcess].ProcessCmd       := E_STATION_CTRL.STATION_PROCESS_START;

    E_STATION_STATE.STATION_PROCESS_DONE:
      tonProcess[nProcess](IN:= TRUE, PT:= tProcess[nProcess]);
      IF tonProcess[nProcess].Q
      THEN
        GVL_PROCESS.ItfProcess[nProcess].ProcessCmd     := E_STATION_CTRL.STATION_PROCESS_DONE;
      END_IF

    E_STATION_STATE.STATION_MOVER_OUT:
      GVL_PROCESS.ItfProcess[nProcess].ProcessCmd       := E_STATION_CTRL.STATION_MOVER_OUT;

  END_CASE
END_FOR
]]></ST>
      </Implementation>
    </Action>
    <Method Name="Init" Id="{d4e04dd4-1210-4a4f-aaa3-f1d09beaee45}">
      <Declaration><![CDATA[METHOD Init
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eInit
OF
  E_PROGRESS.PROGRESS_INVALID,
  E_PROGRESS.PROGRESS_DONE:
    StationParameterInit();
    ProcessParameterInit();

    bStart                          := FALSE;
    eInit                           := E_PROGRESS.PROGRESS_INIT;
    GVL_XTS.XtsTransportCtrl.Cmd    := E_XTS_TRANSPORT_CTRL.CMD_NULL;

  E_PROGRESS.PROGRESS_INIT:
    IF (GVL_XTS.XtsTransportState.XpuInfo.IdDetectionValid) OR
       (GVL_XTS.XtsTransportState.XpuInfo.OperationMode = 1) // Simulation
    THEN
      GVL_XTS.XtsTransportCtrl.Cmd  := E_XTS_TRANSPORT_CTRL.CMD_INIT;

      IF (GVL_xts.XtsTransportState.State = E_XTS_TRANSPORT_STATE.TRANSPORT_INIT + E_PROGRESS.PROGRESS_DONE)
      THEN
        GVL_XTS.XtsTransportCtrl.Cmd:= E_XTS_TRANSPORT_CTRL.CMD_IDLE;
        eInit                       := E_PROGRESS.PROGRESS_BUSY;
      END_IF
    END_IF

  E_PROGRESS.PROGRESS_BUSY:
    eInit                           := E_PROGRESS.PROGRESS_PREPARE;
    wInitProcess                    := 0;

  E_PROGRESS.PROGRESS_PREPARE:

    FOR nProcess := 1 TO MAX_PROCESS
    DO
      GVL_PROCESS.Process[nProcess].TargetMask        := 0;
      GVL_PROCESS.Process[nProcess].ProcessCmd        := E_STATION_CTRL.STATION_INIT;
      IF (GVL_PROCESS.Process[nProcess].ProcessState = E_STATION_STATE.STATION_INIT)
      THEN
        wInitProcess                := GVL_PROCESS.Process[nProcess].SetBitWord(wInitProcess,  (nProcess-1));
      END_IF
    END_FOR
    IF (wInitProcess = EXPT(2,MAX_PROCESS)-1)
    THEN
      eInit                         := E_PROGRESS.PROGRESS_STARTUP;
    END_IF

  E_PROGRESS.PROGRESS_STARTUP:
    FOR nProcess := 1 TO MAX_PROCESS
    DO
      GVL_PROCESS.Process[nProcess].ProcessCmd         := E_STATION_CTRL.STATION_DISABLE;
    END_FOR
    bInit                           := TRUE;
    eInit                           := E_PROGRESS.PROGRESS_DONE;
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Action Name="ProcessParameterInit" Id="{2ec8a404-0bd3-41bd-a2a2-72f3fa15b985}">
      <Implementation>
        <ST><![CDATA[

// Beladen
//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------
  nProcessParameter   := 1;
  tProcess[nProcessParameter]             := T#3000MS;
  GVL_PROCESS.Process[nProcessParameter].ProcessType   := E_PROCESS_TYPE.PARALLEL_STRICT;
  GVL_PROCESS.Process[nProcessParameter].StationFirst  :=  1;
  GVL_PROCESS.Process[nProcessParameter].StationLast   :=  5;
  GVL_PROCESS.Process[nProcessParameter].TargetFirst   :=  6;
  GVL_PROCESS.Process[nProcessParameter].TargetLast    := 10;

// WKZ_1
//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------
  nProcessParameter   := 2;
  tProcess[nProcessParameter]             := T#3000MS;
  GVL_PROCESS.Process[nProcessParameter].ProcessType   := E_PROCESS_TYPE.PARALLEL_STRICT;
  GVL_PROCESS.Process[nProcessParameter].StationFirst  :=  6;
  GVL_PROCESS.Process[nProcessParameter].StationLast   := 10;
  GVL_PROCESS.Process[nProcessParameter].TargetFirst   := 11;
  GVL_PROCESS.Process[nProcessParameter].TargetLast    := 11;

// DISTRIBUTOR_SCAN
//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------
  nProcessParameter   := 3;
  tProcess[nProcessParameter]             := T#0MS;
  GVL_PROCESS.Process[nProcessParameter].ProcessType   := E_PROCESS_TYPE.DISTRIBUTOR;
  GVL_PROCESS.Process[nProcessParameter].StationFirst  := 11;
  GVL_PROCESS.Process[nProcessParameter].StationLast   := 11;
  GVL_PROCESS.Process[nProcessParameter].TargetFirst   := 12;
  GVL_PROCESS.Process[nProcessParameter].TargetLast    := 13;

// SCANNER
//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------
  nProcessParameter   := 4;
  tProcess[nProcessParameter]             := T#1000MS;
  GVL_PROCESS.Process[nProcessParameter].ProcessType   := E_PROCESS_TYPE.PARALLEL_STRICT;
  GVL_PROCESS.Process[nProcessParameter].StationFirst  := 12;
  GVL_PROCESS.Process[nProcessParameter].StationLast   := 13;
  GVL_PROCESS.Process[nProcessParameter].TargetFirst   := 14;
  GVL_PROCESS.Process[nProcessParameter].TargetLast    := 14;

// DISTRIBUTOR_WKZ_2
//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------
  nProcessParameter   := 5;
  tProcess[nProcessParameter]             := T#0MS;
  GVL_PROCESS.Process[nProcessParameter].ProcessType   := E_PROCESS_TYPE.DISTRIBUTOR;
  GVL_PROCESS.Process[nProcessParameter].StationFirst  := 14;
  GVL_PROCESS.Process[nProcessParameter].StationLast   := 14;
  GVL_PROCESS.Process[nProcessParameter].TargetFirst   := 15;
  GVL_PROCESS.Process[nProcessParameter].TargetLast    := 19;

// WKZ_2
//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------
  nProcessParameter   := 6;
  tProcess[nProcessParameter]             := T#3000MS;
  GVL_PROCESS.Process[nProcessParameter].ProcessType   := E_PROCESS_TYPE.PARALLEL_STRICT;
  GVL_PROCESS.Process[nProcessParameter].StationFirst  := 15;
  GVL_PROCESS.Process[nProcessParameter].StationLast   := 19;
  GVL_PROCESS.Process[nProcessParameter].TargetFirst   := 20;
  GVL_PROCESS.Process[nProcessParameter].TargetLast    := 20;

// CAMERA_ADJUST
//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------
  nProcessParameter   := 7;
  tProcess[nProcessParameter]             := T#400MS;
  GVL_PROCESS.Process[nProcessParameter].ProcessType   := E_PROCESS_TYPE.SINGLE;
  GVL_PROCESS.Process[nProcessParameter].StationFirst  := 20;
  GVL_PROCESS.Process[nProcessParameter].StationLast   := 20;
  GVL_PROCESS.Process[nProcessParameter].TargetFirst   := 21;
  GVL_PROCESS.Process[nProcessParameter].TargetLast    := 21;

// DISTRIBUTOR_CAMERA
//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------
  nProcessParameter   := 8;
  tProcess[nProcessParameter]             := T#0MS;
  GVL_PROCESS.Process[nProcessParameter].ProcessType   := E_PROCESS_TYPE.DISTRIBUTOR;
  GVL_PROCESS.Process[nProcessParameter].StationFirst  := 21;
  GVL_PROCESS.Process[nProcessParameter].StationLast   := 21;
  GVL_PROCESS.Process[nProcessParameter].TargetFirst   := 22;
  GVL_PROCESS.Process[nProcessParameter].TargetLast    := 24;

// CAMERA
//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------
  nProcessParameter   := 9;
  tProcess[nProcessParameter]             := T#1000MS;
  GVL_PROCESS.Process[nProcessParameter].ProcessType   := E_PROCESS_TYPE.PARALLEL_STRICT;
  GVL_PROCESS.Process[nProcessParameter].StationFirst  := 22;
  GVL_PROCESS.Process[nProcessParameter].StationLast   := 24;
  GVL_PROCESS.Process[nProcessParameter].TargetFirst   := 25;
  GVL_PROCESS.Process[nProcessParameter].TargetLast    := 25;

// DISTRIBUTOR_UNLOAD
//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------
  nProcessParameter   := 10;
  tProcess[nProcessParameter]             := T#0MS;
  GVL_PROCESS.Process[nProcessParameter].ProcessType   := E_PROCESS_TYPE.DISTRIBUTOR;
  GVL_PROCESS.Process[nProcessParameter].StationFirst  := 25;
  GVL_PROCESS.Process[nProcessParameter].StationLast   := 25;
  GVL_PROCESS.Process[nProcessParameter].TargetFirst   := 26;
  GVL_PROCESS.Process[nProcessParameter].TargetLast    := 27;

// UNLOAD
//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------
  nProcessParameter   := 11;
  tProcess[nProcessParameter]             := T#1050MS;
  GVL_PROCESS.Process[nProcessParameter].ProcessType   := E_PROCESS_TYPE.PARALLEL_STRICT;
  GVL_PROCESS.Process[nProcessParameter].StationFirst  := 26;
  GVL_PROCESS.Process[nProcessParameter].StationLast   := 27;
  GVL_PROCESS.Process[nProcessParameter].TargetFirst   := 28;
  GVL_PROCESS.Process[nProcessParameter].TargetLast    := 28;

// DISTRIBUTOR_LOAD
//---------------------------------------------------------------------------------------
//---------------------------------------------------------------------------------------
  nProcessParameter   := 12;
  tProcess[nProcessParameter]             := T#0MS;
  GVL_PROCESS.Process[nProcessParameter].ProcessType   := E_PROCESS_TYPE.DISTRIBUTOR;
  GVL_PROCESS.Process[nProcessParameter].StationFirst  := 28;
  GVL_PROCESS.Process[nProcessParameter].StationLast   := 28;
  GVL_PROCESS.Process[nProcessParameter].TargetFirst   := 1;
  GVL_PROCESS.Process[nProcessParameter].TargetLast    := 5;

]]></ST>
      </Implementation>
    </Action>
    <Action Name="StationParameterInit" Id="{fd54c47d-a317-435a-a9c8-7d9f9b1d1ea9}">
      <Implementation>
        <ST><![CDATA[//-----------------------------------------------------------------------------
//
//  HAUD 2024.07.04
//
// 
//  - hard coded station parameter
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------------------------------------------------------
//  LOAD
    sStationText  := 'LOAD 1/5';
//-----------------------------------------------------------------------------------------------------------------------------------------
nStationParameter := 1;
GVL_XTS.StationParameter[nStationParameter].sText                 := 'LOAD 1/5';
GVL_XTS.StationParameter[nStationParameter].rPosWait              :=     20.0;  // absolute modulo position

GVL_XTS.StationParameter[nStationParameter].nConfiguredStopCount  :=      1;   // how many stops the mover has to make in this station
GVL_XTS.StationParameter[nStationParameter].rPosStop[1]           :=    100.0; // relative to rPosWait

GVL_XTS.StationParameter[nStationParameter].rReleaseDistance      :=    500.0; // relative to Mover.ActPos

GVL_XTS.StationParameter[nStationParameter].rGap                  :=     95.0;
GVL_XTS.StationParameter[nStationParameter].rVelo                 :=   2500.0;
GVL_XTS.StationParameter[nStationParameter].rAccDec               :=  15000.0;
GVL_XTS.StationParameter[nStationParameter].rJerk                 := 800000.0;

//-----------------------------------------------------------------------------------------------------------------------------------------
nStationParameter := 2;
GVL_XTS.StationParameter[nStationParameter].sText                 := 'LOAD 2/5';
GVL_XTS.StationParameter[nStationParameter].rPosWait              :=     20.0;  // absolute modulo position

GVL_XTS.StationParameter[nStationParameter].nConfiguredStopCount  :=      1;   // how many stops the mover has to make in this station
GVL_XTS.StationParameter[nStationParameter].rPosStop[1]           :=    200.0; // relative to rPosWait

GVL_XTS.StationParameter[nStationParameter].rReleaseDistance      :=    400.0; // relative to Mover.ActPos

GVL_XTS.StationParameter[nStationParameter].rGap                  :=     95.0;
GVL_XTS.StationParameter[nStationParameter].rVelo                 :=   2500.0;
GVL_XTS.StationParameter[nStationParameter].rAccDec               :=  15000.0;
GVL_XTS.StationParameter[nStationParameter].rJerk                 := 800000.0;

//-----------------------------------------------------------------------------------------------------------------------------------------
nStationParameter := 3;
GVL_XTS.StationParameter[nStationParameter].sText                 := 'LOAD 3/5';
GVL_XTS.StationParameter[nStationParameter].rPosWait              :=     20.0;  // absolute modulo position

GVL_XTS.StationParameter[nStationParameter].nConfiguredStopCount  :=      1;   // how many stops the mover has to make in this station
GVL_XTS.StationParameter[nStationParameter].rPosStop[1]           :=    300.0; // relative to rPosWait

GVL_XTS.StationParameter[nStationParameter].rReleaseDistance      :=    300.0; // relative to Mover.ActPos

GVL_XTS.StationParameter[nStationParameter].rGap                  :=     95.0;
GVL_XTS.StationParameter[nStationParameter].rVelo                 :=   2500.0;
GVL_XTS.StationParameter[nStationParameter].rAccDec               :=  15000.0;
GVL_XTS.StationParameter[nStationParameter].rJerk                 := 800000.0;

//-----------------------------------------------------------------------------------------------------------------------------------------
nStationParameter := 4;
GVL_XTS.StationParameter[nStationParameter].sText                 := 'LOAD 4/5';
GVL_XTS.StationParameter[nStationParameter].rPosWait              :=     20.0;  // absolute modulo position

GVL_XTS.StationParameter[nStationParameter].nConfiguredStopCount  :=      1;   // how many stops the mover has to make in this station
GVL_XTS.StationParameter[nStationParameter].rPosStop[1]           :=    400.0; // relative to rPosWait

GVL_XTS.StationParameter[nStationParameter].rReleaseDistance      :=    200.0; // relative to Mover.ActPos

GVL_XTS.StationParameter[nStationParameter].rGap                  :=     95.0;
GVL_XTS.StationParameter[nStationParameter].rVelo                 :=   1250.0;
GVL_XTS.StationParameter[nStationParameter].rAccDec               :=  15000.0;
GVL_XTS.StationParameter[nStationParameter].rJerk                 := 800000.0;

//-----------------------------------------------------------------------------------------------------------------------------------------
nStationParameter := 5;
GVL_XTS.StationParameter[nStationParameter].sText                 := 'LOAD 5/5';
GVL_XTS.StationParameter[nStationParameter].rPosWait              :=     20.0;  // absolute modulo position

GVL_XTS.StationParameter[nStationParameter].nConfiguredStopCount  :=      1;   // how many stops the mover has to make in this station
GVL_XTS.StationParameter[nStationParameter].rPosStop[1]           :=    500.0; // relative to rPosWait

GVL_XTS.StationParameter[nStationParameter].rReleaseDistance      :=    150.0; // relative to Mover.ActPos

GVL_XTS.StationParameter[nStationParameter].rGap                  :=     95.0;
GVL_XTS.StationParameter[nStationParameter].rVelo                 :=   1250.0;
GVL_XTS.StationParameter[nStationParameter].rAccDec               :=  15000.0;
GVL_XTS.StationParameter[nStationParameter].rJerk                 := 800000.0;

//-----------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------
//  WKZ_1
    sStationText  := 'WORK_1 1/5';
//-----------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------
nStationParameter := 6;
GVL_XTS.StationParameter[nStationParameter].sText                 := 'WORK_1 1/5';
GVL_XTS.StationParameter[nStationParameter].rPosWait              :=   1820.0;  // absolute modulo position

GVL_XTS.StationParameter[nStationParameter].nConfiguredStopCount  :=      1;   // how many stops the mover has to make in this station
GVL_XTS.StationParameter[nStationParameter].rPosStop[1]           :=    100.0; // relative to rPosWait

GVL_XTS.StationParameter[nStationParameter].rReleaseDistance      :=    500.0; // relative to Mover.ActPos

GVL_XTS.StationParameter[nStationParameter].rGap                  :=     95.0;
GVL_XTS.StationParameter[nStationParameter].rVelo                 :=   2500.0;
GVL_XTS.StationParameter[nStationParameter].rAccDec               :=  15000.0;
GVL_XTS.StationParameter[nStationParameter].rJerk                 := 800000.0;

//-----------------------------------------------------------------------------------------------------------------------------------------
nStationParameter := 7;
GVL_XTS.StationParameter[nStationParameter].sText                 := 'WORK_1 2/5';
GVL_XTS.StationParameter[nStationParameter].rPosWait              :=   1820.0;  // absolute modulo position

GVL_XTS.StationParameter[nStationParameter].nConfiguredStopCount  :=      1;   // how many stops the mover has to make in this station
GVL_XTS.StationParameter[nStationParameter].rPosStop[1]           :=    200.0; // relative to rPosWait

GVL_XTS.StationParameter[nStationParameter].rReleaseDistance      :=    400.0; // relative to Mover.ActPos

GVL_XTS.StationParameter[nStationParameter].rGap                  :=     95.0;
GVL_XTS.StationParameter[nStationParameter].rVelo                 :=   2500.0;
GVL_XTS.StationParameter[nStationParameter].rAccDec               :=  15000.0;
GVL_XTS.StationParameter[nStationParameter].rJerk                 := 800000.0;

//-----------------------------------------------------------------------------------------------------------------------------------------
nStationParameter := 8;
GVL_XTS.StationParameter[nStationParameter].sText                 := 'WORK_1 3/5';
GVL_XTS.StationParameter[nStationParameter].rPosWait              :=   1820.0;  // absolute modulo position

GVL_XTS.StationParameter[nStationParameter].nConfiguredStopCount  :=      1;   // how many stops the mover has to make in this station
GVL_XTS.StationParameter[nStationParameter].rPosStop[1]           :=    300.0; // relative to rPosWait

GVL_XTS.StationParameter[nStationParameter].rReleaseDistance      :=    300.0; // relative to Mover.ActPos

GVL_XTS.StationParameter[nStationParameter].rGap                  :=     95.0;
GVL_XTS.StationParameter[nStationParameter].rVelo                 :=   2500.0;
GVL_XTS.StationParameter[nStationParameter].rAccDec               :=  15000.0;
GVL_XTS.StationParameter[nStationParameter].rJerk                 := 800000.0;

//-----------------------------------------------------------------------------------------------------------------------------------------
nStationParameter := 9;
GVL_XTS.StationParameter[nStationParameter].sText                 := 'WORK_1 4/5';
GVL_XTS.StationParameter[nStationParameter].rPosWait              :=   1820.0;  // absolute modulo position

GVL_XTS.StationParameter[nStationParameter].nConfiguredStopCount  :=      1;   // how many stops the mover has to make in this station
GVL_XTS.StationParameter[nStationParameter].rPosStop[1]           :=    400.0; // relative to rPosWait

GVL_XTS.StationParameter[nStationParameter].rReleaseDistance      :=    200.0; // relative to Mover.ActPos

GVL_XTS.StationParameter[nStationParameter].rGap                  :=     95.0;
GVL_XTS.StationParameter[nStationParameter].rVelo                 :=   1250.0;
GVL_XTS.StationParameter[nStationParameter].rAccDec               :=  15000.0;
GVL_XTS.StationParameter[nStationParameter].rJerk                 := 800000.0;

//-----------------------------------------------------------------------------------------------------------------------------------------
nStationParameter := 10;
GVL_XTS.StationParameter[nStationParameter].sText                 := 'WORK_1 5/5';
GVL_XTS.StationParameter[nStationParameter].rPosWait              :=   1820.0;  // absolute modulo position

GVL_XTS.StationParameter[nStationParameter].nConfiguredStopCount  :=      1;   // how many stops the mover has to make in this station
GVL_XTS.StationParameter[nStationParameter].rPosStop[1]           :=    500.0; // relative to rPosWait

GVL_XTS.StationParameter[nStationParameter].rReleaseDistance      :=    150.0; // relative to Mover.ActPos

GVL_XTS.StationParameter[nStationParameter].rGap                  :=     95.0;
GVL_XTS.StationParameter[nStationParameter].rVelo                 :=   1250.0;
GVL_XTS.StationParameter[nStationParameter].rAccDec               :=  15000.0;
GVL_XTS.StationParameter[nStationParameter].rJerk                 := 800000.0;

//-----------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------
//  DISTRIBUTOR_SCAN
    sStationText  := 'DISTRIBUTOR_SCAN';
//-----------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------
nStationParameter := 11;
GVL_XTS.StationParameter[nStationParameter].sText                 := 'DISTRIBUTOR_SCAN';
GVL_XTS.StationParameter[nStationParameter].rPosWait              :=   2750.0;  // absolute modulo position

GVL_XTS.StationParameter[nStationParameter].nConfiguredStopCount  :=      1;   // how many stops the mover has to make in this station
GVL_XTS.StationParameter[nStationParameter].rPosStop[1]           :=      0.0; // relative to rPosWait

GVL_XTS.StationParameter[nStationParameter].rReleaseDistance      :=    -10.0; // relative to Mover.ActPos

GVL_XTS.StationParameter[nStationParameter].rGap                  :=     95.0;
GVL_XTS.StationParameter[nStationParameter].rVelo                 :=   3000.0;
GVL_XTS.StationParameter[nStationParameter].rAccDec               :=  15000.0;
GVL_XTS.StationParameter[nStationParameter].rJerk                 := 800000.0;


//-----------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------
//  SCANNER_1
    sStationText  := 'SCANNER 1/2';
//-----------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------
nStationParameter := 12;
GVL_XTS.StationParameter[nStationParameter].sText                 := 'SCANNER 1/2';
GVL_XTS.StationParameter[nStationParameter].rPosWait              :=   3400.0;  // absolute modulo position

GVL_XTS.StationParameter[nStationParameter].nConfiguredStopCount  :=      1;   // how many stops the mover has to make in this station
GVL_XTS.StationParameter[nStationParameter].rPosStop[1]           :=    100.0; // relative to rPosWait

GVL_XTS.StationParameter[nStationParameter].rReleaseDistance      :=     20.0; // relative to Mover.ActPos

GVL_XTS.StationParameter[nStationParameter].rGap                  :=     95.0;
GVL_XTS.StationParameter[nStationParameter].rVelo                 :=   3000.0;
GVL_XTS.StationParameter[nStationParameter].rAccDec               :=  15000.0;
GVL_XTS.StationParameter[nStationParameter].rJerk                 := 800000.0;

//-----------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------
//  SCANNER_2
    sStationText  := 'SCANNER 2/2';
//-----------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------
nStationParameter := 13;
GVL_XTS.StationParameter[nStationParameter].sText                 := 'SCANNER 2/2';
GVL_XTS.StationParameter[nStationParameter].rPosWait              :=   3400.0;  // absolute modulo position

GVL_XTS.StationParameter[nStationParameter].nConfiguredStopCount  :=      1;   // how many stops the mover has to make in this station
GVL_XTS.StationParameter[nStationParameter].rPosStop[1]           :=    200.0; // relative to rPosWait

GVL_XTS.StationParameter[nStationParameter].rReleaseDistance      :=     10.0; // relative to Mover.ActPos

GVL_XTS.StationParameter[nStationParameter].rGap                  :=     95.0;
GVL_XTS.StationParameter[nStationParameter].rVelo                 :=   3000.0;
GVL_XTS.StationParameter[nStationParameter].rAccDec               :=  15000.0;
GVL_XTS.StationParameter[nStationParameter].rJerk                 := 800000.0;

//-----------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------
//  DISTRIBUTOR_WKZ2
    sStationText  := 'DISTRIBUTOR_WORK_2';
//-----------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------
nStationParameter := 14;
GVL_XTS.StationParameter[nStationParameter].sText                 := 'DISTRIBUTOR_WORK_2';
GVL_XTS.StationParameter[nStationParameter].rPosWait              :=   4000.0;  // absolute modulo position

GVL_XTS.StationParameter[nStationParameter].nConfiguredStopCount  :=      1;   // how many stops the mover has to make in this station
GVL_XTS.StationParameter[nStationParameter].rPosStop[1]           :=      0.0; // relative to rPosWait

GVL_XTS.StationParameter[nStationParameter].rReleaseDistance      :=    -10.0; // relative to Mover.ActPos

GVL_XTS.StationParameter[nStationParameter].rGap                  :=     95.0;
GVL_XTS.StationParameter[nStationParameter].rVelo                 :=   1250.0;
GVL_XTS.StationParameter[nStationParameter].rAccDec               :=  15000.0;
GVL_XTS.StationParameter[nStationParameter].rJerk                 := 800000.0;

//-----------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------
//  WKZ_2
    sStationText  := 'WORK_2 1/5';
//-----------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------
nStationParameter := 15;
GVL_XTS.StationParameter[nStationParameter].sText                 := 'WORK_2 1/5';
GVL_XTS.StationParameter[nStationParameter].rPosWait              :=   5300.0;  // absolute modulo position

GVL_XTS.StationParameter[nStationParameter].nConfiguredStopCount  :=      1;   // how many stops the mover has to make in this station
GVL_XTS.StationParameter[nStationParameter].rPosStop[1]           :=    100.0; // relative to rPosWait

GVL_XTS.StationParameter[nStationParameter].rReleaseDistance      :=    200.0; // relative to Mover.ActPos

GVL_XTS.StationParameter[nStationParameter].rGap                  :=     95.0;
GVL_XTS.StationParameter[nStationParameter].rVelo                 :=   2500.0;
GVL_XTS.StationParameter[nStationParameter].rAccDec               :=  15000.0;
GVL_XTS.StationParameter[nStationParameter].rJerk                 := 800000.0;

//-----------------------------------------------------------------------------------------------------------------------------------------
nStationParameter := 16;
GVL_XTS.StationParameter[nStationParameter].sText                 := 'WORK_2 2/5';
GVL_XTS.StationParameter[nStationParameter].rPosWait              :=   5300.0;  // absolute modulo position

GVL_XTS.StationParameter[nStationParameter].nConfiguredStopCount  :=      1;   // how many stops the mover has to make in this station
GVL_XTS.StationParameter[nStationParameter].rPosStop[1]           :=    200.0; // relative to rPosWait

GVL_XTS.StationParameter[nStationParameter].rReleaseDistance      :=    150.0; // relative to Mover.ActPos

GVL_XTS.StationParameter[nStationParameter].rGap                  :=     95.0;
GVL_XTS.StationParameter[nStationParameter].rVelo                 :=   2500.0;
GVL_XTS.StationParameter[nStationParameter].rAccDec               :=  15000.0;
GVL_XTS.StationParameter[nStationParameter].rJerk                 := 800000.0;

//-----------------------------------------------------------------------------------------------------------------------------------------
nStationParameter := 17;
GVL_XTS.StationParameter[nStationParameter].sText                 := 'WORK_2 3/5';
GVL_XTS.StationParameter[nStationParameter].rPosWait              :=   5300.0;  // absolute modulo position

GVL_XTS.StationParameter[nStationParameter].nConfiguredStopCount  :=      1;   // how many stops the mover has to make in this station
GVL_XTS.StationParameter[nStationParameter].rPosStop[1]           :=    300.0; // relative to rPosWait

GVL_XTS.StationParameter[nStationParameter].rReleaseDistance      :=    100.0; // relative to Mover.ActPos

GVL_XTS.StationParameter[nStationParameter].rGap                  :=     95.0;
GVL_XTS.StationParameter[nStationParameter].rVelo                 :=   2500.0;
GVL_XTS.StationParameter[nStationParameter].rAccDec               :=  15000.0;
GVL_XTS.StationParameter[nStationParameter].rJerk                 := 800000.0;

//-----------------------------------------------------------------------------------------------------------------------------------------
nStationParameter := 18;
GVL_XTS.StationParameter[nStationParameter].sText                 := 'WORK_2 4/5';
GVL_XTS.StationParameter[nStationParameter].rPosWait              :=   5300.0;  // absolute modulo position

GVL_XTS.StationParameter[nStationParameter].nConfiguredStopCount  :=      1;   // how many stops the mover has to make in this station
GVL_XTS.StationParameter[nStationParameter].rPosStop[1]           :=    400.0; // relative to rPosWait

GVL_XTS.StationParameter[nStationParameter].rReleaseDistance      :=    50.0; // relative to Mover.ActPos

GVL_XTS.StationParameter[nStationParameter].rGap                  :=     95.0;
GVL_XTS.StationParameter[nStationParameter].rVelo                 :=   2500.0;
GVL_XTS.StationParameter[nStationParameter].rAccDec               :=  15000.0;
GVL_XTS.StationParameter[nStationParameter].rJerk                 := 800000.0;

//-----------------------------------------------------------------------------------------------------------------------------------------
nStationParameter := 19;
GVL_XTS.StationParameter[nStationParameter].sText                 := 'WORK_2 5/5';
GVL_XTS.StationParameter[nStationParameter].rPosWait              :=   5300.0;  // absolute modulo position

GVL_XTS.StationParameter[nStationParameter].nConfiguredStopCount  :=      1;   // how many stops the mover has to make in this station
GVL_XTS.StationParameter[nStationParameter].rPosStop[1]           :=    500.0; // relative to rPosWait

GVL_XTS.StationParameter[nStationParameter].rReleaseDistance      :=     10.0; // relative to Mover.ActPos

GVL_XTS.StationParameter[nStationParameter].rGap                  :=     95.0;
GVL_XTS.StationParameter[nStationParameter].rVelo                 :=   1250.0;
GVL_XTS.StationParameter[nStationParameter].rAccDec               :=  15000.0;
GVL_XTS.StationParameter[nStationParameter].rJerk                 := 800000.0;

//-----------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------
//  CAMERA_ADJUST
    sStationText  := 'INSPECT';
//-----------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------
nStationParameter := 20;
GVL_XTS.StationParameter[nStationParameter].sText                 := 'INSPECT';
GVL_XTS.StationParameter[nStationParameter].rPosWait              :=   6400.0;  // absolute modulo position

GVL_XTS.StationParameter[nStationParameter].nConfiguredStopCount  :=      1;   // how many stops the mover has to make in this station
GVL_XTS.StationParameter[nStationParameter].rPosStop[1]           :=    100.0; // relative to rPosWait

GVL_XTS.StationParameter[nStationParameter].rReleaseDistance      :=     5.0; // relative to Mover.ActPos

GVL_XTS.StationParameter[nStationParameter].rGap                  :=     95.0;
GVL_XTS.StationParameter[nStationParameter].rVelo                 :=   2500.0;
GVL_XTS.StationParameter[nStationParameter].rAccDec               :=  17500.0;
GVL_XTS.StationParameter[nStationParameter].rJerk                 := 800000.0;

//-----------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------
//  DISTRIBUTOR_CAMERA
    sStationText  := 'DISTRIBUTOR_CAMERA';
//-----------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------
nStationParameter := 21;
GVL_XTS.StationParameter[nStationParameter].sText                 := 'DISTRIBUTOR_CAMERA';
GVL_XTS.StationParameter[nStationParameter].rPosWait              :=   6600.0;  // absolute modulo position

GVL_XTS.StationParameter[nStationParameter].nConfiguredStopCount  :=      1;   // how many stops the mover has to make in this station
GVL_XTS.StationParameter[nStationParameter].rPosStop[1]           :=      0.0; // relative to rPosWait

GVL_XTS.StationParameter[nStationParameter].rReleaseDistance      :=    -10.0; // relative to Mover.ActPos

GVL_XTS.StationParameter[nStationParameter].rGap                  :=     95.0;
GVL_XTS.StationParameter[nStationParameter].rVelo                 :=   2500.0;
GVL_XTS.StationParameter[nStationParameter].rAccDec               :=  17500.0;
GVL_XTS.StationParameter[nStationParameter].rJerk                 := 800000.0;

//-----------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------
//  CAMERA
    sStationText  := 'CAMERA 1/3';
//-----------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------
nStationParameter := 22;
GVL_XTS.StationParameter[nStationParameter].sText                 := 'CAMERA 1/3';
GVL_XTS.StationParameter[nStationParameter].rPosWait              :=   7000.0;  // absolute modulo position

GVL_XTS.StationParameter[nStationParameter].nConfiguredStopCount  :=      1;   // how many stops the mover has to make in this station
GVL_XTS.StationParameter[nStationParameter].rPosStop[1]           :=    200.0; // relative to rPosWait

GVL_XTS.StationParameter[nStationParameter].rReleaseDistance      :=    100.0; // relative to Mover.ActPos

GVL_XTS.StationParameter[nStationParameter].rGap                  :=     95.0;
GVL_XTS.StationParameter[nStationParameter].rVelo                 :=   1250.0;
GVL_XTS.StationParameter[nStationParameter].rAccDec               :=  15000.0;
GVL_XTS.StationParameter[nStationParameter].rJerk                 := 800000.0;

//-----------------------------------------------------------------------------------------------------------------------------------------
nStationParameter := 23;
GVL_XTS.StationParameter[nStationParameter].sText                 := 'CAMERA 2/3';
GVL_XTS.StationParameter[nStationParameter].rPosWait              :=   7000.0;  // absolute modulo position

GVL_XTS.StationParameter[nStationParameter].nConfiguredStopCount  :=      1;   // how many stops the mover has to make in this station
GVL_XTS.StationParameter[nStationParameter].rPosStop[1]           :=    400.0; // relative to rPosWait

GVL_XTS.StationParameter[nStationParameter].rReleaseDistance      :=    50.0; // relative to Mover.ActPos

GVL_XTS.StationParameter[nStationParameter].rGap                  :=     95.0;
GVL_XTS.StationParameter[nStationParameter].rVelo                 :=   1250.0;
GVL_XTS.StationParameter[nStationParameter].rAccDec               :=  15000.0;
GVL_XTS.StationParameter[nStationParameter].rJerk                 := 800000.0;

//-----------------------------------------------------------------------------------------------------------------------------------------
nStationParameter := 24;
GVL_XTS.StationParameter[nStationParameter].sText                 := 'CAMERA 3/3';
GVL_XTS.StationParameter[nStationParameter].rPosWait              :=   7000.0;  // absolute modulo position

GVL_XTS.StationParameter[nStationParameter].nConfiguredStopCount  :=      1;   // how many stops the mover has to make in this station
GVL_XTS.StationParameter[nStationParameter].rPosStop[1]           :=    600.0; // relative to rPosWait

GVL_XTS.StationParameter[nStationParameter].rReleaseDistance      :=     10.0; // relative to Mover.ActPos

GVL_XTS.StationParameter[nStationParameter].rGap                  :=     95.0;
GVL_XTS.StationParameter[nStationParameter].rVelo                 :=   1250.0;
GVL_XTS.StationParameter[nStationParameter].rAccDec               :=  15000.0;
GVL_XTS.StationParameter[nStationParameter].rJerk                 := 800000.0;

//-----------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------
//  DISTRIBUTOR_UNLOAD
    sStationText  := 'DISTRIBUTOR_UNLOAD';
//-----------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------
nStationParameter := 25;
GVL_XTS.StationParameter[nStationParameter].sText                 := 'DISTRIBUTOR_UNLOAD';
GVL_XTS.StationParameter[nStationParameter].rPosWait              :=   9000.0;  // absolute modulo position

GVL_XTS.StationParameter[nStationParameter].nConfiguredStopCount  :=      1;   // how many stops the mover has to make in this station
GVL_XTS.StationParameter[nStationParameter].rPosStop[1]           :=      0.0; // relative to rPosWait

GVL_XTS.StationParameter[nStationParameter].rReleaseDistance      :=    100.0; // relative to Mover.ActPos

GVL_XTS.StationParameter[nStationParameter].rGap                  :=     95.0;
GVL_XTS.StationParameter[nStationParameter].rVelo                 :=   1250.0;
GVL_XTS.StationParameter[nStationParameter].rAccDec               :=  15000.0;
GVL_XTS.StationParameter[nStationParameter].rJerk                 := 800000.0;

//-----------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------
//  UNLOAD
    sStationText  := 'UNLOAD 1/2';
//-----------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------
nStationParameter := 26;
GVL_XTS.StationParameter[nStationParameter].sText                 := 'UNLOAD 1/2';
GVL_XTS.StationParameter[nStationParameter].rPosWait              :=  10000.0;  // absolute modulo position

GVL_XTS.StationParameter[nStationParameter].nConfiguredStopCount  :=      1;   // how many stops the mover has to make in this station
GVL_XTS.StationParameter[nStationParameter].rPosStop[1]           :=    100.0; // relative to rPosWait

GVL_XTS.StationParameter[nStationParameter].rReleaseDistance      :=    400.0; // relative to Mover.ActPos

GVL_XTS.StationParameter[nStationParameter].rGap                  :=     95.0;
GVL_XTS.StationParameter[nStationParameter].rVelo                 :=   2500.0;
GVL_XTS.StationParameter[nStationParameter].rAccDec               :=  15000.0;
GVL_XTS.StationParameter[nStationParameter].rJerk                 := 800000.0;

//-----------------------------------------------------------------------------------------------------------------------------------------
nStationParameter := 27;
GVL_XTS.StationParameter[nStationParameter].sText                 := 'UNLOAD 1/2';
GVL_XTS.StationParameter[nStationParameter].rPosWait              :=  10000.0;  // absolute modulo position

GVL_XTS.StationParameter[nStationParameter].nConfiguredStopCount  :=      1;   // how many stops the mover has to make in this station
GVL_XTS.StationParameter[nStationParameter].rPosStop[1]           :=    200.0; // relative to rPosWait

GVL_XTS.StationParameter[nStationParameter].rReleaseDistance      :=    200.0; // relative to Mover.ActPos

GVL_XTS.StationParameter[nStationParameter].rGap                  :=     95.0;
GVL_XTS.StationParameter[nStationParameter].rVelo                 :=   2500.0;
GVL_XTS.StationParameter[nStationParameter].rAccDec               :=  15000.0;
GVL_XTS.StationParameter[nStationParameter].rJerk                 := 800000.0;

//-----------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------
//  DISTRIBUTOR_LOAD
    sStationText  := 'DISTRIBUTOR_LOAD';
//-----------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------------
nStationParameter := 28;
GVL_XTS.StationParameter[nStationParameter].sText                 := 'DISTRIBUTOR_LOAD';
GVL_XTS.StationParameter[nStationParameter].rPosWait              :=  11000.0;  // absolute modulo position

GVL_XTS.StationParameter[nStationParameter].nConfiguredStopCount  :=      1;   // how many stops the mover has to make in this station
GVL_XTS.StationParameter[nStationParameter].rPosStop[1]           :=      0.0; // relative to rPosWait

GVL_XTS.StationParameter[nStationParameter].rReleaseDistance      :=    -10.0; // relative to Mover.ActPos

GVL_XTS.StationParameter[nStationParameter].rGap                  :=     95.0;
GVL_XTS.StationParameter[nStationParameter].rVelo                 :=   1500.0;
GVL_XTS.StationParameter[nStationParameter].rAccDec               :=  15000.0;
GVL_XTS.StationParameter[nStationParameter].rJerk                 := 800000.0;

]]></ST>
      </Implementation>
    </Action>
    <Method Name="VisuData" Id="{b01dad72-17de-4036-a944-07f0306b1369}">
      <Declaration><![CDATA[METHOD VisuData
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// get enumerations from XPU for visu:
eTransportState                       := f_GetState   (GVL_XTS.XtsTransportState.State);
eTransportResult                      := f_GetProgress(GVL_XTS.XtsTransportState.State);

eXpuState                             := f_GetState   (GVL_XTS.XtsTransportState.XpuState.State);
eXpuResult                            := f_GetProgress(GVL_XTS.XtsTransportState.XpuState.State);

eXpuCheck                             := GVL_XTS.XtsTransportState.XpuState.Check;

// display xpu state and result in visu
// get strings and info
sCaGroupState                         := TO_STRING(GVL_XTS.XtsTransportState.GroupInfo.CaGroupState);

sTransportState                       := TO_STRING(eTransportState);
sTransportCheck                       := TO_STRING(GVL_XTS.XtsTransportState.Check);
sTransportResult                      := TO_STRING(eTransportResult);

sXpuState                             := TO_STRING(eXpuState);
sXpuResult                            := TO_STRING(eXpuResult);
sXpuCheck                             := TO_STRING(eXpuCheck);

sXpuOpMode                            := f_XpuOperationModeToString         (GVL_XTS.XtsTransportState.XpuInfo.OperationMode);
sXpuMoverdetectionMode                := f_MoverIdDetectionModeToString     (GVL_XTS.XtsTransportState.XpuInfo.IdDetectionMode);
sXpuMoverAssignement                  := f_MoverPositionAssignementToString (GVL_XTS.XtsTransportState.XpuInfo.MoverPositionAssignement);

nMoverSelected                        := SEL((nMoverSelected<1), nMoverSelected, 1);
nMoverSelected                        := SEL((nMoverSelected>MAX_MOVER), nMoverSelected, MAX_MOVER);

nStationSelected                      := SEL((nStationSelected<1), nStationSelected, 1);
nStationSelected                      := SEL((nStationSelected>MAX_STATION), nStationSelected, MAX_STATION);

nProcessSelected                      := SEL((nProcessSelected<1), nProcessSelected, 1);
nProcessSelected                      := SEL((nProcessSelected>MAX_PROCESS), nProcessSelected, MAX_PROCESS);

bStationEnable                        := SEL((GVL_XTS.StationCtrl[nStationSelected].eCmd = E_STATION_CTRL.STATION_ENABLE),        FALSE, TRUE);
bStationEnter                         := SEL((GVL_XTS.StationCtrl[nStationSelected].eCmd = E_STATION_CTRL.STATION_MOVER_ENTER),   FALSE, TRUE);
bStationStart                         := SEL((GVL_XTS.StationCtrl[nStationSelected].eCmd = E_STATION_CTRL.STATION_PROCESS_START), FALSE, TRUE);
bStationDone                          := SEL((GVL_XTS.StationCtrl[nStationSelected].eCmd = E_STATION_CTRL.STATION_PROCESS_DONE),  FALSE, TRUE);
bStationOut                           := SEL((GVL_XTS.StationCtrl[nStationSelected].eCmd = E_STATION_CTRL.STATION_MOVER_OUT),     FALSE, TRUE);
bStationGone                          := SEL((GVL_XTS.StationCtrl[nStationSelected].eCmd = E_STATION_CTRL.STATION_MOVER_GONE),    FALSE, TRUE);

sStationState                         := TO_STRING(GVL_XTS.StationState[nStationSelected].eState);
sStationStateMask                     := Tc2_Utilities.BYTE_TO_BINSTR(GVL_XTS.StationState[nStationSelected].nMask, 8);
sStationCtrlMask                      := Tc2_Utilities.BYTE_TO_BINSTR(GVL_XTS.StationCtrl[nStationSelected].nMask, 8);

sProcessEnableMask                    := Tc2_Utilities.DWORD_TO_BINSTR(GVL_PROCESS.Process[nProcessSelected].EnableProcess, 16);
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="PROCESS">
      <LineId Id="176" Count="14" />
      <LineId Id="406" Count="0" />
      <LineId Id="192" Count="67" />
      <LineId Id="264" Count="33" />
      <LineId Id="299" Count="21" />
      <LineId Id="405" Count="0" />
      <LineId Id="356" Count="7" />
      <LineId Id="390" Count="14" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="PROCESS.AUTO">
      <LineId Id="2" Count="0" />
      <LineId Id="9" Count="2" />
      <LineId Id="3" Count="0" />
      <LineId Id="5" Count="2" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="6" />
      <LineId Id="81" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="32" Count="4" />
      <LineId Id="70" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="PROCESS.Init">
      <LineId Id="58" Count="3" />
      <LineId Id="143" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="62" Count="19" />
      <LineId Id="135" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="85" Count="1" />
      <LineId Id="139" Count="0" />
      <LineId Id="87" Count="18" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="PROCESS.ProcessParameterInit">
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="1" />
      <LineId Id="12" Count="1" />
      <LineId Id="3" Count="0" />
      <LineId Id="6" Count="5" />
      <LineId Id="14" Count="0" />
      <LineId Id="17" Count="20" />
      <LineId Id="15" Count="0" />
      <LineId Id="38" Count="10" />
      <LineId Id="50" Count="9" />
      <LineId Id="49" Count="0" />
      <LineId Id="62" Count="9" />
      <LineId Id="60" Count="0" />
      <LineId Id="72" Count="42" />
      <LineId Id="126" Count="10" />
      <LineId Id="115" Count="10" />
      <LineId Id="61" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="PROCESS.StationParameterInit">
      <LineId Id="1068" Count="29" />
      <LineId Id="1908" Count="10" />
      <LineId Id="1109" Count="2" />
      <LineId Id="1919" Count="11" />
      <LineId Id="1124" Count="2" />
      <LineId Id="1931" Count="11" />
      <LineId Id="1139" Count="2" />
      <LineId Id="1943" Count="11" />
      <LineId Id="1154" Count="1" />
      <LineId Id="1955" Count="0" />
      <LineId Id="1959" Count="1" />
      <LineId Id="1956" Count="0" />
      <LineId Id="1958" Count="0" />
      <LineId Id="1156" Count="1" />
      <LineId Id="1961" Count="10" />
      <LineId Id="1169" Count="2" />
      <LineId Id="1972" Count="11" />
      <LineId Id="1184" Count="2" />
      <LineId Id="1984" Count="11" />
      <LineId Id="1199" Count="2" />
      <LineId Id="1996" Count="11" />
      <LineId Id="1214" Count="2" />
      <LineId Id="2008" Count="11" />
      <LineId Id="2044" Count="20" />
      <LineId Id="2020" Count="5" />
      <LineId Id="1230" Count="2" />
      <LineId Id="2065" Count="10" />
      <LineId Id="1244" Count="0" />
      <LineId Id="2026" Count="4" />
      <LineId Id="1245" Count="1" />
      <LineId Id="2031" Count="0" />
      <LineId Id="2076" Count="30" />
      <LineId Id="1259" Count="0" />
      <LineId Id="2107" Count="78" />
      <LineId Id="2278" Count="19" />
      <LineId Id="2187" Count="19" />
      <LineId Id="2186" Count="0" />
      <LineId Id="2207" Count="48" />
      <LineId Id="2257" Count="4" />
      <LineId Id="2264" Count="0" />
      <LineId Id="2263" Count="0" />
      <LineId Id="2265" Count="12" />
      <LineId Id="2256" Count="0" />
      <LineId Id="2298" Count="54" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="PROCESS.VisuData">
      <LineId Id="6" Count="46" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>