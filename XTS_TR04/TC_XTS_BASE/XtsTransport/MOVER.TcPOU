<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MOVER" Id="{5db7b8da-9e72-4695-b97c-1e6a2299a06e}" SpecialFunc="None">
    <Declaration><![CDATA[//---------------------------------------------------------------------------------------------------------------
//
//  HAUD 2024.02.19
//
//  - XTS_TRAINING
//  - simple example procedure for moving movers on XTS
//
//
//  MOVER(PRG)
//  - state machine for moving a single mover
//  - state machine for sending all mover to a position
//
//
//---------------------------------------------------------------------------------------------------------------
// This SOFTWARE is provided as an Exemple by THE PROVIDER "as is" and "with all faults." THE PROVIDER makes no 
// representations or warranties of any kind concerning the safety, suitability, lack of viruses, inaccuracies, 
// typographical errors, or other harmful components of this SOFTWARE. There are inherent dangers in the use of 
// any software, and you are solely responsible for determining whether this SOFTWARE is compatible with your 
// equipment and other software installed on your equipment. You are also solely responsible for the protection 
// of your equipment and backup of your data, and THE PROVIDER will not be liable for any damages you may suffer 
// in connection with using, modifying, or distributing this SOFTWARE.
//---------------------------------------------------------------------------------------------------------------
PROGRAM MOVER
VAR
  eCtrl,
  eCtrlOld          : E_MOVER_CTRL;

  eState            : E_MOVER_STATE;

  eResult           : E_PROGRESS;

  nMoverSelected    : UINT := 1;

  sMoverState,
  sMoverResult      : STRING;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

IF (eCtrl <> eCtrlOld)
THEN
  eState                    := Cmd(eCtrl);
  eCtrlOld                  := eCtrl;
  eResult                   := E_PROGRESS.PROGRESS_INIT;
END_IF


CASE eState
OF
  E_MOVER_STATE.MOVER_ENABLE:             // sets MC_Power.Enable
    eResult                 := GVL_XTS.Mover[nMoverSelected].Enable(TRUE);

  E_MOVER_STATE.MOVER_DISABLE:            // removes MC_Power.Enable
    eResult                 := GVL_XTS.Mover[nMoverSelected].Disable(TRUE);

  E_MOVER_STATE.MOVER_MOVE_TO_POS_CA:     // modulo absolute positioning with MC_MoveAbsoluteCA, InTargetPosition check
    eResult                 := GVL_XTS.Mover[nMoverSelected].MoveToPosCa(TRUE, GVL_XTS.MoveData[nMoverSelected]);

  E_MOVER_STATE.MOVER_SEND_TO_POS_CA:     // modulo absolute positioning with MC_MoveAbsoluteCA, done after moving ReleaseDistance
    eResult                 := GVL_XTS.Mover[nMoverSelected].SendToPosCa(TRUE, GVL_XTS.MoveData[nMoverSelected]);

  E_MOVER_STATE.MOVER_HALT:               // halts mover; by use of MC_Halt mover is set passive in CA group
    eResult                 := GVL_XTS.Mover[nMoverSelected].Halt(TRUE, GVL_XTS.MoveData[nMoverSelected]);

  E_MOVER_STATE.MOVER_GEAR_IN:            // MC_GearIn for mover in standstill
    eResult                 := GVL_XTS.Mover[nMoverSelected].GearIn(TRUE, GVL_XTS.MoveData[nMoverSelected], GVL_XTS.GearData[nMoverSelected]); 

  E_MOVER_STATE.MOVER_GEAR_IN_POS_CA:     // GearInPosCA of mover; when FB_GearInPosCa is InSync --> order is done; check SyncDistance yourself and release mover with e_mover_order.mover_SendToPos
    eResult                 := GVL_XTS.Mover[nMoverSelected].GearInPosCa(TRUE, GVL_XTS.MoveData[nMoverSelected], GVL_XTS.GearData[nMoverSelected]);

  E_MOVER_STATE.MOVER_GEAR_OUT:           // gear out for mover
    eResult                 := GVL_XTS.Mover[nMoverSelected].GearOut(TRUE);

  E_MOVER_STATE.MOVER_RESET:              // MC_RESET for mover
    eResult                 := GVL_XTS.Mover[nMoverSelected].Reset(TRUE);
END_CASE

sMoverState                 := TO_STRING(eState);
sMoverResult                := TO_STRING(eResult);


]]></ST>
    </Implementation>
    <Method Name="Cmd" Id="{ca071b76-6095-433a-800b-257ff7351ef2}">
      <Declaration><![CDATA[//---------------------------------------------------------------------------------------------------------------
//
//  HAUD 2024.02.19
//
//  - Method Cmd(eCtrl)
//    - match command to corresponding state
//    - initialize what you have to, here
//
//---------------------------------------------------------------------------------------------------------------
METHOD Cmd : E_MOVER_STATE
VAR_INPUT
  eCtrl     : E_MOVER_CTRL;
END_VAR
VAR
  _eState    : E_MOVER_STATE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[

CASE eCtrl
OF
  E_MOVER_CTRL.MOVER_NULL:               // initial value at startup, used for change of order or retrigger
    _eState                  := E_MOVER_STATE.MOVER_NULL;

  E_MOVER_CTRL.MOVER_ENABLE:             // sets MC_Power.Enable
    _eState                  := E_MOVER_STATE.MOVER_ENABLE;
    eResult                 := GVL_XTS.Mover[nMoverSelected].Enable(FALSE);

  E_MOVER_CTRL.MOVER_DISABLE:            // removes MC_Power.Enable
    _eState                  := E_MOVER_STATE.MOVER_DISABLE;
    eResult                 := GVL_XTS.Mover[nMoverSelected].Disable(FALSE);

  E_MOVER_CTRL.MOVER_MOVE_TO_POS_CA:     // modulo absolute positioning with MC_MoveAbsoluteCA, InTargetPosition check
    _eState                  := E_MOVER_STATE.MOVER_MOVE_TO_POS_CA;
    eResult                 := GVL_XTS.Mover[nMoverSelected].MoveToPosCa(FALSE, GVL_XTS.MoveData[nMoverSelected]);

  E_MOVER_CTRL.MOVER_SEND_TO_POS_CA:     // modulo absolute positioning with MC_MoveAbsoluteCA, done after moving ReleaseDistance
    _eState                  := E_MOVER_STATE.MOVER_SEND_TO_POS_CA;
    eResult                 := GVL_XTS.Mover[nMoverSelected].SendToPosCa(FALSE, GVL_XTS.MoveData[nMoverSelected]);

  E_MOVER_CTRL.MOVER_HALT:               // halts mover; by use of MC_Halt mover is set passive in CA group
    _eState                  := E_MOVER_STATE.MOVER_HALT;
    eResult                 := GVL_XTS.Mover[nMoverSelected].Halt(FALSE, GVL_XTS.MoveData[nMoverSelected]);

  E_MOVER_CTRL.MOVER_GEAR_IN:            // GearIn for mover in standstill
    _eState                  := E_MOVER_STATE.MOVER_GEAR_IN;
    eResult                 := GVL_XTS.Mover[nMoverSelected].GearIn(FALSE, GVL_XTS.MoveData[nMoverSelected], GVL_XTS.GearData[nMoverSelected]); 

  E_MOVER_CTRL.MOVER_GEAR_IN_POS_CA:     // GearInPosCA of mover; when FB_GearInPosCa is InSync --> order is done; check SyncDistance yourself and release mover with e_mover_order.mover_SendToPos
    _eState                  := E_MOVER_STATE.MOVER_GEAR_IN_POS_CA;
    eResult                 := GVL_XTS.Mover[nMoverSelected].GearInPosCa(FALSE, GVL_XTS.MoveData[nMoverSelected], GVL_XTS.GearData[nMoverSelected]);

  E_MOVER_CTRL.MOVER_GEAR_OUT:           // gear out for mover
    _eState                  := E_MOVER_STATE.MOVER_GEAR_OUT;
    eResult                 := GVL_XTS.Mover[nMoverSelected].GearOut(FALSE);

  E_MOVER_CTRL.MOVER_RESET:              // MC_RESET for mover
    _eState                  := E_MOVER_STATE.MOVER_RESET;
    eResult                 := GVL_XTS.Mover[nMoverSelected].Reset(FALSE);

END_CASE

Cmd                         := _eState;
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="MOVER">
      <LineId Id="54" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="244" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="118" Count="2" />
      <LineId Id="124" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="190" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="194" Count="2" />
      <LineId Id="198" Count="2" />
      <LineId Id="202" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="242" Count="1" />
      <LineId Id="35" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MOVER.Cmd">
      <LineId Id="24" Count="3" />
      <LineId Id="32" Count="0" />
      <LineId Id="45" Count="1" />
      <LineId Id="33" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="54" Count="1" />
      <LineId Id="99" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="56" Count="1" />
      <LineId Id="100" Count="0" />
      <LineId Id="38" Count="1" />
      <LineId Id="102" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="59" Count="1" />
      <LineId Id="103" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="61" Count="1" />
      <LineId Id="104" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="63" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>