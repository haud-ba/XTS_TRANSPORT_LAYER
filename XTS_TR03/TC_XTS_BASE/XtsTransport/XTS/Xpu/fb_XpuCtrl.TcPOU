<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="fb_XpuCtrl" Id="{091bf770-45ad-4149-b9fe-34562db5fb95}" SpecialFunc="None">
    <Declaration><![CDATA[//---------------------------------------------------------------------------------------------------------------
//
//  HAUD 2023.12.15
//
//  - XTS_TRAINING
//  - example project for setting up transport layer
//
//  - fb_XpuCtrl extends fb_Xpu
//  CTRL / STATE --> see proprerties
//  structs for use of function block via mapping
//  cyclic check for new command
//
//  VAR INPUT / OUTPUT --> see properties
//
//---------------------------------------------------------------------------------------------------------------
// This SOFTWARE is provided as an Exemple by THE PROVIDER "as is" and "with all faults." THE PROVIDER makes no 
// representations or warranties of any kind concerning the safety, suitability, lack of viruses, inaccuracies, 
// typographical errors, or other harmful components of this SOFTWARE. There are inherent dangers in the use of 
// any software, and you are solely responsible for determining whether this SOFTWARE is compatible with your 
// equipment and other software installed on your equipment. You are also solely responsible for the protection 
// of your equipment and backup of your data, and THE PROVIDER will not be liable for any damages you may suffer 
// in connection with using, modifying, or distributing this SOFTWARE.
//---------------------------------------------------------------------------------------------------------------
FUNCTION_BLOCK fb_XpuCtrl EXTENDS fb_Xpu
VAR
  _Ctrl                       : REFERENCE TO ST_XPU_CTRL;
  _State                      : REFERENCE TO ST_XPU_STATE;

  _eCmd,
  _eCmdOld                    : E_XPU_CTRL;

  _eResult                    : E_PROGRESS;
  _eState                     : E_XPU_STATE;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT Check() THEN RETURN; END_IF


_eCmd                         := _Ctrl.Cmd;

// check for command change
// get state for cmd
IF (_eCmd <> _eCmdOld)
THEN
  _eState                     := Cmd(_eCmd);
  _eCmdOld                    := _eCmd;
END_IF


CASE _eState
OF
  E_XPU_STATE.XTS_INIT:       // get TcCOM information for connecting to XTS utility function blocks
    _eInit                    := XpuInit(TRUE, _eResult, _eCheck);
    _State.Check              := _eCheck;

  E_XPU_STATE.XTS_IDLE:       // cyclic check; add additional information if your application requires it
    _eResult                  := SUPER^.Cycle(TRUE, _eCheck);  // cyclic check of ProcessingUnit data

    IF NOT (_eResult = E_PROGRESS.PROGRESS_ERROR)
    THEN
      _State.Check            := DetectMoverId(TRUE); // mover detection is checked here
    ELSE
      _State.Check            := _eCheck;
    END_IF

ELSE
  _eResult                    := E_PROGRESS.PROGRESS_INVALID;
END_CASE


CASE _eResult
OF
  E_PROGRESS.PROGRESS_INVALID:
    _State.State              := TO_UINT(_eResult);

  E_PROGRESS.PROGRESS_ERROR:
    _State.State              := _eState + E_PROGRESS.PROGRESS_ERROR;

  E_PROGRESS.PROGRESS_DONE:
    _State.State              := _eState + E_PROGRESS.PROGRESS_DONE;

ELSE
  _State.State                := _eState + _eResult;
END_CASE

_State.Init                   := _eInit;
_State.DcLink                 := AllModulesDcLink;
]]></ST>
    </Implementation>
    <Folder Name="methods" Id="{0268dd18-be89-45ff-8e94-f7f08566148f}" />
    <Folder Name="private" Id="{d4b161ff-d24d-41a5-a14d-e40c8d419bee}" />
    <Folder Name="properties" Id="{bc42d8cf-b4f6-4028-8ec7-8201e4b624f9}" />
    <Method Name="Check" Id="{d1a3fe0a-cc5b-4bb3-9e53-8875d98fb1d6}" FolderPath="private\">
      <Declaration><![CDATA[METHOD Check : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT __ISVALIDREF(_Ctrl)
THEN
  _eCheck                     := E_XPU_CHECK.POINTER_NULL_CTRL;
  RETURN;
END_IF

IF NOT __ISVALIDREF(_State)
THEN
  _eCheck                     := E_XPU_CHECK.POINTER_NULL_STATE;
  RETURN;
END_IF

IF NOT (_nXpu <> 0)
THEN
  _eCheck                     := E_XPU_CHECK.XPU_INSTANCE_NULL;
  RETURN;
END_IF

Check                         := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Cmd" Id="{75f1600a-ea3f-4819-902a-69237daeb754}" FolderPath="private\">
      <Declaration><![CDATA[METHOD PRIVATE Cmd : E_XPU_STATE
VAR_INPUT
  Ctrl      : E_XPU_CTRL;
END_VAR
VAR_INST
  _eState   : E_XPU_STATE;
  _eCk      : E_XPU_CHECK;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Check() THEN RETURN; END_IF


CASE Ctrl
OF
  E_XPU_CTRL.XTS_CMD_NULL:  // clear all method calls
    _eState               := E_XPU_STATE.XTS_NULL;
    SUPER^.Cycle(FALSE, _eCk);
    DetectMoverId(FALSE);
    XpuInit(FALSE, _eResult, _eCheck);


  E_XPU_CTRL.XTS_CMD_INIT:  // clear methods for initialization
    _eState               := E_XPU_STATE.XTS_INIT;
    _eInit                := XpuInit(FALSE, _eResult, _eCheck);

ELSE
  IF NOT (_eInit = E_XPU_INIT.INIT_DONE)
  THEN
    // no init, no further commands possible
    _eState               := E_XPU_STATE.XTS_INVALID;
  ELSE
    CASE Ctrl
    OF
      E_XPU_CTRL.XTS_IDLE:  // clear methods for cyclic checks
        _eState           := E_XPU_STATE.XTS_IDLE;
        SUPER^.Cycle(FALSE, _eCk);
        DetectMoverId(FALSE);
    ELSE
        _eState           := E_XPU_STATE.XTS_INVALID;
    END_CASE
  END_IF
END_CASE

Cmd                       := _eState;

]]></ST>
      </Implementation>
    </Method>
    <Property Name="Ctrl" Id="{242338e1-cd88-45ef-a8b3-477dfb7a6066}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY Ctrl : REFERENCE TO ST_XPU_CTRL
]]></Declaration>
      <Set Name="Set" Id="{d6fbc3ba-d7ec-4b60-955b-29f315e32a8e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Ctrl REF= Ctrl;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="DetectMoverId" Id="{06b142b2-4a23-4aa8-bb69-60fe9fdd78d4}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD DetectMoverId  : E_XPU_CHECK
VAR_INPUT
  Enable                : BOOL;
END_VAR
VAR_INST
  _eReturn,
  _eState               : E_XPU_CHECK;
  _nCheckModulo         : UINT := 500;
  _nCheckCount          : UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
// clear states on request
//-----------------------------------------------------------------------------
IF NOT Enable 
THEN
  _nCheckCount                := 0;
  _eState                     :=
  DetectMoverId               := E_XPU_CHECK.INIT_CHECK;
  RETURN;
END_IF
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//  mover ID detection sequence
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_XPU_CHECK.INIT_CHECK:
    IF Enable
    THEN
      _nCheckCount            := _nCheckCount + 1;
      IF (_nCheckCount MOD _nCheckModulo = 0)
      THEN
        _nCheckCount          := 0;
        _eState               := E_XPU_CHECK.MOVER_ID_DETECTION_MODE;
      END_IF
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//  check for simulation or Standard ID detection
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_XPU_CHECK.MOVER_ID_DETECTION_MODE:

    IF (_XpuOperationMode     = OperationMode.Simulation)
    THEN
      _eState                 := E_XPU_CHECK.INIT_CHECK;
      _eReturn                := E_XPU_CHECK.MOVER_ID_SIMULATION;

    ELSIF (_MoverIdDetectionMode = MoverIdDetectionMode.Standard)
    THEN
      _eState                 := E_XPU_CHECK.INIT_CHECK;
      _eReturn                := E_XPU_CHECK.MOVER_ID_STANDARD;

    ELSIF (_MoverIdDetectionMode = MoverIdDetectionMode.Mover1)
    THEN
      _eState                 := E_XPU_CHECK.MOVER_ID_DETECTION_VALID;

    ELSE
      _eReturn                := E_XPU_CHECK.MOVER_ID_MULTIPLE_NOT_SUPPORTED;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------
CASE _eState
OF
  //---------------------------------------------------------------------------
  E_XPU_CHECK.MOVER_ID_DETECTION_VALID:

    IF (_fbProcessingUnit.GetIsMoverIdDetectionValid())
    THEN
      _bMoverIdDetectionValid := TRUE;

      _eReturn                := E_XPU_CHECK.MOVER_ID_DETECTION_VALID;
      _eState                 := E_XPU_CHECK.INIT_CHECK;
    ELSE
      _bMoverIdDetectionValid := FALSE;

      _eState                 := E_XPU_CHECK.MOVER_ID_DETECTION_DC_LINK;
    END_IF

  //---------------------------------------------------------------------------
  E_XPU_CHECK.MOVER_ID_DETECTION_DC_LINK:
    _eReturn                  := E_XPU_CHECK.MOVER_ID_DETECTION_DC_LINK;

    IF AllModulesDcLink       // wait for DcLink on all motor modules
    THEN
      IF (_fbProcessingUnit.TriggerMoverIdDetection())
      THEN
        _eState               := E_XPU_CHECK.MOVER_ID_DETECTION_BUSY;
      END_IF
    END_IF

  //---------------------------------------------------------------------------
  E_XPU_CHECK.MOVER_ID_DETECTION_BUSY:
    _eReturn                  := E_XPU_CHECK.MOVER_ID_DETECTION_BUSY;

    IF (_fbProcessingUnit.GetIsMoverIdDetectionActive())
    THEN
      _eState                 := E_XPU_CHECK.MOVER_ID_DETECTION_IDLE;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_XPU_CHECK.MOVER_ID_DETECTION_IDLE:
    _eReturn                  := E_XPU_CHECK.MOVER_ID_DETECTION_IDLE;

    IF NOT(_fbProcessingUnit.GetIsMoverIdDetectionActive())
    THEN
      _eState                 := E_XPU_CHECK.MOVER_ID_DETECTION_STATE;
    END_IF

  //---------------------------------------------------------------------------
  E_XPU_CHECK.MOVER_ID_DETECTION_STATE:
    _eReturn                  := E_XPU_CHECK.MOVER_ID_DETECTION_STATE;

    IF NOT(_fbProcessingUnit.GetHasMoverIdDetectionError())
    THEN
      _bMoverIdDetectionError := FALSE;

      _eState                 := E_XPU_CHECK.INIT_CHECK;
    ELSE
      _bMoverIdDetectionValid := FALSE;
      _bMoverIdDetectionError := TRUE;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------
DetectMoverId                 := _eReturn;
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------]]></ST>
      </Implementation>
    </Method>
    <Property Name="State" Id="{0ee15f07-ac9c-4569-958c-01c565da0006}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY State : REFERENCE TO ST_XPU_STATE
]]></Declaration>
      <Set Name="Set" Id="{7de222ac-0317-4f95-a8fb-37fbd6d56533}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_State ref= State;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="fb_XpuCtrl">
      <LineId Id="947" Count="51" />
      <LineId Id="53" Count="0" />
    </LineIds>
    <LineIds Name="fb_XpuCtrl.Check">
      <LineId Id="6" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="35" Count="0" />
      <LineId Id="23" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="25" Count="1" />
      <LineId Id="36" Count="0" />
      <LineId Id="28" Count="1" />
      <LineId Id="37" Count="5" />
      <LineId Id="31" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="33" Count="0" />
    </LineIds>
    <LineIds Name="fb_XpuCtrl.Cmd">
      <LineId Id="5" Count="0" />
      <LineId Id="11" Count="2" />
      <LineId Id="15" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="67" Count="1" />
      <LineId Id="74" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="78" Count="1" />
      <LineId Id="89" Count="0" />
      <LineId Id="80" Count="1" />
      <LineId Id="83" Count="1" />
      <LineId Id="49" Count="0" />
      <LineId Id="54" Count="2" />
      <LineId Id="87" Count="1" />
      <LineId Id="85" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="fb_XpuCtrl.Ctrl.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_XpuCtrl.DetectMoverId">
      <LineId Id="475" Count="1" />
      <LineId Id="305" Count="0" />
      <LineId Id="479" Count="0" />
      <LineId Id="306" Count="1" />
      <LineId Id="473" Count="0" />
      <LineId Id="445" Count="0" />
      <LineId Id="309" Count="5" />
      <LineId Id="316" Count="20" />
      <LineId Id="494" Count="0" />
      <LineId Id="338" Count="0" />
      <LineId Id="340" Count="1" />
      <LineId Id="455" Count="0" />
      <LineId Id="484" Count="0" />
      <LineId Id="481" Count="0" />
      <LineId Id="483" Count="0" />
      <LineId Id="485" Count="1" />
      <LineId Id="492" Count="0" />
      <LineId Id="488" Count="1" />
      <LineId Id="493" Count="0" />
      <LineId Id="487" Count="0" />
      <LineId Id="342" Count="9" />
      <LineId Id="451" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="460" Count="0" />
      <LineId Id="353" Count="1" />
      <LineId Id="356" Count="0" />
      <LineId Id="495" Count="0" />
      <LineId Id="358" Count="2" />
      <LineId Id="496" Count="1" />
      <LineId Id="361" Count="1" />
      <LineId Id="450" Count="0" />
      <LineId Id="446" Count="0" />
      <LineId Id="370" Count="1" />
      <LineId Id="461" Count="0" />
      <LineId Id="372" Count="6" />
      <LineId Id="447" Count="0" />
      <LineId Id="449" Count="0" />
      <LineId Id="386" Count="0" />
      <LineId Id="448" Count="0" />
      <LineId Id="462" Count="0" />
      <LineId Id="389" Count="11" />
      <LineId Id="402" Count="0" />
      <LineId Id="463" Count="0" />
      <LineId Id="403" Count="3" />
      <LineId Id="467" Count="0" />
      <LineId Id="466" Count="0" />
      <LineId Id="414" Count="0" />
      <LineId Id="416" Count="0" />
      <LineId Id="458" Count="0" />
      <LineId Id="417" Count="1" />
      <LineId Id="420" Count="1" />
      <LineId Id="457" Count="0" />
      <LineId Id="423" Count="2" />
      <LineId Id="429" Count="5" />
      <LineId Id="441" Count="0" />
      <LineId Id="443" Count="0" />
      <LineId Id="202" Count="0" />
    </LineIds>
    <LineIds Name="fb_XpuCtrl.State.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>