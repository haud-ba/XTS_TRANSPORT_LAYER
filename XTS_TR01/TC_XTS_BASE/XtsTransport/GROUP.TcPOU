<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="GROUP" Id="{ff43ad71-473d-4009-83d6-eb27955854f8}" SpecialFunc="None">
    <Declaration><![CDATA[//---------------------------------------------------------------------------------------------------------------
//
//  HAUD 2024.02.19
//
//  - XTS_TRAINING
//  - simple example procedure for CA group related tasks
//
//
//  GROUP(PRG)
//  - state machine for clearing group
//  - state machine for adding all mover to group
//  - state machine for enabling group
//
//
//---------------------------------------------------------------------------------------------------------------
// This SOFTWARE is provided as an Exemple by THE PROVIDER "as is" and "with all faults." THE PROVIDER makes no 
// representations or warranties of any kind concerning the safety, suitability, lack of viruses, inaccuracies, 
// typographical errors, or other harmful components of this SOFTWARE. There are inherent dangers in the use of 
// any software, and you are solely responsible for determining whether this SOFTWARE is compatible with your 
// equipment and other software installed on your equipment. You are also solely responsible for the protection 
// of your equipment and backup of your data, and THE PROVIDER will not be liable for any damages you may suffer 
// in connection with using, modifying, or distributing this SOFTWARE.
//---------------------------------------------------------------------------------------------------------------
PROGRAM GROUP
VAR
  nMover,
  nState            : UINT;

  stGroupInfo       : ST_GROUP_INFO;

  bGroupEnable      : BOOL;
  bGroupBuild       : BOOL;
  bGroupClear       : BOOL;

  eResult           : E_PROGRESS;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// get group state information
stGroupInfo                   := GVL_XTS.CaGroup.GroupInfo;


// pull state machine into clearing sequence
IF bGroupClear
THEN
  nState                      := 10;
  bGroupClear                 := FALSE;
END_IF


CASE nState 
OF
  0,
  1000: // clear method
    eResult                   := GVL_XTS.CaGroup.McHaltAll(FALSE);


  10: // stop any movement
    eResult                   := GVL_XTS.CaGroup.McHaltAll(TRUE);

    IF (eResult = E_PROGRESS.PROGRESS_ERROR)
    THEN
      nState                  := 99;
      eResult                 := GVL_XTS.CaGroup.McHaltAll(FALSE);

    ELSIF (eResult = E_PROGRESS.PROGRESS_DONE)
    THEN
      nState                  := 20;
      eResult                 := GVL_XTS.CaGroup.McHaltAll(FALSE);
    END_IF

  20: // check group state
    IF (stGroupInfo.GroupErrorStop)
    THEN
      nState                  := 25;
      eResult                 := GVL_XTS.CaGroup.McResetAll(FALSE);

    ELSE
      nState                  := 30;
      eResult                 := GVL_XTS.CaGroup.RemoveAll(FALSE);
    END_IF

  25:
    eResult                   := GVL_XTS.CaGroup.McResetAll(TRUE);

    IF (eResult = E_PROGRESS.PROGRESS_ERROR)
    THEN
      nState                  := 99;
      eResult                 := GVL_XTS.CaGroup.McResetAll(FALSE);

    ELSIF (eResult = E_PROGRESS.PROGRESS_DONE)
    THEN
      nState                  := 30;
      eResult                 := GVL_XTS.CaGroup.McResetAll(FALSE);
      eResult                 := GVL_XTS.CaGroup.RemoveAll(FALSE);
    END_IF

  30:
    eResult                   := GVL_XTS.CaGroup.RemoveAll(TRUE);

    IF (eResult = E_PROGRESS.PROGRESS_ERROR)
    THEN
      nState                  := 99;
      eResult                 := GVL_XTS.CaGroup.RemoveAll(FALSE);

    ELSIF (eResult = E_PROGRESS.PROGRESS_DONE)
    THEN
      nState                  := 40;
      eResult                 := GVL_XTS.CaGroup.RemoveAll(FALSE);
      eResult                 := GVL_XTS.CaGroup.Disable(FALSE);
    END_IF

  40:
    eResult                   := GVL_XTS.CaGroup.Disable(TRUE);

    IF (eResult = E_PROGRESS.PROGRESS_ERROR)
    THEN
      nState                  := 99;
      eResult                 := GVL_XTS.CaGroup.Disable(FALSE);

    ELSIF (eResult = E_PROGRESS.PROGRESS_DONE)
    THEN
      nState                  := 50;
      eResult                 := GVL_XTS.CaGroup.Disable(FALSE);
      eResult                 := GVL_XTS.CaGroup.Reset(FALSE);
    END_IF

  50:
    eResult                   := GVL_XTS.CaGroup.Reset(TRUE);

    IF (eResult = E_PROGRESS.PROGRESS_ERROR)
    THEN
      nState                  := 99;
      eResult                 := GVL_XTS.CaGroup.Reset(FALSE);

    ELSIF (eResult = E_PROGRESS.PROGRESS_DONE)
    THEN
      nState                  := 100;
      eResult                 := GVL_XTS.CaGroup.Reset(FALSE);
    END_IF


  100:
    IF bGroupBuild
    THEN
      nState                  := 110;
      bGroupBuild             := FALSE;
      eResult                 := GVL_XTS.CaGroup.AddAll(FALSE);
    END_IF

  110:
    eResult                   := GVL_XTS.CaGroup.AddAll(TRUE);

    IF (eResult = E_PROGRESS.PROGRESS_ERROR)
    THEN
      nState                  := 999;
      eResult                 := GVL_XTS.CaGroup.AddAll(FALSE);

    ELSIF (eResult = E_PROGRESS.PROGRESS_DONE)
    THEN
      nState                  := 200;
      eResult                 := GVL_XTS.CaGroup.AddAll(FALSE);
    END_IF


  200:
    IF bGroupEnable
    THEN
      nState                  := 210;
      bGroupEnable            := FALSE;
    END_IF

  210:
    IF NOT (stGroupInfo.AxisCount <> 0)
    THEN
      nState                  := 9999;
    ELSE
      nState                  := 220;
      eResult                 := GVL_XTS.CaGroup.Enable(FALSE);
    END_IF

  220:
    eResult                   := GVL_XTS.CaGroup.Enable(TRUE);

    IF (eResult = E_PROGRESS.PROGRESS_ERROR)
    THEN
      nState                  := 9999;
      eResult                 := GVL_XTS.CaGroup.Enable(FALSE);

    ELSIF (eResult = E_PROGRESS.PROGRESS_DONE)
    THEN
      nState                  := 230;
      eResult                 := GVL_XTS.CaGroup.Enable(FALSE);
    END_IF

  230:
    IF (stGroupInfo.GroupStandby) OR
       (stGroupInfo.GroupMoving) OR
       (stGroupInfo.GroupNotReady)
    THEN
      nState                  := 1000;
    END_IF
END_CASE

]]></ST>
    </Implementation>
    <LineIds Name="GROUP">
      <LineId Id="41" Count="0" />
      <LineId Id="73" Count="1" />
      <LineId Id="189" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="42" Count="5" />
      <LineId Id="161" Count="0" />
      <LineId Id="36" Count="2" />
      <LineId Id="48" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="59" Count="10" />
      <LineId Id="58" Count="0" />
      <LineId Id="75" Count="8" />
      <LineId Id="85" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="87" Count="13" />
      <LineId Id="86" Count="0" />
      <LineId Id="102" Count="13" />
      <LineId Id="101" Count="0" />
      <LineId Id="117" Count="13" />
      <LineId Id="116" Count="0" />
      <LineId Id="134" Count="8" />
      <LineId Id="146" Count="1" />
      <LineId Id="145" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="164" Count="2" />
      <LineId Id="171" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="174" Count="9" />
      <LineId Id="185" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="190" Count="2" />
      <LineId Id="194" Count="0" />
      <LineId Id="196" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="197" Count="3" />
      <LineId Id="203" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="225" Count="1" />
      <LineId Id="206" Count="13" />
      <LineId Id="227" Count="0" />
      <LineId Id="220" Count="2" />
      <LineId Id="39" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>