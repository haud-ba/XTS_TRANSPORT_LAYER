<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="fb_CaGroup_withOutInterface" Id="{7f571afa-1fa9-4f96-8c0b-5030f5709285}" SpecialFunc="None">
    <Declaration><![CDATA[//---------------------------------------------------------------------------------------------------------------
//
//  HAUD 2023.12.13
//
//
//  fb_CaGroup
//  - handles CA group states
//  - add mover to group
//  - remove mover from group
//  - clear group error
//  - startup procedure for getting group ready to work
//
//
//  VAR INPUT / OUTPUT --> see properties
//
//---------------------------------------------------------------------------------------------------------------
// This SOFTWARE is provided as an Exemple by THE PROVIDER "as is" and "with all faults." THE PROVIDER makes no 
// representations or warranties of any kind concerning the safety, suitability, lack of viruses, inaccuracies, 
// typographical errors, or other harmful components of this SOFTWARE. There are inherent dangers in the use of 
// any software, and you are solely responsible for determining whether this SOFTWARE is compatible with your 
// equipment and other software installed on your equipment. You are also solely responsible for the protection 
// of your equipment and backup of your data, and THE PROVIDER will not be liable for any damages you may suffer 
// in connection with using, modifying, or distributing this SOFTWARE.
//---------------------------------------------------------------------------------------------------------------
FUNCTION_BLOCK fb_CaGroup_withOutInterface
VAR
  _eCheck                     : E_GROUP_CHECK;
  _bError                     : BOOL;

  _GroupRef                   : REFERENCE TO Tc3_McCoordinatedMotion.AXES_GROUP_REF;
  _GroupCommon                : MCTOPLC_GROUP_COMMON_PART;

  _AxisRefMover               : REFERENCE TO ARRAY[1..MAX_MOVER] OF Tc2_MC2.AXIS_REF;


  // MC2 function block for halting all motion commands on mover before switching off group
  _fbHalt                     : ARRAY[1..MAX_MOVER] OF Tc2_MC2.MC_Halt;
  _fbReset                    : ARRAY[1..MAX_MOVER] OF Tc2_MC2.MC_Reset;

  // CA group fb instances
  _fbAddAxisGroup             : ARRAY[1..MAX_MOVER] OF Tc3_McCoordinatedMotion.MC_AddAxisToGroup;
  _fbRemoveAxisGroup          : ARRAY[1..MAX_MOVER] OF Tc3_McCoordinatedMotion.MC_RemoveAxisFromGroup;

  _fbGroupDisable             : Tc3_McCoordinatedMotion.MC_GroupDisable;
  _fbGroupEnable              : Tc3_McCoordinatedMotion.MC_GroupEnable;
  _fbGroupErrorRead           : Tc3_McCoordinatedMotion.MC_GroupReadError;
  _fbGroupStatusRead          : Tc3_McCoordinatedMotion.MC_GroupReadStatus;
  _fbGroupReset               : Tc3_McCoordinatedMotion.MC_GroupReset;

  _stGroupInfo                : ST_GROUP_INFO;  // additional bits about the state of the CA group

  _rtrigGroupStatusRead,
  _rtrigGroupErrorRead        : Tc2_Standard.R_TRIG;


END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[


]]></ST>
    </Implementation>
    <Folder Name="methods" Id="{548960e4-415a-4eb9-8e22-a40936cbb34a}" />
    <Folder Name="properties" Id="{56becc81-d173-4b88-8eb2-1f4015a82951}" />
    <Method Name="AddAll" Id="{ad46f815-2c69-4488-a7b5-391d8ce06996}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD AddAll : E_PROGRESS
VAR_INPUT
  Execute     : BOOL;
END_VAR
VAR_INST
  _nErrorId   : UDINT;
  _eState     : E_PROGRESS;

  _nMover     : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Execute THEN _eState     := E_PROGRESS.PROGRESS_INIT; END_IF 
IF NOT Check() THEN AddAll := E_PROGRESS.PROGRESS_ERROR; RETURN; END_IF


CASE _eState
OF
  E_PROGRESS.PROGRESS_INIT:
    IF Execute
    THEN
      _nErrorId               := 0;
      _nMover                 := 1;
      _eState                 := E_PROGRESS.PROGRESS_BUSY;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_BUSY:
    _eState                   := E_PROGRESS.PROGRESS_PREPARE;
    _fbAddAxisGroup[_nMover](
                AxesGroup     := _GroupRef, 
                Axis          := _AxisRefMover[_nMover], 
                Execute       := FALSE, 
                IdentInGroup  := UDINT_TO_IDENTINGROUP(_AxisRefMover[_nMover].NcToPlc.AxisId));
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_PREPARE:
    _fbAddAxisGroup[_nMover](
                AxesGroup     := _GroupRef, 
                Axis          := _AxisRefMover[_nMover], 
                Execute       := TRUE, 
                IdentInGroup  := UDINT_TO_IDENTINGROUP(_AxisRefMover[_nMover].NcToPlc.AxisId));

    IF (_fbAddAxisGroup[_nMover].Error)
    THEN
      _eState                 := E_PROGRESS.PROGRESS_ERROR;
      _nErrorId               := _fbAddAxisGroup[_nMover].ErrorId;

    ELSIF (_fbAddAxisGroup[_nMover].Done)
    THEN
      _eState                 := E_PROGRESS.PROGRESS_CHECK;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_CHECK:
    _eState                   := E_PROGRESS.PROGRESS_OCCUPIED;
    _fbAddAxisGroup[_nMover](
                AxesGroup     := _GroupRef, 
                Axis          := _AxisRefMover[_nMover], 
                Execute       := FALSE, 
                IdentInGroup  := UDINT_TO_IDENTINGROUP(_AxisRefMover[_nMover].NcToPlc.AxisId));
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_OCCUPIED:
    _nMover                   := _nMover + 1;

    IF NOT (_nMover > MAX_MOVER)
    THEN
      _eState                 := E_PROGRESS.PROGRESS_BUSY;
    ELSE
      _eState                 := E_PROGRESS.PROGRESS_DONE;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------

AddAll                   := _eState;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="AxisRef" Id="{a0c5b49d-cbe7-4852-8762-9a2765dcd49f}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY AxisRef : REFERENCE TO ARRAY[1..MAX_MOVER] OF Tc2_MC2.AXIS_REF]]></Declaration>
      <Set Name="Set" Id="{af65a149-3ad6-4c9d-99da-370acded8308}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_AxisRefMover REF= AxisRef;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Check" Id="{a44a2e93-6f82-4f61-bb04-ea6964e4b738}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD PROTECTED Check : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT __ISVALIDREF(_GroupRef)
THEN
  _eCheck                     := E_GROUP_CHECK.CHECK_GROUP_REF_INVALID;
  RETURN;
END_IF

IF NOT __ISVALIDREF(_AxisRefMover)
THEN
  _eCheck                     := E_GROUP_CHECK.CHECK_AXIS_REF_INVALID;
  RETURN;
END_IF

_eCheck                       := E_GROUP_CHECK.CHECK_DONE;
Check                         := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Disable" Id="{12292b76-2464-4a18-bda2-36b69dc4f32d}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD Disable : E_PROGRESS
VAR_INPUT
  Execute     : BOOL;
END_VAR
VAR_INST
  _nErrorId   : UDINT;
  _eState     : E_PROGRESS;

  _nMover     : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Execute THEN _eState       := E_PROGRESS.PROGRESS_INIT; END_IF 
IF NOT Check() THEN Disable  := E_PROGRESS.PROGRESS_ERROR; RETURN; END_IF


CASE _eState
OF
  E_PROGRESS.PROGRESS_INIT:
    IF Execute
    THEN
      _nErrorId               := 0;
      _nMover                 := 1;
      _eState                 := E_PROGRESS.PROGRESS_BUSY;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_BUSY:
    _eState                   := E_PROGRESS.PROGRESS_PREPARE;
    _fbGroupDisable(
              AxesGroup       := _GroupRef, 
              Execute         := FALSE); 
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_PREPARE:
    _fbGroupDisable(
              AxesGroup       := _GroupRef, 
              Execute         := TRUE); 

    IF (_fbGroupDisable.Error)
    THEN
      _eState                 := E_PROGRESS.PROGRESS_ERROR;
      _nErrorId               := _fbGroupDisable.ErrorId;
      _fbGroupDisable(
              AxesGroup       := _GroupRef, 
              Execute         := FALSE); 


    ELSIF (_fbGroupDisable.Done)
    THEN
      _eState                 := E_PROGRESS.PROGRESS_DONE;
      _fbGroupDisable(
              AxesGroup       := _GroupRef, 
              Execute         := FALSE); 
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------

Disable                  := _eState;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Enable" Id="{56edd266-21d0-4d46-9b9c-0770660fdbd7}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD Enable : E_PROGRESS
VAR_INPUT
  Execute     : BOOL;
END_VAR
VAR_INST
  _nErrorId   : UDINT;
  _eState     : E_PROGRESS;

  _nMover     : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Execute THEN _eState       := E_PROGRESS.PROGRESS_INIT; END_IF 
IF NOT Check() THEN Enable   := E_PROGRESS.PROGRESS_ERROR; RETURN; END_IF


CASE _eState
OF
  E_PROGRESS.PROGRESS_INIT:
    IF Execute
    THEN
      _nErrorId               := 0;
      _nMover                 := 1;
      _eState                 := E_PROGRESS.PROGRESS_BUSY;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_BUSY:
    _eState                   := E_PROGRESS.PROGRESS_PREPARE;
    _fbGroupEnable(
                AxesGroup     := _GroupRef, 
                Execute       := FALSE);
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_PREPARE:
    _fbGroupEnable(
                AxesGroup     := _GroupRef, 
                Execute       := TRUE);

    IF (_fbGroupEnable.Error)
    THEN
      _eState                 := E_PROGRESS.PROGRESS_ERROR;
      _nErrorId               := _fbGroupEnable.ErrorId;

      _fbGroupEnable(
                AxesGroup     := _GroupRef, 
                Execute       := FALSE);

    ELSIF (_fbGroupEnable.Done)
    THEN
      _eState                 := E_PROGRESS.PROGRESS_DONE;

      _fbGroupEnable(
                AxesGroup     := _GroupRef, 
                Execute       := FALSE);
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------

Enable                   := _eState;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="GroupInfo" Id="{3634abfe-6226-4fda-a6c9-60e030e68f2b}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY GroupInfo : ST_GROUP_INFO]]></Declaration>
      <Get Name="Get" Id="{9da08096-1f00-4590-b2b2-b385bd4c62b2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[GroupInfo := _stGroupInfo;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="GroupRef" Id="{14e0b44b-6d72-40bf-a170-f21399c6d6a0}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY GroupRef : reference to Tc3_McCoordinatedMotion.AXES_GROUP_REF]]></Declaration>
      <Set Name="Set" Id="{5238721a-fc6b-4648-bf9d-8ce43d78c0dd}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_GroupRef REF= GroupRef;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="InfoCycle" Id="{54bab353-6c18-458f-9c70-39d33442fc60}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD InfoCycle : DWORD
VAR_INPUT
  Enable          : BOOL;
END_VAR
VAR_INST
  _nErrorIdADS,
  _nErrorIdRead   : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Check() THEN RETURN; END_IF


//-----------------------------------------------------------------------------------------------
// cyclic CA group
//-----------------------------------------------------------------------------------------------
_fbGroupStatusRead(
              AxesGroup                     := _GroupRef, 
              Enable                        := Enable, 
              Valid                         => _stGroupInfo.GroupStatusValid, 
              Busy                          => _stGroupInfo.GroupStatusBusy, 
              GroupMoving                   => _stGroupInfo.GroupMoving, 
              GroupHoming                   => _stGroupInfo.GroupHoming, 
              GroupErrorStop                => _stGroupInfo.GroupErrorStop, 
              GroupNotReady                 => _stGroupInfo.GroupNotReady, 
              GroupStandby                  => _stGroupInfo.GroupStandby, 
              GroupStopping                 => _stGroupInfo.GroupStopping, 
              GroupDisabled                 => _stGroupInfo.GroupDisabled, 
              AllAxesStanding               => _stGroupInfo.AllAxesStanding, 
              ConstantVelocity              => _stGroupInfo.ConstantVelocity, 
              Accelerating                  => _stGroupInfo.Accelerating, 
              Decelerating                  => _stGroupInfo.Decelerating, 
              InPosition                    => _stGroupInfo.InPosition, 
              Error                         => , 
              ErrorId                       => );

_fbGroupErrorRead(
              AxesGroup                     := _GroupRef, 
              Enable                        := Enable, 
              ErrorId                       => , 
              GroupErrorId                  => );


// fetch group error
_rtrigGroupStatusRead(CLK                   := (_stGroupInfo.GroupError OR
                                                _stGroupInfo.GroupErrorStop));
IF _rtrigGroupStatusRead.Q
THEN
  _stGroupInfo.GroupError   := _bError      := TRUE;
  _stGroupInfo.GroupErrorId                 := _fbGroupErrorRead.GroupErrorId;
END_IF

// fetch internal fb error
_rtrigGroupErrorRead(CLK                    := _fbGroupErrorRead.Error);
IF _rtrigGroupErrorRead.Q
THEN
  _nErrorIdADS                              := _fbGroupErrorRead.ErrorId;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="McHaltAll" Id="{e52cdf79-fb96-4edf-be1e-78bffdc99955}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD McHaltAll : E_PROGRESS
VAR_INPUT
  Execute       : BOOL;
END_VAR
VAR_INST
  _nErrorId     : UDINT;
  _eState       : E_PROGRESS;

  _nMover       : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Execute THEN _eState     := E_PROGRESS.PROGRESS_INIT; END_IF 
IF NOT Check() THEN McHaltAll   := E_PROGRESS.PROGRESS_ERROR; RETURN; END_IF


CASE _eState
OF
  E_PROGRESS.PROGRESS_INIT:
    IF Execute
    THEN
      _nErrorId               := 0;
      _nMover                 := 1;
      _eState                 := E_PROGRESS.PROGRESS_BUSY;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_BUSY:
    _eState                   := E_PROGRESS.PROGRESS_PREPARE;
    FOR _nMover := 1 TO MAX_MOVER
    DO
      _fbHalt[_nMover](
                Axis          := _AxisRefMover[_nMover], 
                Execute       := FALSE, 
                Deceleration  := 15_000, 
                Jerk          := 150_000, 
                BufferMode    := MC_BufferMode.MC_Aborting,
                Error=> , 
                ErrorID=> );
    END_FOR
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_PREPARE:
    _GroupCommon              := _GroupRef.NcToPlc.Common;
    IF (_GroupCommon.GroupStatus.Flags.AllAxesStanding)
    THEN
      _eState                 := E_PROGRESS.PROGRESS_CHECK;
    END_IF

    FOR _nMover := 1 TO MAX_MOVER
    DO
      _fbHalt[_nMover](
                Axis          := _AxisRefMover[_nMover], 
                Execute       := TRUE, 
                Deceleration  := 15_000, 
                Jerk          := 150_000, 
                BufferMode    := MC_BufferMode.MC_Aborting,
                Error=> , 
                ErrorID=>);
      IF (_fbHalt[_nMover].Error)
      THEN
        _nErrorId             := _fbHalt[_nMover].ErrorID;
        _eState               := E_PROGRESS.PROGRESS_ERROR;
        EXIT;
      END_IF
    END_FOR
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_CHECK:
    _eState                   := E_PROGRESS.PROGRESS_DONE;
    FOR _nMover := 1 TO MAX_MOVER
    DO
      _fbHalt[_nMover](
                Axis          := _AxisRefMover[_nMover], 
                Execute       := FALSE, 
                Deceleration  := 15_000, 
                Jerk          := 150_000, 
                BufferMode    := MC_BufferMode.MC_Aborting,
                Error=> , 
                ErrorID=> );
    END_FOR
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------

McHaltAll                     := _eState;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="McResetAll" Id="{7980f3fd-5bef-4ae8-8850-6f4f1c282c2e}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD McResetAll : E_PROGRESS
VAR_INPUT
  Execute       : BOOL;
END_VAR
VAR_INST
  _nErrorId     : UDINT;
  _eState       : E_PROGRESS;

  _nMover       : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Execute THEN _eState     := E_PROGRESS.PROGRESS_INIT; END_IF 
IF NOT Check() THEN McResetAll  := E_PROGRESS.PROGRESS_ERROR; RETURN; END_IF


CASE _eState
OF
  E_PROGRESS.PROGRESS_INIT:
    IF Execute
    THEN
      _nErrorId               := 0;
      _nMover                 := 1;
      _eState                 := E_PROGRESS.PROGRESS_BUSY;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_BUSY:
    _eState                   := E_PROGRESS.PROGRESS_PREPARE;
    FOR _nMover := 1 TO MAX_MOVER
    DO
      _fbReset[_nMover](
                Axis          := _AxisRefMover[_nMover], 
                Execute       := FALSE);
    END_FOR
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_PREPARE:
    _GroupCommon              := _GroupRef.NcToPlc.Common;
    IF (_GroupCommon.GroupStatus.Flags.AllAxesStanding)
    THEN
      _eState                 := E_PROGRESS.PROGRESS_CHECK;
    END_IF

    FOR _nMover := 1 TO MAX_MOVER
    DO
      _fbReset[_nMover](
                Axis          := _AxisRefMover[_nMover], 
                Execute       := TRUE);

      IF (_fbReset[_nMover].Error)
      THEN
        _nErrorId             := _fbReset[_nMover].ErrorID;
        _eState               := E_PROGRESS.PROGRESS_ERROR;
        EXIT;
      END_IF
    END_FOR
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_CHECK:
    _eState                   := E_PROGRESS.PROGRESS_DONE;
    FOR _nMover := 1 TO MAX_MOVER
    DO
      _fbReset[_nMover](
                Axis          := _AxisRefMover[_nMover], 
                Execute       := FALSE);
    END_FOR
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------

McResetAll                    := _eState;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveAll" Id="{76bbaae3-ea77-4ded-ac3b-157676ea1cc3}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD RemoveAll : E_PROGRESS
VAR_INPUT
  Execute     : BOOL;
END_VAR
VAR_INST
  _nErrorId   : UDINT;
  _eState     : E_PROGRESS;

  _nMover     : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Execute THEN _eState         := E_PROGRESS.PROGRESS_INIT; END_IF 
IF NOT Check() THEN RemoveAll  := E_PROGRESS.PROGRESS_ERROR; RETURN; END_IF


CASE _eState
OF
  E_PROGRESS.PROGRESS_INIT:
    IF Execute
    THEN
      _nErrorId               := 0;
      _nMover                 := 1;
      _GroupCommon            := _GroupRef.NcToPlc.Common;

      IF (_GroupCommon.GroupAxesCount > 0)
      THEN
        _eState               := E_PROGRESS.PROGRESS_BUSY;
      ELSE
        _eState               := E_PROGRESS.PROGRESS_DONE;
      END_IF
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_BUSY:
    _eState                   := E_PROGRESS.PROGRESS_PREPARE;
    _fbRemoveAxisGroup[_nMover](
              AxesGroup       := _GroupRef, 
              Execute         := FALSE,
              IdentInGroup    := UDINT_TO_IDENTINGROUP(_AxisRefMover[_nMover].NcToPlc.AxisId));
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_PREPARE:
    _fbRemoveAxisGroup[_nMover](
              AxesGroup       := _GroupRef, 
              Execute         := TRUE,
              IdentInGroup    := UDINT_TO_IDENTINGROUP(_AxisRefMover[_nMover].NcToPlc.AxisId));

    IF (_fbRemoveAxisGroup[_nMover].Error)
    THEN
      _eState                 := E_PROGRESS.PROGRESS_ERROR;
      _nErrorId               := _fbRemoveAxisGroup[_nMover].ErrorId;

    ELSIF (_fbRemoveAxisGroup[_nMover].Done)
    THEN
      _eState                 := E_PROGRESS.PROGRESS_CHECK;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_CHECK:
    _eState                   := E_PROGRESS.PROGRESS_OCCUPIED;
    _fbRemoveAxisGroup[_nMover](
              AxesGroup       := _GroupRef, 
              Execute         := FALSE,
              IdentInGroup    := UDINT_TO_IDENTINGROUP(_AxisRefMover[_nMover].NcToPlc.AxisId));
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_OCCUPIED:
    _nMover                   := _nMover + 1;

    IF NOT (_nMover > MAX_MOVER)
    THEN
      _eState                 := E_PROGRESS.PROGRESS_BUSY;
    ELSE
      _eState                 := E_PROGRESS.PROGRESS_DONE;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------

RemoveAll                := _eState;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{7db11e3b-35b1-4953-9d39-7bec48cb7cf2}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD Reset : E_PROGRESS
VAR_INPUT
  Execute     : BOOL;
END_VAR
VAR_INST
  _nErrorId   : UDINT;
  _eState     : E_PROGRESS;

  _nMover     : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Execute THEN _eState       := E_PROGRESS.PROGRESS_INIT; END_IF 
IF NOT Check() THEN Reset    := E_PROGRESS.PROGRESS_ERROR; RETURN; END_IF


CASE _eState
OF
  E_PROGRESS.PROGRESS_INIT:
    IF Execute
    THEN
      _nErrorId                 := 0;
      _nMover                   := 1;
      _stGroupInfo.GroupErrorId := 0;
      _stGroupInfo.GroupError   := FALSE;

      _eState                   := E_PROGRESS.PROGRESS_BUSY;
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_BUSY:
    _eState                     := E_PROGRESS.PROGRESS_PREPARE;
    _fbGroupReset(
              AxesGroup         := _GroupRef, 
              Execute           := FALSE);
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
CASE _eState
OF
  E_PROGRESS.PROGRESS_PREPARE:
    _fbGroupReset(
              AxesGroup         := _GroupRef, 
              Execute           := TRUE);

    IF (_fbGroupReset.Error)
    THEN
      _eState                   := E_PROGRESS.PROGRESS_ERROR;
      _nErrorId                 := _fbGroupReset.ErrorId;
      _fbGroupReset(
              AxesGroup         := _GroupRef, 
              Execute           := FALSE); 


    ELSIF (_fbGroupReset.Done)
    THEN
      _eState                   := E_PROGRESS.PROGRESS_DONE;
      _fbGroupReset(
              AxesGroup         := _GroupRef, 
              Execute           := FALSE); 
    END_IF
END_CASE
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------

Reset                           := _eState;
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="fb_CaGroup_withOutInterface">
      <LineId Id="224" Count="0" />
      <LineId Id="622" Count="0" />
      <LineId Id="501" Count="0" />
      <LineId Id="53" Count="0" />
    </LineIds>
    <LineIds Name="fb_CaGroup_withOutInterface.AddAll">
      <LineId Id="295" Count="76" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_CaGroup_withOutInterface.AxisRef.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_CaGroup_withOutInterface.Check">
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="3" />
      <LineId Id="12" Count="0" />
      <LineId Id="14" Count="5" />
      <LineId Id="32" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="33" Count="0" />
    </LineIds>
    <LineIds Name="fb_CaGroup_withOutInterface.Disable">
      <LineId Id="262" Count="53" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_CaGroup_withOutInterface.Enable">
      <LineId Id="209" Count="54" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_CaGroup_withOutInterface.GroupInfo.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_CaGroup_withOutInterface.GroupRef.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_CaGroup_withOutInterface.InfoCycle">
      <LineId Id="7" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="12" Count="21" />
      <LineId Id="112" Count="5" />
      <LineId Id="121" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="44" Count="1" />
      <LineId Id="119" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="55" Count="1" />
      <LineId Id="58" Count="3" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_CaGroup_withOutInterface.McHaltAll">
      <LineId Id="15" Count="19" />
      <LineId Id="93" Count="10" />
      <LineId Id="40" Count="5" />
      <LineId Id="153" Count="0" />
      <LineId Id="132" Count="3" />
      <LineId Id="131" Count="0" />
      <LineId Id="104" Count="9" />
      <LineId Id="136" Count="1" />
      <LineId Id="139" Count="2" />
      <LineId Id="138" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="61" Count="6" />
      <LineId Id="120" Count="10" />
      <LineId Id="73" Count="2" />
      <LineId Id="90" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_CaGroup_withOutInterface.McResetAll">
      <LineId Id="15" Count="19" />
      <LineId Id="142" Count="5" />
      <LineId Id="40" Count="5" />
      <LineId Id="164" Count="0" />
      <LineId Id="132" Count="3" />
      <LineId Id="131" Count="0" />
      <LineId Id="104" Count="1" />
      <LineId Id="150" Count="3" />
      <LineId Id="136" Count="1" />
      <LineId Id="139" Count="2" />
      <LineId Id="138" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="61" Count="6" />
      <LineId Id="120" Count="4" />
      <LineId Id="130" Count="0" />
      <LineId Id="73" Count="2" />
      <LineId Id="90" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_CaGroup_withOutInterface.RemoveAll">
      <LineId Id="252" Count="11" />
      <LineId Id="343" Count="0" />
      <LineId Id="264" Count="68" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="fb_CaGroup_withOutInterface.Reset">
      <LineId Id="269" Count="10" />
      <LineId Id="333" Count="2" />
      <LineId Id="280" Count="42" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>